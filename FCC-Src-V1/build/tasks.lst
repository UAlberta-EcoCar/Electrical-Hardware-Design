ARM GAS  /tmp/ccfq1u8L.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	1120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  /tmp/ccfq1u8L.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  /tmp/ccfq1u8L.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB4:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/ccfq1u8L.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccfq1u8L.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  /tmp/ccfq1u8L.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  /tmp/ccfq1u8L.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccfq1u8L.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccfq1u8L.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccfq1u8L.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccfq1u8L.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 588 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccfq1u8L.s 			page 14


 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 592 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0AD1     		bne	.L2
 179              	.LBB119:
 180              	.LBB120:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  /tmp/ccfq1u8L.s 			page 15


  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  /tmp/ccfq1u8L.s 			page 16


 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/ccfq1u8L.s 			page 17


 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/ccfq1u8L.s 			page 18


 194              		.loc 2 203 1
 195 0026 00BF     		nop
 196              	.L3:
 197              	.LBE120:
 198              	.LBE119:
 199              		.loc 1 592 3 discriminator 1
 200 0028 FEE7     		b	.L3
 201              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 202              		.loc 1 593 3
 203 002a BB6B     		ldr	r3, [r7, #56]
 204 002c 002B     		cmp	r3, #0
 205 002e 0AD1     		bne	.L4
 206              	.LBB121:
 207              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 208              		.loc 2 195 2
 209              		.syntax unified
 210              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 211 0030 4FF05003 			mov r3, #80												
 212 0034 83F31188 		msr basepri, r3											
 213 0038 BFF36F8F 		isb														
 214 003c BFF34F8F 		dsb														
 215              	
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
 219 0040 FB61     		str	r3, [r7, #28]
 220              		.loc 2 203 1
 221 0042 00BF     		nop
 222              	.L5:
 223              	.LBE122:
 224              	.LBE121:
 225              		.loc 1 593 3 discriminator 2
 226 0044 FEE7     		b	.L5
 227              	.L4:
 228              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 229              		.loc 1 600 20
 230 0046 4FF49163 		mov	r3, #1160
 231 004a 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 232              		.loc 1 601 4
 233 004c 3B69     		ldr	r3, [r7, #16]
 234 004e B3F5916F 		cmp	r3, #1160
 235 0052 0AD0     		beq	.L6
 236              	.LBB124:
 237              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 238              		.loc 2 195 2
 239              		.syntax unified
ARM GAS  /tmp/ccfq1u8L.s 			page 19


 240              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 241 0054 4FF05003 			mov r3, #80												
 242 0058 83F31188 		msr basepri, r3											
 243 005c BFF36F8F 		isb														
 244 0060 BFF34F8F 		dsb														
 245              	
 246              	@ 0 "" 2
 247              		.thumb
 248              		.syntax unified
 249 0064 BB61     		str	r3, [r7, #24]
 250              		.loc 2 203 1
 251 0066 00BF     		nop
 252              	.L7:
 253              	.LBE125:
 254              	.LBE124:
 255              		.loc 1 601 4 discriminator 3
 256 0068 FEE7     		b	.L7
 257              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 258              		.loc 1 602 4
 259 006a 3B69     		ldr	r3, [r7, #16]
 260              	.LBE123:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 261              		.loc 1 607 5
 262 006c BB6B     		ldr	r3, [r7, #56]
 263 006e 002B     		cmp	r3, #0
 264 0070 1ED0     		beq	.L8
 265              		.loc 1 607 32 discriminator 1
 266 0072 7B6B     		ldr	r3, [r7, #52]
 267 0074 002B     		cmp	r3, #0
 268 0076 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 269              		.loc 1 611 13
 270 0078 BB6B     		ldr	r3, [r7, #56]
 271 007a 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 272              		.loc 1 612 22
 273 007c 7B6A     		ldr	r3, [r7, #36]
 274 007e 7A6B     		ldr	r2, [r7, #52]
 275 0080 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 276              		.loc 1 618 37
 277 0082 7B6A     		ldr	r3, [r7, #36]
 278 0084 0222     		movs	r2, #2
 279 0086 83F88524 		strb	r2, [r3, #1157]
ARM GAS  /tmp/ccfq1u8L.s 			page 20


 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 280              		.loc 1 622 4
 281 008a 0023     		movs	r3, #0
 282 008c 0393     		str	r3, [sp, #12]
 283 008e 7B6A     		ldr	r3, [r7, #36]
 284 0090 0293     		str	r3, [sp, #8]
 285 0092 07F11403 		add	r3, r7, #20
 286 0096 0193     		str	r3, [sp, #4]
 287 0098 3B6B     		ldr	r3, [r7, #48]
 288 009a 0093     		str	r3, [sp]
 289 009c 3B68     		ldr	r3, [r7]
 290 009e 7A68     		ldr	r2, [r7, #4]
 291 00a0 B968     		ldr	r1, [r7, #8]
 292 00a2 F868     		ldr	r0, [r7, #12]
 293 00a4 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 294              		.loc 1 623 4
 295 00a8 786A     		ldr	r0, [r7, #36]
 296 00aa FFF7FEFF 		bl	prvAddNewTaskToReadyList
 297 00ae 01E0     		b	.L9
 298              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 299              		.loc 1 627 12
 300 00b0 0023     		movs	r3, #0
 301 00b2 7B61     		str	r3, [r7, #20]
 302              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 303              		.loc 1 630 10
 304 00b4 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 631 2
 306 00b6 1846     		mov	r0, r3
 307 00b8 2837     		adds	r7, r7, #40
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310 00ba BD46     		mov	sp, r7
 311              	.LCFI4:
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 00bc 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE4:
 318              		.section	.text.xTaskCreate,"ax",%progbits
 319              		.align	1
 320              		.global	xTaskCreate
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	xTaskCreate:
ARM GAS  /tmp/ccfq1u8L.s 			page 21


 326              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  /tmp/ccfq1u8L.s 			page 22


 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 739 2
 328              		.cfi_startproc
 329              		@ args = 8, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccfq1u8L.s 			page 23


 332              	.LCFI5:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 8CB0     		sub	sp, sp, #48
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 56
 339 0004 04AF     		add	r7, sp, #16
 340              	.LCFI7:
 341              		.cfi_def_cfa 7, 40
 342 0006 F860     		str	r0, [r7, #12]
 343 0008 B960     		str	r1, [r7, #8]
 344 000a 3B60     		str	r3, [r7]
 345 000c 1346     		mov	r3, r2	@ movhi
 346 000e FB80     		strh	r3, [r7, #6]	@ movhi
 347              	.LBB126:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 348              		.loc 1 773 32
 349 0010 FB88     		ldrh	r3, [r7, #6]
 350              		.loc 1 773 14
 351 0012 9B00     		lsls	r3, r3, #2
 352 0014 1846     		mov	r0, r3
 353 0016 FFF7FEFF 		bl	pvPortMalloc
 354 001a 7861     		str	r0, [r7, #20]
ARM GAS  /tmp/ccfq1u8L.s 			page 24


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 355              		.loc 1 775 6
 356 001c 7B69     		ldr	r3, [r7, #20]
 357 001e 002B     		cmp	r3, #0
 358 0020 0FD0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 359              		.loc 1 778 28
 360 0022 4FF49160 		mov	r0, #1160
 361 0026 FFF7FEFF 		bl	pvPortMalloc
 362 002a F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 363              		.loc 1 780 7
 364 002c FB69     		ldr	r3, [r7, #28]
 365 002e 002B     		cmp	r3, #0
 366 0030 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 367              		.loc 1 783 24
 368 0032 FB69     		ldr	r3, [r7, #28]
 369 0034 7A69     		ldr	r2, [r7, #20]
 370 0036 1A63     		str	r2, [r3, #48]
 371 0038 05E0     		b	.L14
 372              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 373              		.loc 1 789 6
 374 003a 7869     		ldr	r0, [r7, #20]
 375 003c FFF7FEFF 		bl	vPortFree
 376 0040 01E0     		b	.L14
 377              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 378              		.loc 1 794 14
 379 0042 0023     		movs	r3, #0
 380 0044 FB61     		str	r3, [r7, #28]
 381              	.L14:
 382              	.LBE126:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 383              		.loc 1 799 5
 384 0046 FB69     		ldr	r3, [r7, #28]
 385 0048 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 25


 386 004a 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 387              		.loc 1 805 37
 388 004c FB69     		ldr	r3, [r7, #28]
 389 004e 0022     		movs	r2, #0
 390 0050 83F88524 		strb	r2, [r3, #1157]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 391              		.loc 1 809 4
 392 0054 FA88     		ldrh	r2, [r7, #6]
 393 0056 0023     		movs	r3, #0
 394 0058 0393     		str	r3, [sp, #12]
 395 005a FB69     		ldr	r3, [r7, #28]
 396 005c 0293     		str	r3, [sp, #8]
 397 005e FB6A     		ldr	r3, [r7, #44]
 398 0060 0193     		str	r3, [sp, #4]
 399 0062 BB6A     		ldr	r3, [r7, #40]
 400 0064 0093     		str	r3, [sp]
 401 0066 3B68     		ldr	r3, [r7]
 402 0068 B968     		ldr	r1, [r7, #8]
 403 006a F868     		ldr	r0, [r7, #12]
 404 006c FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 405              		.loc 1 810 4
 406 0070 F869     		ldr	r0, [r7, #28]
 407 0072 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 408              		.loc 1 811 12
 409 0076 0123     		movs	r3, #1
 410 0078 BB61     		str	r3, [r7, #24]
 411 007a 02E0     		b	.L16
 412              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 413              		.loc 1 815 12
 414 007c 4FF0FF33 		mov	r3, #-1
 415 0080 BB61     		str	r3, [r7, #24]
 416              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 417              		.loc 1 818 10
 418 0082 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 419              		.loc 1 819 2
 420 0084 1846     		mov	r0, r3
 421 0086 2037     		adds	r7, r7, #32
 422              	.LCFI8:
ARM GAS  /tmp/ccfq1u8L.s 			page 26


 423              		.cfi_def_cfa_offset 8
 424 0088 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 008a 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	prvInitialiseNewTask:
 439              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 440              		.loc 1 832 1
 441              		.cfi_startproc
 442              		@ args = 16, pretend = 0, frame = 32
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI10:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 88B0     		sub	sp, sp, #32
 450              	.LCFI11:
 451              		.cfi_def_cfa_offset 40
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI12:
 454              		.cfi_def_cfa_register 7
 455 0006 F860     		str	r0, [r7, #12]
 456 0008 B960     		str	r1, [r7, #8]
 457 000a 7A60     		str	r2, [r7, #4]
 458 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccfq1u8L.s 			page 27


 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 459              		.loc 1 854 28
 460 000e 3B6B     		ldr	r3, [r7, #48]
 461 0010 186B     		ldr	r0, [r3, #48]
 462              		.loc 1 854 12
 463 0012 7B68     		ldr	r3, [r7, #4]
 464 0014 9B00     		lsls	r3, r3, #2
 465 0016 1A46     		mov	r2, r3
 466 0018 A521     		movs	r1, #165
 467 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 468              		.loc 1 864 29
 469 001e 3B6B     		ldr	r3, [r7, #48]
 470 0020 1A6B     		ldr	r2, [r3, #48]
 471              		.loc 1 864 38
 472 0022 7B68     		ldr	r3, [r7, #4]
 473 0024 03F18043 		add	r3, r3, #1073741824
 474 0028 013B     		subs	r3, r3, #1
 475 002a 9B00     		lsls	r3, r3, #2
 476              		.loc 1 864 16
 477 002c 1344     		add	r3, r3, r2
 478 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 479              		.loc 1 865 40
 480 0030 BB69     		ldr	r3, [r7, #24]
 481              		.loc 1 865 81
 482 0032 23F00703 		bic	r3, r3, #7
 483              		.loc 1 865 16
 484 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 485              		.loc 1 868 3
 486 0038 BB69     		ldr	r3, [r7, #24]
 487 003a 03F00703 		and	r3, r3, #7
 488 003e 002B     		cmp	r3, #0
 489 0040 0AD0     		beq	.L19
ARM GAS  /tmp/ccfq1u8L.s 			page 28


 490              	.LBB127:
 491              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 492              		.loc 2 195 2
 493              		.syntax unified
 494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 495 0042 4FF05003 			mov r3, #80												
 496 0046 83F31188 		msr basepri, r3											
 497 004a BFF36F8F 		isb														
 498 004e BFF34F8F 		dsb														
 499              	
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503 0052 7B61     		str	r3, [r7, #20]
 504              		.loc 2 203 1
 505 0054 00BF     		nop
 506              	.L20:
 507              	.LBE128:
 508              	.LBE127:
 509              		.loc 1 868 3 discriminator 1
 510 0056 FEE7     		b	.L20
 511              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 512              		.loc 1 892 4
 513 0058 BB68     		ldr	r3, [r7, #8]
 514 005a 002B     		cmp	r3, #0
 515 005c 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 516              		.loc 1 894 10
 517 005e 0023     		movs	r3, #0
 518 0060 FB61     		str	r3, [r7, #28]
 519              		.loc 1 894 3
ARM GAS  /tmp/ccfq1u8L.s 			page 29


 520 0062 12E0     		b	.L22
 521              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 522              		.loc 1 896 38
 523 0064 BA68     		ldr	r2, [r7, #8]
 524 0066 FB69     		ldr	r3, [r7, #28]
 525 0068 1344     		add	r3, r3, r2
 526 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 527              		.loc 1 896 30
 528 006c 3A6B     		ldr	r2, [r7, #48]
 529 006e FB69     		ldr	r3, [r7, #28]
 530 0070 1344     		add	r3, r3, r2
 531 0072 3433     		adds	r3, r3, #52
 532 0074 0A46     		mov	r2, r1
 533 0076 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 534              		.loc 1 901 14
 535 0078 BA68     		ldr	r2, [r7, #8]
 536 007a FB69     		ldr	r3, [r7, #28]
 537 007c 1344     		add	r3, r3, r2
 538 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 539              		.loc 1 901 6
 540 0080 002B     		cmp	r3, #0
 541 0082 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 542              		.loc 1 894 77 discriminator 2
 543 0084 FB69     		ldr	r3, [r7, #28]
 544 0086 0133     		adds	r3, r3, #1
 545 0088 FB61     		str	r3, [r7, #28]
 546              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 547              		.loc 1 894 3 discriminator 1
 548 008a FB69     		ldr	r3, [r7, #28]
 549 008c 0F2B     		cmp	r3, #15
 550 008e E9D9     		bls	.L25
 551 0090 00E0     		b	.L24
 552              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 553              		.loc 1 903 5
 554 0092 00BF     		nop
 555              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
ARM GAS  /tmp/ccfq1u8L.s 			page 30


 556              		.loc 1 913 55
 557 0094 3B6B     		ldr	r3, [r7, #48]
 558 0096 0022     		movs	r2, #0
 559 0098 83F84320 		strb	r2, [r3, #67]
 560 009c 03E0     		b	.L26
 561              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 562              		.loc 1 919 29
 563 009e 3B6B     		ldr	r3, [r7, #48]
 564 00a0 0022     		movs	r2, #0
 565 00a2 83F83420 		strb	r2, [r3, #52]
 566              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 567              		.loc 1 924 4
 568 00a6 BB6A     		ldr	r3, [r7, #40]
 569 00a8 372B     		cmp	r3, #55
 570 00aa 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 571              		.loc 1 926 14
 572 00ac 3723     		movs	r3, #55
 573 00ae BB62     		str	r3, [r7, #40]
 574              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 575              		.loc 1 933 23
 576 00b0 3B6B     		ldr	r3, [r7, #48]
 577 00b2 BA6A     		ldr	r2, [r7, #40]
 578 00b4 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 579              		.loc 1 936 28
 580 00b6 3B6B     		ldr	r3, [r7, #48]
 581 00b8 BA6A     		ldr	r2, [r7, #40]
 582 00ba DA64     		str	r2, [r3, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 583              		.loc 1 937 27
 584 00bc 3B6B     		ldr	r3, [r7, #48]
 585 00be 0022     		movs	r2, #0
 586 00c0 1A65     		str	r2, [r3, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccfq1u8L.s 			page 31


 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 587              		.loc 1 941 2
 588 00c2 3B6B     		ldr	r3, [r7, #48]
 589 00c4 0433     		adds	r3, r3, #4
 590 00c6 1846     		mov	r0, r3
 591 00c8 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 592              		.loc 1 942 2
 593 00cc 3B6B     		ldr	r3, [r7, #48]
 594 00ce 1833     		adds	r3, r3, #24
 595 00d0 1846     		mov	r0, r3
 596 00d2 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 597              		.loc 1 946 2
 598 00d6 3B6B     		ldr	r3, [r7, #48]
 599 00d8 3A6B     		ldr	r2, [r7, #48]
 600 00da 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 601              		.loc 1 949 2
 602 00dc BB6A     		ldr	r3, [r7, #40]
 603 00de C3F13802 		rsb	r2, r3, #56
 604 00e2 3B6B     		ldr	r3, [r7, #48]
 605 00e4 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 606              		.loc 1 950 2
 607 00e6 3B6B     		ldr	r3, [r7, #48]
 608 00e8 3A6B     		ldr	r2, [r7, #48]
 609 00ea 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccfq1u8L.s 			page 32


 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 610              		.loc 1 992 29
 611 00ec 3B6B     		ldr	r3, [r7, #48]
 612 00ee 0022     		movs	r2, #0
 613 00f0 C3F88024 		str	r2, [r3, #1152]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 614              		.loc 1 993 27
 615 00f4 3B6B     		ldr	r3, [r7, #48]
 616 00f6 0022     		movs	r2, #0
 617 00f8 83F88424 		strb	r2, [r3, #1156]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 618              		.loc 1 1002 3
 619 00fc 3B6B     		ldr	r3, [r7, #48]
 620 00fe 5833     		adds	r3, r3, #88
 621 0100 4FF48562 		mov	r2, #1064
 622 0104 0021     		movs	r1, #0
 623 0106 1846     		mov	r0, r3
 624 0108 FFF7FEFF 		bl	memset
 625 010c 3B6B     		ldr	r3, [r7, #48]
 626 010e 03F55172 		add	r2, r3, #836
 627 0112 3B6B     		ldr	r3, [r7, #48]
 628 0114 DA65     		str	r2, [r3, #92]
 629 0116 3B6B     		ldr	r3, [r7, #48]
 630 0118 03F56B72 		add	r2, r3, #940
 631 011c 3B6B     		ldr	r3, [r7, #48]
 632 011e 1A66     		str	r2, [r3, #96]
 633 0120 3B6B     		ldr	r3, [r7, #48]
 634 0122 03F21442 		addw	r2, r3, #1044
 635 0126 3B6B     		ldr	r3, [r7, #48]
 636 0128 5A66     		str	r2, [r3, #100]
 637 012a 396B     		ldr	r1, [r7, #48]
ARM GAS  /tmp/ccfq1u8L.s 			page 33


 638 012c 4FF00102 		mov	r2, #1
 639 0130 4FF00003 		mov	r3, #0
 640 0134 C1E94023 		strd	r2, [r1, #256]
 641 0138 3B6B     		ldr	r3, [r7, #48]
 642 013a 43F20E32 		movw	r2, #13070
 643 013e A3F80821 		strh	r2, [r3, #264]	@ movhi
 644 0142 3B6B     		ldr	r3, [r7, #48]
 645 0144 4AF6CD32 		movw	r2, #43981
 646 0148 A3F80A21 		strh	r2, [r3, #266]	@ movhi
 647 014c 3B6B     		ldr	r3, [r7, #48]
 648 014e 41F23422 		movw	r2, #4660
 649 0152 A3F80C21 		strh	r2, [r3, #268]	@ movhi
 650 0156 3B6B     		ldr	r3, [r7, #48]
 651 0158 4EF26D62 		movw	r2, #58989
 652 015c A3F80E21 		strh	r2, [r3, #270]	@ movhi
 653 0160 3B6B     		ldr	r3, [r7, #48]
 654 0162 4DF6EC62 		movw	r2, #57068
 655 0166 A3F81021 		strh	r2, [r3, #272]	@ movhi
 656 016a 3B6B     		ldr	r3, [r7, #48]
 657 016c 0522     		movs	r2, #5
 658 016e A3F81221 		strh	r2, [r3, #274]	@ movhi
 659 0172 3B6B     		ldr	r3, [r7, #48]
 660 0174 0B22     		movs	r2, #11
 661 0176 A3F81421 		strh	r2, [r3, #276]	@ movhi
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
ARM GAS  /tmp/ccfq1u8L.s 			page 34


1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 662              		.loc 1 1058 29
 663 017a 3A68     		ldr	r2, [r7]
 664 017c F968     		ldr	r1, [r7, #12]
 665 017e B869     		ldr	r0, [r7, #24]
 666 0180 FFF7FEFF 		bl	pxPortInitialiseStack
 667 0184 0246     		mov	r2, r0
 668              		.loc 1 1058 27
 669 0186 3B6B     		ldr	r3, [r7, #48]
 670 0188 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 671              		.loc 1 1064 4
 672 018a FB6A     		ldr	r3, [r7, #44]
 673 018c 002B     		cmp	r3, #0
 674 018e 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 675              		.loc 1 1068 18
 676 0190 FB6A     		ldr	r3, [r7, #44]
 677 0192 3A6B     		ldr	r2, [r7, #48]
 678 0194 1A60     		str	r2, [r3]
 679              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccfq1u8L.s 			page 35


 680              		.loc 1 1074 1
 681 0196 00BF     		nop
 682 0198 2037     		adds	r7, r7, #32
 683              	.LCFI13:
 684              		.cfi_def_cfa_offset 8
 685 019a BD46     		mov	sp, r7
 686              	.LCFI14:
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 019c 80BD     		pop	{r7, pc}
 690              		.cfi_endproc
 691              	.LFE6:
 693              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 694              		.align	1
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 699              	prvAddNewTaskToReadyList:
 700              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 701              		.loc 1 1078 1
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 8
 704              		@ frame_needed = 1, uses_anonymous_args = 0
 705 0000 80B5     		push	{r7, lr}
 706              	.LCFI15:
 707              		.cfi_def_cfa_offset 8
 708              		.cfi_offset 7, -8
 709              		.cfi_offset 14, -4
 710 0002 82B0     		sub	sp, sp, #8
 711              	.LCFI16:
 712              		.cfi_def_cfa_offset 16
 713 0004 00AF     		add	r7, sp, #0
 714              	.LCFI17:
 715              		.cfi_def_cfa_register 7
 716 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 717              		.loc 1 1081 2
 718 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 719              		.loc 1 1083 25
 720 000c 2D4B     		ldr	r3, .L37
 721 000e 1B68     		ldr	r3, [r3]
 722 0010 0133     		adds	r3, r3, #1
 723 0012 2C4A     		ldr	r2, .L37
 724 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 725              		.loc 1 1084 20
 726 0016 2C4B     		ldr	r3, .L37+4
 727 0018 1B68     		ldr	r3, [r3]
 728              		.loc 1 1084 5
ARM GAS  /tmp/ccfq1u8L.s 			page 36


 729 001a 002B     		cmp	r3, #0
 730 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 731              		.loc 1 1088 17
 732 001e 2A4A     		ldr	r2, .L37+4
 733 0020 7B68     		ldr	r3, [r7, #4]
 734 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 735              		.loc 1 1090 31
 736 0024 274B     		ldr	r3, .L37
 737 0026 1B68     		ldr	r3, [r3]
 738              		.loc 1 1090 6
 739 0028 012B     		cmp	r3, #1
 740 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 741              		.loc 1 1095 5
 742 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 743 0030 0DE0     		b	.L33
 744              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 745              		.loc 1 1107 26
 746 0032 264B     		ldr	r3, .L37+8
 747 0034 1B68     		ldr	r3, [r3]
 748              		.loc 1 1107 6
 749 0036 002B     		cmp	r3, #0
 750 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 751              		.loc 1 1109 21
 752 003a 234B     		ldr	r3, .L37+4
 753 003c 1B68     		ldr	r3, [r3]
 754 003e DA6A     		ldr	r2, [r3, #44]
 755              		.loc 1 1109 45
 756 0040 7B68     		ldr	r3, [r7, #4]
 757 0042 DB6A     		ldr	r3, [r3, #44]
 758              		.loc 1 1109 7
 759 0044 9A42     		cmp	r2, r3
 760 0046 02D8     		bhi	.L33
ARM GAS  /tmp/ccfq1u8L.s 			page 37


1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 761              		.loc 1 1111 19
 762 0048 1F4A     		ldr	r2, .L37+4
 763 004a 7B68     		ldr	r3, [r7, #4]
 764 004c 1360     		str	r3, [r2]
 765              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 766              		.loc 1 1124 15
 767 004e 204B     		ldr	r3, .L37+12
 768 0050 1B68     		ldr	r3, [r3]
 769 0052 0133     		adds	r3, r3, #1
 770 0054 1E4A     		ldr	r2, .L37+12
 771 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 772              		.loc 1 1129 26
 773 0058 1D4B     		ldr	r3, .L37+12
 774 005a 1A68     		ldr	r2, [r3]
 775 005c 7B68     		ldr	r3, [r7, #4]
 776 005e 5A64     		str	r2, [r3, #68]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 777              		.loc 1 1134 3
 778 0060 7B68     		ldr	r3, [r7, #4]
 779 0062 DA6A     		ldr	r2, [r3, #44]
 780 0064 1B4B     		ldr	r3, .L37+16
 781 0066 1B68     		ldr	r3, [r3]
 782 0068 9A42     		cmp	r2, r3
 783 006a 03D9     		bls	.L34
 784              		.loc 1 1134 3 is_stmt 0 discriminator 1
 785 006c 7B68     		ldr	r3, [r7, #4]
 786 006e DB6A     		ldr	r3, [r3, #44]
 787 0070 184A     		ldr	r2, .L37+16
 788 0072 1360     		str	r3, [r2]
 789              	.L34:
 790              		.loc 1 1134 3 discriminator 3
 791 0074 7B68     		ldr	r3, [r7, #4]
 792 0076 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccfq1u8L.s 			page 38


 793 0078 1346     		mov	r3, r2
 794 007a 9B00     		lsls	r3, r3, #2
 795 007c 1344     		add	r3, r3, r2
 796 007e 9B00     		lsls	r3, r3, #2
 797 0080 154A     		ldr	r2, .L37+20
 798 0082 1A44     		add	r2, r2, r3
 799 0084 7B68     		ldr	r3, [r7, #4]
 800 0086 0433     		adds	r3, r3, #4
 801 0088 1946     		mov	r1, r3
 802 008a 1046     		mov	r0, r2
 803 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 804              		.loc 1 1138 2 is_stmt 1 discriminator 3
 805 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 806              		.loc 1 1140 24 discriminator 3
 807 0094 0D4B     		ldr	r3, .L37+8
 808 0096 1B68     		ldr	r3, [r3]
 809              		.loc 1 1140 4 discriminator 3
 810 0098 002B     		cmp	r3, #0
 811 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 812              		.loc 1 1144 19
 813 009c 0A4B     		ldr	r3, .L37+4
 814 009e 1B68     		ldr	r3, [r3]
 815 00a0 DA6A     		ldr	r2, [r3, #44]
 816              		.loc 1 1144 42
 817 00a2 7B68     		ldr	r3, [r7, #4]
 818 00a4 DB6A     		ldr	r3, [r3, #44]
 819              		.loc 1 1144 5
 820 00a6 9A42     		cmp	r2, r3
 821 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 822              		.loc 1 1146 4
 823 00aa 0C4B     		ldr	r3, .L37+24
 824 00ac 4FF08052 		mov	r2, #268435456
 825 00b0 1A60     		str	r2, [r3]
 826              		.syntax unified
 827              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 828 00b2 BFF34F8F 		dsb
 829              	@ 0 "" 2
 830              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 831 00b6 BFF36F8F 		isb
 832              	@ 0 "" 2
 833              		.thumb
 834              		.syntax unified
 835              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccfq1u8L.s 			page 39


1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 836              		.loc 1 1157 1
 837 00ba 00BF     		nop
 838 00bc 0837     		adds	r7, r7, #8
 839              	.LCFI18:
 840              		.cfi_def_cfa_offset 8
 841 00be BD46     		mov	sp, r7
 842              	.LCFI19:
 843              		.cfi_def_cfa_register 13
 844              		@ sp needed
 845 00c0 80BD     		pop	{r7, pc}
 846              	.L38:
 847 00c2 00BF     		.align	2
 848              	.L37:
 849 00c4 00000000 		.word	uxCurrentNumberOfTasks
 850 00c8 00000000 		.word	pxCurrentTCB
 851 00cc 00000000 		.word	xSchedulerRunning
 852 00d0 00000000 		.word	uxTaskNumber
 853 00d4 00000000 		.word	uxTopReadyPriority
 854 00d8 00000000 		.word	pxReadyTasksLists
 855 00dc 04ED00E0 		.word	-536810236
 856              		.cfi_endproc
 857              	.LFE7:
 859              		.section	.text.vTaskDelete,"ax",%progbits
 860              		.align	1
 861              		.global	vTaskDelete
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 866              	vTaskDelete:
 867              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 868              		.loc 1 1163 2
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 16
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 80B5     		push	{r7, lr}
 873              	.LCFI20:
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 84B0     		sub	sp, sp, #16
 878              	.LCFI21:
 879              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccfq1u8L.s 			page 40


 880 0004 00AF     		add	r7, sp, #0
 881              	.LCFI22:
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 884              		.loc 1 1166 3
 885 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 886              		.loc 1 1170 12
 887 000c 7B68     		ldr	r3, [r7, #4]
 888 000e 002B     		cmp	r3, #0
 889 0010 02D1     		bne	.L40
 890              		.loc 1 1170 12 is_stmt 0 discriminator 1
 891 0012 2C4B     		ldr	r3, .L49
 892 0014 1B68     		ldr	r3, [r3]
 893 0016 00E0     		b	.L41
 894              	.L40:
 895              		.loc 1 1170 12 discriminator 2
 896 0018 7B68     		ldr	r3, [r7, #4]
 897              	.L41:
 898              		.loc 1 1170 10 is_stmt 1 discriminator 4
 899 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 900              		.loc 1 1173 8 discriminator 4
 901 001c FB68     		ldr	r3, [r7, #12]
 902 001e 0433     		adds	r3, r3, #4
 903 0020 1846     		mov	r0, r3
 904 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 905              		.loc 1 1183 8 discriminator 4
 906 0026 FB68     		ldr	r3, [r7, #12]
 907 0028 9B6A     		ldr	r3, [r3, #40]
 908              		.loc 1 1183 6 discriminator 4
 909 002a 002B     		cmp	r3, #0
 910 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 911              		.loc 1 1185 14
 912 002e FB68     		ldr	r3, [r7, #12]
 913 0030 1833     		adds	r3, r3, #24
 914 0032 1846     		mov	r0, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 41


 915 0034 FFF7FEFF 		bl	uxListRemove
 916              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 917              		.loc 1 1196 16
 918 0038 234B     		ldr	r3, .L49+4
 919 003a 1B68     		ldr	r3, [r3]
 920 003c 0133     		adds	r3, r3, #1
 921 003e 224A     		ldr	r2, .L49+4
 922 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 923              		.loc 1 1198 14
 924 0042 204B     		ldr	r3, .L49
 925 0044 1B68     		ldr	r3, [r3]
 926              		.loc 1 1198 6
 927 0046 FA68     		ldr	r2, [r7, #12]
 928 0048 9A42     		cmp	r2, r3
 929 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 930              		.loc 1 1205 5
 931 004c FB68     		ldr	r3, [r7, #12]
 932 004e 0433     		adds	r3, r3, #4
 933 0050 1946     		mov	r1, r3
 934 0052 1E48     		ldr	r0, .L49+8
 935 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 936              		.loc 1 1210 5
 937 0058 1D4B     		ldr	r3, .L49+12
 938 005a 1B68     		ldr	r3, [r3]
 939 005c 0133     		adds	r3, r3, #1
 940 005e 1C4A     		ldr	r2, .L49+12
 941 0060 1360     		str	r3, [r2]
 942 0062 09E0     		b	.L44
 943              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
ARM GAS  /tmp/ccfq1u8L.s 			page 42


1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 944              		.loc 1 1225 5
 945 0064 1B4B     		ldr	r3, .L49+16
 946 0066 1B68     		ldr	r3, [r3]
 947 0068 013B     		subs	r3, r3, #1
 948 006a 1A4A     		ldr	r2, .L49+16
 949 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 950              		.loc 1 1227 5
 951 006e F868     		ldr	r0, [r7, #12]
 952 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 953              		.loc 1 1231 5
 954 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 955              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 956              		.loc 1 1234 3
 957 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 958              		.loc 1 1238 25
 959 007c 164B     		ldr	r3, .L49+20
 960 007e 1B68     		ldr	r3, [r3]
 961              		.loc 1 1238 5
 962 0080 002B     		cmp	r3, #0
 963 0082 1BD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 964              		.loc 1 1240 14
 965 0084 0F4B     		ldr	r3, .L49
 966 0086 1B68     		ldr	r3, [r3]
 967              		.loc 1 1240 6
 968 0088 FA68     		ldr	r2, [r7, #12]
 969 008a 9A42     		cmp	r2, r3
 970 008c 16D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 971              		.loc 1 1242 5
ARM GAS  /tmp/ccfq1u8L.s 			page 43


 972 008e 134B     		ldr	r3, .L49+24
 973 0090 1B68     		ldr	r3, [r3]
 974 0092 002B     		cmp	r3, #0
 975 0094 0AD0     		beq	.L46
 976              	.LBB129:
 977              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 978              		.loc 2 195 2
 979              		.syntax unified
 980              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 981 0096 4FF05003 			mov r3, #80												
 982 009a 83F31188 		msr basepri, r3											
 983 009e BFF36F8F 		isb														
 984 00a2 BFF34F8F 		dsb														
 985              	
 986              	@ 0 "" 2
 987              		.thumb
 988              		.syntax unified
 989 00a6 BB60     		str	r3, [r7, #8]
 990              		.loc 2 203 1
 991 00a8 00BF     		nop
 992              	.L47:
 993              	.LBE130:
 994              	.LBE129:
 995              		.loc 1 1242 5 discriminator 1
 996 00aa FEE7     		b	.L47
 997              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 998              		.loc 1 1243 5
 999 00ac 0C4B     		ldr	r3, .L49+28
 1000 00ae 4FF08052 		mov	r2, #268435456
 1001 00b2 1A60     		str	r2, [r3]
 1002              		.syntax unified
 1003              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1004 00b4 BFF34F8F 		dsb
 1005              	@ 0 "" 2
 1006              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1007 00b8 BFF36F8F 		isb
 1008              	@ 0 "" 2
 1009              		.thumb
 1010              		.syntax unified
 1011              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1012              		.loc 1 1250 2
 1013 00bc 00BF     		nop
 1014 00be 1037     		adds	r7, r7, #16
 1015              	.LCFI23:
 1016              		.cfi_def_cfa_offset 8
 1017 00c0 BD46     		mov	sp, r7
 1018              	.LCFI24:
 1019              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccfq1u8L.s 			page 44


 1020              		@ sp needed
 1021 00c2 80BD     		pop	{r7, pc}
 1022              	.L50:
 1023              		.align	2
 1024              	.L49:
 1025 00c4 00000000 		.word	pxCurrentTCB
 1026 00c8 00000000 		.word	uxTaskNumber
 1027 00cc 00000000 		.word	xTasksWaitingTermination
 1028 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1029 00d4 00000000 		.word	uxCurrentNumberOfTasks
 1030 00d8 00000000 		.word	xSchedulerRunning
 1031 00dc 00000000 		.word	uxSchedulerSuspended
 1032 00e0 04ED00E0 		.word	-536810236
 1033              		.cfi_endproc
 1034              	.LFE8:
 1036              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1037              		.align	1
 1038              		.global	vTaskDelayUntil
 1039              		.syntax unified
 1040              		.thumb
 1041              		.thumb_func
 1043              	vTaskDelayUntil:
 1044              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1045              		.loc 1 1258 2
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 40
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0000 80B5     		push	{r7, lr}
 1050              	.LCFI25:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 1054 0002 8AB0     		sub	sp, sp, #40
 1055              	.LCFI26:
 1056              		.cfi_def_cfa_offset 48
 1057 0004 00AF     		add	r7, sp, #0
 1058              	.LCFI27:
 1059              		.cfi_def_cfa_register 7
 1060 0006 7860     		str	r0, [r7, #4]
 1061 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1062              		.loc 1 1260 30
 1063 000a 0023     		movs	r3, #0
 1064 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1065              		.loc 1 1262 3
 1066 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccfq1u8L.s 			page 45


 1067 0010 002B     		cmp	r3, #0
 1068 0012 0AD1     		bne	.L52
 1069              	.LBB131:
 1070              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1071              		.loc 2 195 2
 1072              		.syntax unified
 1073              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1074 0014 4FF05003 			mov r3, #80												
 1075 0018 83F31188 		msr basepri, r3											
 1076 001c BFF36F8F 		isb														
 1077 0020 BFF34F8F 		dsb														
 1078              	
 1079              	@ 0 "" 2
 1080              		.thumb
 1081              		.syntax unified
 1082 0024 7B61     		str	r3, [r7, #20]
 1083              		.loc 2 203 1
 1084 0026 00BF     		nop
 1085              	.L53:
 1086              	.LBE132:
 1087              	.LBE131:
 1088              		.loc 1 1262 3 discriminator 1
 1089 0028 FEE7     		b	.L53
 1090              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1091              		.loc 1 1263 3
 1092 002a 3B68     		ldr	r3, [r7]
 1093 002c 002B     		cmp	r3, #0
 1094 002e 0AD1     		bne	.L54
 1095              	.LBB133:
 1096              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1097              		.loc 2 195 2
 1098              		.syntax unified
 1099              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1100 0030 4FF05003 			mov r3, #80												
 1101 0034 83F31188 		msr basepri, r3											
 1102 0038 BFF36F8F 		isb														
 1103 003c BFF34F8F 		dsb														
 1104              	
 1105              	@ 0 "" 2
 1106              		.thumb
 1107              		.syntax unified
 1108 0040 3B61     		str	r3, [r7, #16]
 1109              		.loc 2 203 1
 1110 0042 00BF     		nop
 1111              	.L55:
 1112              	.LBE134:
 1113              	.LBE133:
 1114              		.loc 1 1263 3 discriminator 2
 1115 0044 FEE7     		b	.L55
 1116              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1117              		.loc 1 1264 3
 1118 0046 2A4B     		ldr	r3, .L64
 1119 0048 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 46


 1120 004a 002B     		cmp	r3, #0
 1121 004c 0AD0     		beq	.L56
 1122              	.LBB135:
 1123              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1124              		.loc 2 195 2
 1125              		.syntax unified
 1126              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1127 004e 4FF05003 			mov r3, #80												
 1128 0052 83F31188 		msr basepri, r3											
 1129 0056 BFF36F8F 		isb														
 1130 005a BFF34F8F 		dsb														
 1131              	
 1132              	@ 0 "" 2
 1133              		.thumb
 1134              		.syntax unified
 1135 005e FB60     		str	r3, [r7, #12]
 1136              		.loc 2 203 1
 1137 0060 00BF     		nop
 1138              	.L57:
 1139              	.LBE136:
 1140              	.LBE135:
 1141              		.loc 1 1264 3 discriminator 3
 1142 0062 FEE7     		b	.L57
 1143              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1144              		.loc 1 1266 3
 1145 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1146              	.LBB137:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1147              		.loc 1 1270 21
 1148 0068 224B     		ldr	r3, .L64+4
 1149 006a 1B68     		ldr	r3, [r3]
 1150 006c 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1151              		.loc 1 1273 18
 1152 006e 7B68     		ldr	r3, [r7, #4]
 1153 0070 1B68     		ldr	r3, [r3]
 1154              		.loc 1 1273 16
 1155 0072 3A68     		ldr	r2, [r7]
 1156 0074 1344     		add	r3, r3, r2
 1157 0076 FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1158              		.loc 1 1275 26
 1159 0078 7B68     		ldr	r3, [r7, #4]
 1160 007a 1B68     		ldr	r3, [r3]
 1161              		.loc 1 1275 6
 1162 007c 3A6A     		ldr	r2, [r7, #32]
 1163 007e 9A42     		cmp	r2, r3
 1164 0080 0BD2     		bcs	.L58
ARM GAS  /tmp/ccfq1u8L.s 			page 47


1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1165              		.loc 1 1282 25
 1166 0082 7B68     		ldr	r3, [r7, #4]
 1167 0084 1B68     		ldr	r3, [r3]
 1168              		.loc 1 1282 7
 1169 0086 FA69     		ldr	r2, [r7, #28]
 1170 0088 9A42     		cmp	r2, r3
 1171 008a 11D2     		bcs	.L59
 1172              		.loc 1 1282 47 discriminator 1
 1173 008c FA69     		ldr	r2, [r7, #28]
 1174 008e 3B6A     		ldr	r3, [r7, #32]
 1175 0090 9A42     		cmp	r2, r3
 1176 0092 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1177              		.loc 1 1284 19
 1178 0094 0123     		movs	r3, #1
 1179 0096 7B62     		str	r3, [r7, #36]
 1180 0098 0AE0     		b	.L59
 1181              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1182              		.loc 1 1296 25
 1183 009a 7B68     		ldr	r3, [r7, #4]
 1184 009c 1B68     		ldr	r3, [r3]
 1185              		.loc 1 1296 7
 1186 009e FA69     		ldr	r2, [r7, #28]
 1187 00a0 9A42     		cmp	r2, r3
 1188 00a2 03D3     		bcc	.L60
 1189              		.loc 1 1296 47 discriminator 1
 1190 00a4 FA69     		ldr	r2, [r7, #28]
 1191 00a6 3B6A     		ldr	r3, [r7, #32]
 1192 00a8 9A42     		cmp	r2, r3
 1193 00aa 01D9     		bls	.L59
 1194              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1195              		.loc 1 1298 19
 1196 00ac 0123     		movs	r3, #1
 1197 00ae 7B62     		str	r3, [r7, #36]
 1198              	.L59:
ARM GAS  /tmp/ccfq1u8L.s 			page 48


1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1199              		.loc 1 1307 24
 1200 00b0 7B68     		ldr	r3, [r7, #4]
 1201 00b2 FA69     		ldr	r2, [r7, #28]
 1202 00b4 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1203              		.loc 1 1309 6
 1204 00b6 7B6A     		ldr	r3, [r7, #36]
 1205 00b8 002B     		cmp	r3, #0
 1206 00ba 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1207              		.loc 1 1315 5
 1208 00bc FA69     		ldr	r2, [r7, #28]
 1209 00be 3B6A     		ldr	r3, [r7, #32]
 1210 00c0 D31A     		subs	r3, r2, r3
 1211 00c2 0021     		movs	r1, #0
 1212 00c4 1846     		mov	r0, r3
 1213 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1214              	.L61:
 1215              	.LBE137:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1216              		.loc 1 1322 21
 1217 00ca FFF7FEFF 		bl	xTaskResumeAll
 1218 00ce B861     		str	r0, [r7, #24]
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1219              		.loc 1 1326 5
 1220 00d0 BB69     		ldr	r3, [r7, #24]
 1221 00d2 002B     		cmp	r3, #0
 1222 00d4 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1223              		.loc 1 1328 4
 1224 00d6 084B     		ldr	r3, .L64+8
 1225 00d8 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccfq1u8L.s 			page 49


 1226 00dc 1A60     		str	r2, [r3]
 1227              		.syntax unified
 1228              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1229 00de BFF34F8F 		dsb
 1230              	@ 0 "" 2
 1231              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1232 00e2 BFF36F8F 		isb
 1233              	@ 0 "" 2
 1234              		.thumb
 1235              		.syntax unified
 1236              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1237              		.loc 1 1334 2
 1238 00e6 00BF     		nop
 1239 00e8 2837     		adds	r7, r7, #40
 1240              	.LCFI28:
 1241              		.cfi_def_cfa_offset 8
 1242 00ea BD46     		mov	sp, r7
 1243              	.LCFI29:
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 00ec 80BD     		pop	{r7, pc}
 1247              	.L65:
 1248 00ee 00BF     		.align	2
 1249              	.L64:
 1250 00f0 00000000 		.word	uxSchedulerSuspended
 1251 00f4 00000000 		.word	xTickCount
 1252 00f8 04ED00E0 		.word	-536810236
 1253              		.cfi_endproc
 1254              	.LFE9:
 1256              		.section	.text.vTaskDelay,"ax",%progbits
 1257              		.align	1
 1258              		.global	vTaskDelay
 1259              		.syntax unified
 1260              		.thumb
 1261              		.thumb_func
 1263              	vTaskDelay:
 1264              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1265              		.loc 1 1342 2
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 16
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269 0000 80B5     		push	{r7, lr}
 1270              	.LCFI30:
ARM GAS  /tmp/ccfq1u8L.s 			page 50


 1271              		.cfi_def_cfa_offset 8
 1272              		.cfi_offset 7, -8
 1273              		.cfi_offset 14, -4
 1274 0002 84B0     		sub	sp, sp, #16
 1275              	.LCFI31:
 1276              		.cfi_def_cfa_offset 24
 1277 0004 00AF     		add	r7, sp, #0
 1278              	.LCFI32:
 1279              		.cfi_def_cfa_register 7
 1280 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1281              		.loc 1 1343 13
 1282 0008 0023     		movs	r3, #0
 1283 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1284              		.loc 1 1346 5
 1285 000c 7B68     		ldr	r3, [r7, #4]
 1286 000e 002B     		cmp	r3, #0
 1287 0010 17D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1288              		.loc 1 1348 4
 1289 0012 134B     		ldr	r3, .L72
 1290 0014 1B68     		ldr	r3, [r3]
 1291 0016 002B     		cmp	r3, #0
 1292 0018 0AD0     		beq	.L68
 1293              	.LBB138:
 1294              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1295              		.loc 2 195 2
 1296              		.syntax unified
 1297              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1298 001a 4FF05003 			mov r3, #80												
 1299 001e 83F31188 		msr basepri, r3											
 1300 0022 BFF36F8F 		isb														
 1301 0026 BFF34F8F 		dsb														
 1302              	
 1303              	@ 0 "" 2
 1304              		.thumb
 1305              		.syntax unified
 1306 002a BB60     		str	r3, [r7, #8]
 1307              		.loc 2 203 1
 1308 002c 00BF     		nop
 1309              	.L69:
 1310              	.LBE139:
 1311              	.LBE138:
 1312              		.loc 1 1348 4 discriminator 1
 1313 002e FEE7     		b	.L69
 1314              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1315              		.loc 1 1349 4
 1316 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 51


1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1317              		.loc 1 1360 5
 1318 0034 0021     		movs	r1, #0
 1319 0036 7868     		ldr	r0, [r7, #4]
 1320 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1321              		.loc 1 1362 22
 1322 003c FFF7FEFF 		bl	xTaskResumeAll
 1323 0040 F860     		str	r0, [r7, #12]
 1324              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1325              		.loc 1 1371 5
 1326 0042 FB68     		ldr	r3, [r7, #12]
 1327 0044 002B     		cmp	r3, #0
 1328 0046 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1329              		.loc 1 1373 4
 1330 0048 064B     		ldr	r3, .L72+4
 1331 004a 4FF08052 		mov	r2, #268435456
 1332 004e 1A60     		str	r2, [r3]
 1333              		.syntax unified
 1334              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1335 0050 BFF34F8F 		dsb
 1336              	@ 0 "" 2
 1337              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1338 0054 BFF36F8F 		isb
 1339              	@ 0 "" 2
 1340              		.thumb
 1341              		.syntax unified
 1342              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1343              		.loc 1 1379 2
 1344 0058 00BF     		nop
 1345 005a 1037     		adds	r7, r7, #16
 1346              	.LCFI33:
ARM GAS  /tmp/ccfq1u8L.s 			page 52


 1347              		.cfi_def_cfa_offset 8
 1348 005c BD46     		mov	sp, r7
 1349              	.LCFI34:
 1350              		.cfi_def_cfa_register 13
 1351              		@ sp needed
 1352 005e 80BD     		pop	{r7, pc}
 1353              	.L73:
 1354              		.align	2
 1355              	.L72:
 1356 0060 00000000 		.word	uxSchedulerSuspended
 1357 0064 04ED00E0 		.word	-536810236
 1358              		.cfi_endproc
 1359              	.LFE10:
 1361              		.section	.text.eTaskGetState,"ax",%progbits
 1362              		.align	1
 1363              		.global	eTaskGetState
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1368              	eTaskGetState:
 1369              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1370              		.loc 1 1387 2
 1371              		.cfi_startproc
 1372              		@ args = 0, pretend = 0, frame = 32
 1373              		@ frame_needed = 1, uses_anonymous_args = 0
 1374 0000 80B5     		push	{r7, lr}
 1375              	.LCFI35:
 1376              		.cfi_def_cfa_offset 8
 1377              		.cfi_offset 7, -8
 1378              		.cfi_offset 14, -4
 1379 0002 88B0     		sub	sp, sp, #32
 1380              	.LCFI36:
 1381              		.cfi_def_cfa_offset 40
 1382 0004 00AF     		add	r7, sp, #0
 1383              	.LCFI37:
 1384              		.cfi_def_cfa_register 7
 1385 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1386              		.loc 1 1390 22
 1387 0008 7B68     		ldr	r3, [r7, #4]
 1388 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1389              		.loc 1 1392 3
 1390 000c BB69     		ldr	r3, [r7, #24]
 1391 000e 002B     		cmp	r3, #0
 1392 0010 0AD1     		bne	.L75
ARM GAS  /tmp/ccfq1u8L.s 			page 53


 1393              	.LBB140:
 1394              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1395              		.loc 2 195 2
 1396              		.syntax unified
 1397              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1398 0012 4FF05003 			mov r3, #80												
 1399 0016 83F31188 		msr basepri, r3											
 1400 001a BFF36F8F 		isb														
 1401 001e BFF34F8F 		dsb														
 1402              	
 1403              	@ 0 "" 2
 1404              		.thumb
 1405              		.syntax unified
 1406 0022 BB60     		str	r3, [r7, #8]
 1407              		.loc 2 203 1
 1408 0024 00BF     		nop
 1409              	.L76:
 1410              	.LBE141:
 1411              	.LBE140:
 1412              		.loc 1 1392 3 discriminator 1
 1413 0026 FEE7     		b	.L76
 1414              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1415              		.loc 1 1394 13
 1416 0028 234B     		ldr	r3, .L87
 1417 002a 1B68     		ldr	r3, [r3]
 1418              		.loc 1 1394 5
 1419 002c BA69     		ldr	r2, [r7, #24]
 1420 002e 9A42     		cmp	r2, r3
 1421 0030 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1422              		.loc 1 1397 12
 1423 0032 0023     		movs	r3, #0
 1424 0034 FB77     		strb	r3, [r7, #31]
 1425 0036 3AE0     		b	.L78
 1426              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1427              		.loc 1 1401 4
 1428 0038 FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1429              		.loc 1 1403 17
 1430 003c BB69     		ldr	r3, [r7, #24]
 1431 003e 5B69     		ldr	r3, [r3, #20]
 1432 0040 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1433              		.loc 1 1404 19
 1434 0042 1E4B     		ldr	r3, .L87+4
 1435 0044 1B68     		ldr	r3, [r3]
 1436 0046 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccfq1u8L.s 			page 54


1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1437              		.loc 1 1405 29
 1438 0048 1D4B     		ldr	r3, .L87+8
 1439 004a 1B68     		ldr	r3, [r3]
 1440 004c FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1441              		.loc 1 1407 4
 1442 004e FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1443              		.loc 1 1409 6
 1444 0052 7A69     		ldr	r2, [r7, #20]
 1445 0054 3B69     		ldr	r3, [r7, #16]
 1446 0056 9A42     		cmp	r2, r3
 1447 0058 03D0     		beq	.L79
 1448              		.loc 1 1409 41 discriminator 1
 1449 005a 7A69     		ldr	r2, [r7, #20]
 1450 005c FB68     		ldr	r3, [r7, #12]
 1451 005e 9A42     		cmp	r2, r3
 1452 0060 02D1     		bne	.L80
 1453              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1454              		.loc 1 1413 13
 1455 0062 0223     		movs	r3, #2
 1456 0064 FB77     		strb	r3, [r7, #31]
 1457 0066 22E0     		b	.L78
 1458              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1459              		.loc 1 1417 12
 1460 0068 7B69     		ldr	r3, [r7, #20]
 1461 006a 164A     		ldr	r2, .L87+12
 1462 006c 9342     		cmp	r3, r2
 1463 006e 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1464              		.loc 1 1422 10
 1465 0070 BB69     		ldr	r3, [r7, #24]
 1466 0072 9B6A     		ldr	r3, [r3, #40]
 1467              		.loc 1 1422 8
 1468 0074 002B     		cmp	r3, #0
 1469 0076 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
ARM GAS  /tmp/ccfq1u8L.s 			page 55


1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1470              		.loc 1 1430 17
 1471 0078 BB69     		ldr	r3, [r7, #24]
 1472 007a 93F88434 		ldrb	r3, [r3, #1156]
 1473 007e DBB2     		uxtb	r3, r3
 1474              		.loc 1 1430 10
 1475 0080 012B     		cmp	r3, #1
 1476 0082 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1477              		.loc 1 1432 17
 1478 0084 0223     		movs	r3, #2
 1479 0086 FB77     		strb	r3, [r7, #31]
 1480 0088 11E0     		b	.L78
 1481              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1482              		.loc 1 1436 17
 1483 008a 0323     		movs	r3, #3
 1484 008c FB77     		strb	r3, [r7, #31]
 1485 008e 0EE0     		b	.L78
 1486              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1487              		.loc 1 1447 15
 1488 0090 0223     		movs	r3, #2
 1489 0092 FB77     		strb	r3, [r7, #31]
 1490 0094 0BE0     		b	.L78
 1491              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1492              		.loc 1 1453 12
 1493 0096 7B69     		ldr	r3, [r7, #20]
 1494 0098 0B4A     		ldr	r2, .L87+16
 1495 009a 9342     		cmp	r3, r2
 1496 009c 02D0     		beq	.L84
 1497              		.loc 1 1453 59 discriminator 1
 1498 009e 7B69     		ldr	r3, [r7, #20]
 1499 00a0 002B     		cmp	r3, #0
 1500 00a2 02D1     		bne	.L85
 1501              	.L84:
ARM GAS  /tmp/ccfq1u8L.s 			page 56


1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1502              		.loc 1 1458 14
 1503 00a4 0423     		movs	r3, #4
 1504 00a6 FB77     		strb	r3, [r7, #31]
 1505 00a8 01E0     		b	.L78
 1506              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1507              		.loc 1 1466 13
 1508 00aa 0123     		movs	r3, #1
 1509 00ac FB77     		strb	r3, [r7, #31]
 1510              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1511              		.loc 1 1470 10
 1512 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1513              		.loc 1 1471 2
 1514 00b0 1846     		mov	r0, r3
 1515 00b2 2037     		adds	r7, r7, #32
 1516              	.LCFI38:
 1517              		.cfi_def_cfa_offset 8
 1518 00b4 BD46     		mov	sp, r7
 1519              	.LCFI39:
 1520              		.cfi_def_cfa_register 13
 1521              		@ sp needed
 1522 00b6 80BD     		pop	{r7, pc}
 1523              	.L88:
 1524              		.align	2
 1525              	.L87:
 1526 00b8 00000000 		.word	pxCurrentTCB
 1527 00bc 00000000 		.word	pxDelayedTaskList
 1528 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1529 00c4 00000000 		.word	xSuspendedTaskList
 1530 00c8 00000000 		.word	xTasksWaitingTermination
 1531              		.cfi_endproc
 1532              	.LFE11:
 1534              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1535              		.align	1
 1536              		.global	uxTaskPriorityGet
 1537              		.syntax unified
 1538              		.thumb
 1539              		.thumb_func
 1541              	uxTaskPriorityGet:
 1542              	.LFB12:
ARM GAS  /tmp/ccfq1u8L.s 			page 57


1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1543              		.loc 1 1479 2
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 16
 1546              		@ frame_needed = 1, uses_anonymous_args = 0
 1547 0000 80B5     		push	{r7, lr}
 1548              	.LCFI40:
 1549              		.cfi_def_cfa_offset 8
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 84B0     		sub	sp, sp, #16
 1553              	.LCFI41:
 1554              		.cfi_def_cfa_offset 24
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI42:
 1557              		.cfi_def_cfa_register 7
 1558 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1559              		.loc 1 1483 3
 1560 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1561              		.loc 1 1487 12
 1562 000c 7B68     		ldr	r3, [r7, #4]
 1563 000e 002B     		cmp	r3, #0
 1564 0010 02D1     		bne	.L90
 1565              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1566 0012 074B     		ldr	r3, .L93
 1567 0014 1B68     		ldr	r3, [r3]
 1568 0016 00E0     		b	.L91
 1569              	.L90:
 1570              		.loc 1 1487 12 discriminator 2
 1571 0018 7B68     		ldr	r3, [r7, #4]
 1572              	.L91:
 1573              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1574 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1575              		.loc 1 1488 13 discriminator 4
 1576 001c FB68     		ldr	r3, [r7, #12]
 1577 001e DB6A     		ldr	r3, [r3, #44]
 1578 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1579              		.loc 1 1490 3 discriminator 4
 1580 0022 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccfq1u8L.s 			page 58


1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1581              		.loc 1 1492 10 discriminator 4
 1582 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1583              		.loc 1 1493 2 discriminator 4
 1584 0028 1846     		mov	r0, r3
 1585 002a 1037     		adds	r7, r7, #16
 1586              	.LCFI43:
 1587              		.cfi_def_cfa_offset 8
 1588 002c BD46     		mov	sp, r7
 1589              	.LCFI44:
 1590              		.cfi_def_cfa_register 13
 1591              		@ sp needed
 1592 002e 80BD     		pop	{r7, pc}
 1593              	.L94:
 1594              		.align	2
 1595              	.L93:
 1596 0030 00000000 		.word	pxCurrentTCB
 1597              		.cfi_endproc
 1598              	.LFE12:
 1600              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1601              		.align	1
 1602              		.global	uxTaskPriorityGetFromISR
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1607              	uxTaskPriorityGetFromISR:
 1608              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1609              		.loc 1 1501 2
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 32
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613 0000 80B5     		push	{r7, lr}
 1614              	.LCFI45:
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 7, -8
 1617              		.cfi_offset 14, -4
 1618 0002 88B0     		sub	sp, sp, #32
 1619              	.LCFI46:
 1620              		.cfi_def_cfa_offset 40
 1621 0004 00AF     		add	r7, sp, #0
 1622              	.LCFI47:
 1623              		.cfi_def_cfa_register 7
 1624 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
ARM GAS  /tmp/ccfq1u8L.s 			page 59


1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1625              		.loc 1 1521 3
 1626 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1627              	.LBB142:
 1628              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1629              		.loc 2 211 2
 1630              		.syntax unified
 1631              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1632 000c EFF31182 			mrs r2, basepri											
 1633 0010 4FF05003 		mov r3, #80												
 1634 0014 83F31188 		msr basepri, r3											
 1635 0018 BFF36F8F 		isb														
 1636 001c BFF34F8F 		dsb														
 1637              	
 1638              	@ 0 "" 2
 1639              		.thumb
 1640              		.syntax unified
 1641 0020 3A61     		str	r2, [r7, #16]
 1642 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1643              		.loc 2 223 9
 1644 0024 3B69     		ldr	r3, [r7, #16]
 1645              	.LBE143:
ARM GAS  /tmp/ccfq1u8L.s 			page 60


 1646              	.LBE142:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1647              		.loc 1 1523 27
 1648 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1649              		.loc 1 1527 12
 1650 0028 7B68     		ldr	r3, [r7, #4]
 1651 002a 002B     		cmp	r3, #0
 1652 002c 02D1     		bne	.L97
 1653              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1654 002e 094B     		ldr	r3, .L100
 1655 0030 1B68     		ldr	r3, [r3]
 1656 0032 00E0     		b	.L98
 1657              	.L97:
 1658              		.loc 1 1527 12 discriminator 2
 1659 0034 7B68     		ldr	r3, [r7, #4]
 1660              	.L98:
 1661              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1662 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1663              		.loc 1 1528 13 discriminator 4
 1664 0038 BB69     		ldr	r3, [r7, #24]
 1665 003a DB6A     		ldr	r3, [r3, #44]
 1666 003c 7B61     		str	r3, [r7, #20]
 1667 003e FB69     		ldr	r3, [r7, #28]
 1668 0040 BB60     		str	r3, [r7, #8]
 1669              	.LBB144:
 1670              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1671              		.loc 2 229 2 discriminator 4
 1672 0042 BB68     		ldr	r3, [r7, #8]
 1673              		.syntax unified
 1674              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1675 0044 83F31188 			msr basepri, r3	
 1676              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1677              		.loc 2 233 1 discriminator 4
 1678              		.thumb
 1679              		.syntax unified
 1680 0048 00BF     		nop
 1681              	.LBE145:
 1682              	.LBE144:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 61


1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1683              		.loc 1 1532 10 discriminator 4
 1684 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1685              		.loc 1 1533 2 discriminator 4
 1686 004c 1846     		mov	r0, r3
 1687 004e 2037     		adds	r7, r7, #32
 1688              	.LCFI48:
 1689              		.cfi_def_cfa_offset 8
 1690 0050 BD46     		mov	sp, r7
 1691              	.LCFI49:
 1692              		.cfi_def_cfa_register 13
 1693              		@ sp needed
 1694 0052 80BD     		pop	{r7, pc}
 1695              	.L101:
 1696              		.align	2
 1697              	.L100:
 1698 0054 00000000 		.word	pxCurrentTCB
 1699              		.cfi_endproc
 1700              	.LFE13:
 1702              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1703              		.align	1
 1704              		.global	vTaskPrioritySet
 1705              		.syntax unified
 1706              		.thumb
 1707              		.thumb_func
 1709              	vTaskPrioritySet:
 1710              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1711              		.loc 1 1541 2
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 32
 1714              		@ frame_needed = 1, uses_anonymous_args = 0
 1715 0000 80B5     		push	{r7, lr}
 1716              	.LCFI50:
 1717              		.cfi_def_cfa_offset 8
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720 0002 88B0     		sub	sp, sp, #32
 1721              	.LCFI51:
 1722              		.cfi_def_cfa_offset 40
 1723 0004 00AF     		add	r7, sp, #0
 1724              	.LCFI52:
 1725              		.cfi_def_cfa_register 7
 1726 0006 7860     		str	r0, [r7, #4]
 1727 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1728              		.loc 1 1544 13
ARM GAS  /tmp/ccfq1u8L.s 			page 62


 1729 000a 0023     		movs	r3, #0
 1730 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1731              		.loc 1 1546 3
 1732 000e 3B68     		ldr	r3, [r7]
 1733 0010 372B     		cmp	r3, #55
 1734 0012 0AD9     		bls	.L103
 1735              	.LBB146:
 1736              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1737              		.loc 2 195 2
 1738              		.syntax unified
 1739              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1740 0014 4FF05003 			mov r3, #80												
 1741 0018 83F31188 		msr basepri, r3											
 1742 001c BFF36F8F 		isb														
 1743 0020 BFF34F8F 		dsb														
 1744              	
 1745              	@ 0 "" 2
 1746              		.thumb
 1747              		.syntax unified
 1748 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1749              		.loc 2 203 1
 1750 0026 00BF     		nop
 1751              	.L104:
 1752              	.LBE147:
 1753              	.LBE146:
 1754              		.loc 1 1546 3 discriminator 1
 1755 0028 FEE7     		b	.L104
 1756              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1757              		.loc 1 1549 5
 1758 002a 3B68     		ldr	r3, [r7]
 1759 002c 372B     		cmp	r3, #55
 1760 002e 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1761              		.loc 1 1551 18
 1762 0030 3723     		movs	r3, #55
 1763 0032 3B60     		str	r3, [r7]
 1764              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1765              		.loc 1 1558 3
 1766 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
ARM GAS  /tmp/ccfq1u8L.s 			page 63


1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1767              		.loc 1 1562 12
 1768 0038 7B68     		ldr	r3, [r7, #4]
 1769 003a 002B     		cmp	r3, #0
 1770 003c 02D1     		bne	.L106
 1771              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1772 003e 3B4B     		ldr	r3, .L115
 1773 0040 1B68     		ldr	r3, [r3]
 1774 0042 00E0     		b	.L107
 1775              	.L106:
 1776              		.loc 1 1562 12 discriminator 2
 1777 0044 7B68     		ldr	r3, [r7, #4]
 1778              	.L107:
 1779              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1780 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1781              		.loc 1 1568 27 discriminator 4
 1782 0048 BB69     		ldr	r3, [r7, #24]
 1783 004a DB6C     		ldr	r3, [r3, #76]
 1784 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1785              		.loc 1 1576 6 discriminator 4
 1786 004e 7A69     		ldr	r2, [r7, #20]
 1787 0050 3B68     		ldr	r3, [r7]
 1788 0052 9A42     		cmp	r2, r3
 1789 0054 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1790              		.loc 1 1580 7
 1791 0056 3A68     		ldr	r2, [r7]
 1792 0058 7B69     		ldr	r3, [r7, #20]
 1793 005a 9A42     		cmp	r2, r3
 1794 005c 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1795              		.loc 1 1582 16
 1796 005e 334B     		ldr	r3, .L115
 1797 0060 1B68     		ldr	r3, [r3]
 1798              		.loc 1 1582 8
 1799 0062 BA69     		ldr	r2, [r7, #24]
 1800 0064 9A42     		cmp	r2, r3
 1801 0066 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccfq1u8L.s 			page 64


1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1802              		.loc 1 1587 40
 1803 0068 304B     		ldr	r3, .L115
 1804 006a 1B68     		ldr	r3, [r3]
 1805 006c DB6A     		ldr	r3, [r3, #44]
 1806              		.loc 1 1587 9
 1807 006e 3A68     		ldr	r2, [r7]
 1808 0070 9A42     		cmp	r2, r3
 1809 0072 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1810              		.loc 1 1589 23
 1811 0074 0123     		movs	r3, #1
 1812 0076 FB61     		str	r3, [r7, #28]
 1813 0078 06E0     		b	.L110
 1814              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1815              		.loc 1 1603 20
 1816 007a 2C4B     		ldr	r3, .L115
 1817 007c 1B68     		ldr	r3, [r3]
 1818              		.loc 1 1603 12
 1819 007e BA69     		ldr	r2, [r7, #24]
 1820 0080 9A42     		cmp	r2, r3
 1821 0082 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1822              		.loc 1 1608 21
 1823 0084 0123     		movs	r3, #1
 1824 0086 FB61     		str	r3, [r7, #28]
 1825              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 65


1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1826              		.loc 1 1620 27
 1827 0088 BB69     		ldr	r3, [r7, #24]
 1828 008a DB6A     		ldr	r3, [r3, #44]
 1829 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1830              		.loc 1 1626 15
 1831 008e BB69     		ldr	r3, [r7, #24]
 1832 0090 DA6C     		ldr	r2, [r3, #76]
 1833              		.loc 1 1626 40
 1834 0092 BB69     		ldr	r3, [r7, #24]
 1835 0094 DB6A     		ldr	r3, [r3, #44]
 1836              		.loc 1 1626 8
 1837 0096 9A42     		cmp	r2, r3
 1838 0098 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1839              		.loc 1 1628 25
 1840 009a BB69     		ldr	r3, [r7, #24]
 1841 009c 3A68     		ldr	r2, [r7]
 1842 009e DA62     		str	r2, [r3, #44]
 1843              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1844              		.loc 1 1636 28
 1845 00a0 BB69     		ldr	r3, [r7, #24]
 1846 00a2 3A68     		ldr	r2, [r7]
 1847 00a4 DA64     		str	r2, [r3, #76]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1848              		.loc 1 1646 11
 1849 00a6 BB69     		ldr	r3, [r7, #24]
 1850 00a8 9B69     		ldr	r3, [r3, #24]
 1851              		.loc 1 1646 7
 1852 00aa 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 66


 1853 00ac 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1854              		.loc 1 1648 6
 1855 00ae 3B68     		ldr	r3, [r7]
 1856 00b0 C3F13802 		rsb	r2, r3, #56
 1857 00b4 BB69     		ldr	r3, [r7, #24]
 1858 00b6 9A61     		str	r2, [r3, #24]
 1859              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1860              		.loc 1 1659 9
 1861 00b8 BB69     		ldr	r3, [r7, #24]
 1862 00ba 5969     		ldr	r1, [r3, #20]
 1863 00bc 3A69     		ldr	r2, [r7, #16]
 1864 00be 1346     		mov	r3, r2
 1865 00c0 9B00     		lsls	r3, r3, #2
 1866 00c2 1344     		add	r3, r3, r2
 1867 00c4 9B00     		lsls	r3, r3, #2
 1868 00c6 1A4A     		ldr	r2, .L115+4
 1869 00c8 1344     		add	r3, r3, r2
 1870              		.loc 1 1659 7
 1871 00ca 9942     		cmp	r1, r3
 1872 00cc 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1873              		.loc 1 1664 10
 1874 00ce BB69     		ldr	r3, [r7, #24]
 1875 00d0 0433     		adds	r3, r3, #4
 1876 00d2 1846     		mov	r0, r3
 1877 00d4 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1878              		.loc 1 1675 6
 1879 00d8 BB69     		ldr	r3, [r7, #24]
 1880 00da DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccfq1u8L.s 			page 67


 1881 00dc 154B     		ldr	r3, .L115+8
 1882 00de 1B68     		ldr	r3, [r3]
 1883 00e0 9A42     		cmp	r2, r3
 1884 00e2 03D9     		bls	.L114
 1885              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1886 00e4 BB69     		ldr	r3, [r7, #24]
 1887 00e6 DB6A     		ldr	r3, [r3, #44]
 1888 00e8 124A     		ldr	r2, .L115+8
 1889 00ea 1360     		str	r3, [r2]
 1890              	.L114:
 1891              		.loc 1 1675 6 discriminator 3
 1892 00ec BB69     		ldr	r3, [r7, #24]
 1893 00ee DA6A     		ldr	r2, [r3, #44]
 1894 00f0 1346     		mov	r3, r2
 1895 00f2 9B00     		lsls	r3, r3, #2
 1896 00f4 1344     		add	r3, r3, r2
 1897 00f6 9B00     		lsls	r3, r3, #2
 1898 00f8 0D4A     		ldr	r2, .L115+4
 1899 00fa 1A44     		add	r2, r2, r3
 1900 00fc BB69     		ldr	r3, [r7, #24]
 1901 00fe 0433     		adds	r3, r3, #4
 1902 0100 1946     		mov	r1, r3
 1903 0102 1046     		mov	r0, r2
 1904 0104 FFF7FEFF 		bl	vListInsertEnd
 1905              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1906              		.loc 1 1682 7 is_stmt 1
 1907 0108 FB69     		ldr	r3, [r7, #28]
 1908 010a 002B     		cmp	r3, #0
 1909 010c 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1910              		.loc 1 1684 6
 1911 010e 0A4B     		ldr	r3, .L115+12
 1912 0110 4FF08052 		mov	r2, #268435456
 1913 0114 1A60     		str	r2, [r3]
 1914              		.syntax unified
 1915              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1916 0116 BFF34F8F 		dsb
 1917              	@ 0 "" 2
 1918              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1919 011a BFF36F8F 		isb
 1920              	@ 0 "" 2
 1921              		.thumb
 1922              		.syntax unified
 1923              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccfq1u8L.s 			page 68


1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1924              		.loc 1 1696 3
 1925 011e FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1926              		.loc 1 1697 2
 1927 0122 00BF     		nop
 1928 0124 2037     		adds	r7, r7, #32
 1929              	.LCFI53:
 1930              		.cfi_def_cfa_offset 8
 1931 0126 BD46     		mov	sp, r7
 1932              	.LCFI54:
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 0128 80BD     		pop	{r7, pc}
 1936              	.L116:
 1937 012a 00BF     		.align	2
 1938              	.L115:
 1939 012c 00000000 		.word	pxCurrentTCB
 1940 0130 00000000 		.word	pxReadyTasksLists
 1941 0134 00000000 		.word	uxTopReadyPriority
 1942 0138 04ED00E0 		.word	-536810236
 1943              		.cfi_endproc
 1944              	.LFE14:
 1946              		.section	.text.vTaskSuspend,"ax",%progbits
 1947              		.align	1
 1948              		.global	vTaskSuspend
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1953              	vTaskSuspend:
 1954              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1955              		.loc 1 1705 2
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 16
 1958              		@ frame_needed = 1, uses_anonymous_args = 0
 1959 0000 80B5     		push	{r7, lr}
 1960              	.LCFI55:
 1961              		.cfi_def_cfa_offset 8
 1962              		.cfi_offset 7, -8
 1963              		.cfi_offset 14, -4
 1964 0002 84B0     		sub	sp, sp, #16
 1965              	.LCFI56:
 1966              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccfq1u8L.s 			page 69


 1967 0004 00AF     		add	r7, sp, #0
 1968              	.LCFI57:
 1969              		.cfi_def_cfa_register 7
 1970 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1971              		.loc 1 1708 3
 1972 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1973              		.loc 1 1712 12
 1974 000c 7B68     		ldr	r3, [r7, #4]
 1975 000e 002B     		cmp	r3, #0
 1976 0010 02D1     		bne	.L118
 1977              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1978 0012 304B     		ldr	r3, .L129
 1979 0014 1B68     		ldr	r3, [r3]
 1980 0016 00E0     		b	.L119
 1981              	.L118:
 1982              		.loc 1 1712 12 discriminator 2
 1983 0018 7B68     		ldr	r3, [r7, #4]
 1984              	.L119:
 1985              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1986 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1987              		.loc 1 1718 8 discriminator 4
 1988 001c FB68     		ldr	r3, [r7, #12]
 1989 001e 0433     		adds	r3, r3, #4
 1990 0020 1846     		mov	r0, r3
 1991 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1992              		.loc 1 1728 8 discriminator 4
 1993 0026 FB68     		ldr	r3, [r7, #12]
 1994 0028 9B6A     		ldr	r3, [r3, #40]
 1995              		.loc 1 1728 6 discriminator 4
 1996 002a 002B     		cmp	r3, #0
 1997 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1998              		.loc 1 1730 14
ARM GAS  /tmp/ccfq1u8L.s 			page 70


 1999 002e FB68     		ldr	r3, [r7, #12]
 2000 0030 1833     		adds	r3, r3, #24
 2001 0032 1846     		mov	r0, r3
 2002 0034 FFF7FEFF 		bl	uxListRemove
 2003              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 2004              		.loc 1 1737 4
 2005 0038 FB68     		ldr	r3, [r7, #12]
 2006 003a 0433     		adds	r3, r3, #4
 2007 003c 1946     		mov	r1, r3
 2008 003e 2648     		ldr	r0, .L129+4
 2009 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 2010              		.loc 1 1741 14
 2011 0044 FB68     		ldr	r3, [r7, #12]
 2012 0046 93F88434 		ldrb	r3, [r3, #1156]
 2013 004a DBB2     		uxtb	r3, r3
 2014              		.loc 1 1741 7
 2015 004c 012B     		cmp	r3, #1
 2016 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2017              		.loc 1 1745 27
 2018 0050 FB68     		ldr	r3, [r7, #12]
 2019 0052 0022     		movs	r2, #0
 2020 0054 83F88424 		strb	r2, [r3, #1156]
 2021              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2022              		.loc 1 1750 3
 2023 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 2024              		.loc 1 1752 25
 2025 005c 1F4B     		ldr	r3, .L129+8
 2026 005e 1B68     		ldr	r3, [r3]
 2027              		.loc 1 1752 5
 2028 0060 002B     		cmp	r3, #0
 2029 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccfq1u8L.s 			page 71


 2030              		.loc 1 1756 4
 2031 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 2032              		.loc 1 1758 5
 2033 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2034              		.loc 1 1760 4
 2035 006c FFF7FEFF 		bl	vPortExitCritical
 2036              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2037              		.loc 1 1767 13
 2038 0070 184B     		ldr	r3, .L129
 2039 0072 1B68     		ldr	r3, [r3]
 2040              		.loc 1 1767 5
 2041 0074 FA68     		ldr	r2, [r7, #12]
 2042 0076 9A42     		cmp	r2, r3
 2043 0078 27D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2044              		.loc 1 1769 26
 2045 007a 184B     		ldr	r3, .L129+8
 2046 007c 1B68     		ldr	r3, [r3]
 2047              		.loc 1 1769 6
 2048 007e 002B     		cmp	r3, #0
 2049 0080 17D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2050              		.loc 1 1772 5
 2051 0082 174B     		ldr	r3, .L129+12
 2052 0084 1B68     		ldr	r3, [r3]
 2053 0086 002B     		cmp	r3, #0
 2054 0088 0AD0     		beq	.L125
 2055              	.LBB148:
 2056              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2057              		.loc 2 195 2
 2058              		.syntax unified
 2059              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2060 008a 4FF05003 			mov r3, #80												
 2061 008e 83F31188 		msr basepri, r3											
 2062 0092 BFF36F8F 		isb														
 2063 0096 BFF34F8F 		dsb														
 2064              	
 2065              	@ 0 "" 2
 2066              		.thumb
 2067              		.syntax unified
 2068 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 72


 2069              		.loc 2 203 1
 2070 009c 00BF     		nop
 2071              	.L126:
 2072              	.LBE149:
 2073              	.LBE148:
 2074              		.loc 1 1772 5 discriminator 1
 2075 009e FEE7     		b	.L126
 2076              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2077              		.loc 1 1773 5
 2078 00a0 104B     		ldr	r3, .L129+16
 2079 00a2 4FF08052 		mov	r2, #268435456
 2080 00a6 1A60     		str	r2, [r3]
 2081              		.syntax unified
 2082              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2083 00a8 BFF34F8F 		dsb
 2084              	@ 0 "" 2
 2085              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2086 00ac BFF36F8F 		isb
 2087              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2088              		.loc 1 1798 2
 2089              		.thumb
 2090              		.syntax unified
 2091 00b0 0BE0     		b	.L128
 2092              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2093              		.loc 1 1780 9
 2094 00b2 094B     		ldr	r3, .L129+4
 2095 00b4 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2096              		.loc 1 1780 56
 2097 00b6 0C4B     		ldr	r3, .L129+20
ARM GAS  /tmp/ccfq1u8L.s 			page 73


 2098 00b8 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2099              		.loc 1 1780 7
 2100 00ba 9A42     		cmp	r2, r3
 2101 00bc 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2102              		.loc 1 1786 19
 2103 00be 054B     		ldr	r3, .L129
 2104 00c0 0022     		movs	r2, #0
 2105 00c2 1A60     		str	r2, [r3]
 2106              		.loc 1 1798 2
 2107 00c4 01E0     		b	.L128
 2108              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2109              		.loc 1 1790 6
 2110 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2111              	.L128:
 2112              		.loc 1 1798 2
 2113 00ca 00BF     		nop
 2114 00cc 1037     		adds	r7, r7, #16
 2115              	.LCFI58:
 2116              		.cfi_def_cfa_offset 8
 2117 00ce BD46     		mov	sp, r7
 2118              	.LCFI59:
 2119              		.cfi_def_cfa_register 13
 2120              		@ sp needed
 2121 00d0 80BD     		pop	{r7, pc}
 2122              	.L130:
 2123 00d2 00BF     		.align	2
 2124              	.L129:
 2125 00d4 00000000 		.word	pxCurrentTCB
 2126 00d8 00000000 		.word	xSuspendedTaskList
 2127 00dc 00000000 		.word	xSchedulerRunning
 2128 00e0 00000000 		.word	uxSchedulerSuspended
 2129 00e4 04ED00E0 		.word	-536810236
 2130 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2131              		.cfi_endproc
 2132              	.LFE15:
 2134              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2135              		.align	1
 2136              		.syntax unified
 2137              		.thumb
 2138              		.thumb_func
 2140              	prvTaskIsTaskSuspended:
 2141              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2142              		.loc 1 1806 2
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 24
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccfq1u8L.s 			page 74


 2146              		@ link register save eliminated.
 2147 0000 80B4     		push	{r7}
 2148              	.LCFI60:
 2149              		.cfi_def_cfa_offset 4
 2150              		.cfi_offset 7, -4
 2151 0002 87B0     		sub	sp, sp, #28
 2152              	.LCFI61:
 2153              		.cfi_def_cfa_offset 32
 2154 0004 00AF     		add	r7, sp, #0
 2155              	.LCFI62:
 2156              		.cfi_def_cfa_register 7
 2157 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2158              		.loc 1 1807 13
 2159 0008 0023     		movs	r3, #0
 2160 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2161              		.loc 1 1808 22
 2162 000c 7B68     		ldr	r3, [r7, #4]
 2163 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2164              		.loc 1 1814 3
 2165 0010 7B68     		ldr	r3, [r7, #4]
 2166 0012 002B     		cmp	r3, #0
 2167 0014 0AD1     		bne	.L132
 2168              	.LBB150:
 2169              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2170              		.loc 2 195 2
 2171              		.syntax unified
 2172              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2173 0016 4FF05003 			mov r3, #80												
 2174 001a 83F31188 		msr basepri, r3											
 2175 001e BFF36F8F 		isb														
 2176 0022 BFF34F8F 		dsb														
 2177              	
 2178              	@ 0 "" 2
 2179              		.thumb
 2180              		.syntax unified
 2181 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2182              		.loc 2 203 1
 2183 0028 00BF     		nop
 2184              	.L133:
 2185              	.LBE151:
 2186              	.LBE150:
 2187              		.loc 1 1814 3 discriminator 1
 2188 002a FEE7     		b	.L133
 2189              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
ARM GAS  /tmp/ccfq1u8L.s 			page 75


 2190              		.loc 1 1817 7
 2191 002c 3B69     		ldr	r3, [r7, #16]
 2192 002e 5B69     		ldr	r3, [r3, #20]
 2193              		.loc 1 1817 5
 2194 0030 0A4A     		ldr	r2, .L136
 2195 0032 9342     		cmp	r3, r2
 2196 0034 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2197              		.loc 1 1820 8
 2198 0036 3B69     		ldr	r3, [r7, #16]
 2199 0038 9B6A     		ldr	r3, [r3, #40]
 2200              		.loc 1 1820 6
 2201 003a 094A     		ldr	r2, .L136+4
 2202 003c 9342     		cmp	r3, r2
 2203 003e 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2204              		.loc 1 1824 9
 2205 0040 3B69     		ldr	r3, [r7, #16]
 2206 0042 9B6A     		ldr	r3, [r3, #40]
 2207              		.loc 1 1824 7
 2208 0044 002B     		cmp	r3, #0
 2209 0046 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2210              		.loc 1 1826 14
 2211 0048 0123     		movs	r3, #1
 2212 004a 7B61     		str	r3, [r7, #20]
 2213              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2214              		.loc 1 1843 10
 2215 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2216              		.loc 1 1844 2
 2217 004e 1846     		mov	r0, r3
 2218 0050 1C37     		adds	r7, r7, #28
 2219              	.LCFI63:
ARM GAS  /tmp/ccfq1u8L.s 			page 76


 2220              		.cfi_def_cfa_offset 4
 2221 0052 BD46     		mov	sp, r7
 2222              	.LCFI64:
 2223              		.cfi_def_cfa_register 13
 2224              		@ sp needed
 2225 0054 5DF8047B 		ldr	r7, [sp], #4
 2226              	.LCFI65:
 2227              		.cfi_restore 7
 2228              		.cfi_def_cfa_offset 0
 2229 0058 7047     		bx	lr
 2230              	.L137:
 2231 005a 00BF     		.align	2
 2232              	.L136:
 2233 005c 00000000 		.word	xSuspendedTaskList
 2234 0060 00000000 		.word	xPendingReadyList
 2235              		.cfi_endproc
 2236              	.LFE16:
 2238              		.section	.text.vTaskResume,"ax",%progbits
 2239              		.align	1
 2240              		.global	vTaskResume
 2241              		.syntax unified
 2242              		.thumb
 2243              		.thumb_func
 2245              	vTaskResume:
 2246              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2247              		.loc 1 1852 2
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 16
 2250              		@ frame_needed = 1, uses_anonymous_args = 0
 2251 0000 80B5     		push	{r7, lr}
 2252              	.LCFI66:
 2253              		.cfi_def_cfa_offset 8
 2254              		.cfi_offset 7, -8
 2255              		.cfi_offset 14, -4
 2256 0002 84B0     		sub	sp, sp, #16
 2257              	.LCFI67:
 2258              		.cfi_def_cfa_offset 24
 2259 0004 00AF     		add	r7, sp, #0
 2260              	.LCFI68:
 2261              		.cfi_def_cfa_register 7
 2262 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2263              		.loc 1 1853 16
 2264 0008 7B68     		ldr	r3, [r7, #4]
 2265 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2266              		.loc 1 1856 3
ARM GAS  /tmp/ccfq1u8L.s 			page 77


 2267 000c 7B68     		ldr	r3, [r7, #4]
 2268 000e 002B     		cmp	r3, #0
 2269 0010 0AD1     		bne	.L139
 2270              	.LBB152:
 2271              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2272              		.loc 2 195 2
 2273              		.syntax unified
 2274              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2275 0012 4FF05003 			mov r3, #80												
 2276 0016 83F31188 		msr basepri, r3											
 2277 001a BFF36F8F 		isb														
 2278 001e BFF34F8F 		dsb														
 2279              	
 2280              	@ 0 "" 2
 2281              		.thumb
 2282              		.syntax unified
 2283 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2284              		.loc 2 203 1
 2285 0024 00BF     		nop
 2286              	.L140:
 2287              	.LBE153:
 2288              	.LBE152:
 2289              		.loc 1 1856 3 discriminator 1
 2290 0026 FEE7     		b	.L140
 2291              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2292              		.loc 1 1860 15
 2293 0028 204B     		ldr	r3, .L145
 2294 002a 1B68     		ldr	r3, [r3]
 2295              		.loc 1 1860 5
 2296 002c FA68     		ldr	r2, [r7, #12]
 2297 002e 9A42     		cmp	r2, r3
 2298 0030 38D0     		beq	.L144
 2299              		.loc 1 1860 33 discriminator 1
 2300 0032 FB68     		ldr	r3, [r7, #12]
 2301 0034 002B     		cmp	r3, #0
 2302 0036 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2303              		.loc 1 1862 4
 2304 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2305              		.loc 1 1864 9
 2306 003c F868     		ldr	r0, [r7, #12]
 2307 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2308 0042 0346     		mov	r3, r0
 2309              		.loc 1 1864 7
 2310 0044 002B     		cmp	r3, #0
 2311 0046 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
ARM GAS  /tmp/ccfq1u8L.s 			page 78


1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2312              		.loc 1 1870 15
 2313 0048 FB68     		ldr	r3, [r7, #12]
 2314 004a 0433     		adds	r3, r3, #4
 2315 004c 1846     		mov	r0, r3
 2316 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2317              		.loc 1 1871 6
 2318 0052 FB68     		ldr	r3, [r7, #12]
 2319 0054 DA6A     		ldr	r2, [r3, #44]
 2320 0056 164B     		ldr	r3, .L145+4
 2321 0058 1B68     		ldr	r3, [r3]
 2322 005a 9A42     		cmp	r2, r3
 2323 005c 03D9     		bls	.L143
 2324              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2325 005e FB68     		ldr	r3, [r7, #12]
 2326 0060 DB6A     		ldr	r3, [r3, #44]
 2327 0062 134A     		ldr	r2, .L145+4
 2328 0064 1360     		str	r3, [r2]
 2329              	.L143:
 2330              		.loc 1 1871 6 discriminator 3
 2331 0066 FB68     		ldr	r3, [r7, #12]
 2332 0068 DA6A     		ldr	r2, [r3, #44]
 2333 006a 1346     		mov	r3, r2
 2334 006c 9B00     		lsls	r3, r3, #2
 2335 006e 1344     		add	r3, r3, r2
 2336 0070 9B00     		lsls	r3, r3, #2
 2337 0072 104A     		ldr	r2, .L145+8
 2338 0074 1A44     		add	r2, r2, r3
 2339 0076 FB68     		ldr	r3, [r7, #12]
 2340 0078 0433     		adds	r3, r3, #4
 2341 007a 1946     		mov	r1, r3
 2342 007c 1046     		mov	r0, r2
 2343 007e FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2344              		.loc 1 1874 15 is_stmt 1 discriminator 3
 2345 0082 FB68     		ldr	r3, [r7, #12]
 2346 0084 DA6A     		ldr	r2, [r3, #44]
 2347              		.loc 1 1874 43 discriminator 3
 2348 0086 094B     		ldr	r3, .L145
 2349 0088 1B68     		ldr	r3, [r3]
 2350 008a DB6A     		ldr	r3, [r3, #44]
 2351              		.loc 1 1874 8 discriminator 3
 2352 008c 9A42     		cmp	r2, r3
 2353 008e 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2354              		.loc 1 1879 7
 2355 0090 094B     		ldr	r3, .L145+12
ARM GAS  /tmp/ccfq1u8L.s 			page 79


 2356 0092 4FF08052 		mov	r2, #268435456
 2357 0096 1A60     		str	r2, [r3]
 2358              		.syntax unified
 2359              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2360 0098 BFF34F8F 		dsb
 2361              	@ 0 "" 2
 2362              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2363 009c BFF36F8F 		isb
 2364              	@ 0 "" 2
 2365              		.thumb
 2366              		.syntax unified
 2367              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2368              		.loc 1 1891 4
 2369 00a0 FFF7FEFF 		bl	vPortExitCritical
 2370              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2371              		.loc 1 1897 2
 2372 00a4 00BF     		nop
 2373 00a6 1037     		adds	r7, r7, #16
 2374              	.LCFI69:
 2375              		.cfi_def_cfa_offset 8
 2376 00a8 BD46     		mov	sp, r7
 2377              	.LCFI70:
 2378              		.cfi_def_cfa_register 13
 2379              		@ sp needed
 2380 00aa 80BD     		pop	{r7, pc}
 2381              	.L146:
 2382              		.align	2
 2383              	.L145:
 2384 00ac 00000000 		.word	pxCurrentTCB
 2385 00b0 00000000 		.word	uxTopReadyPriority
 2386 00b4 00000000 		.word	pxReadyTasksLists
 2387 00b8 04ED00E0 		.word	-536810236
 2388              		.cfi_endproc
 2389              	.LFE17:
 2391              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2392              		.align	1
 2393              		.global	xTaskResumeFromISR
 2394              		.syntax unified
 2395              		.thumb
ARM GAS  /tmp/ccfq1u8L.s 			page 80


 2396              		.thumb_func
 2398              	xTaskResumeFromISR:
 2399              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2400              		.loc 1 1906 2
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 40
 2403              		@ frame_needed = 1, uses_anonymous_args = 0
 2404 0000 80B5     		push	{r7, lr}
 2405              	.LCFI71:
 2406              		.cfi_def_cfa_offset 8
 2407              		.cfi_offset 7, -8
 2408              		.cfi_offset 14, -4
 2409 0002 8AB0     		sub	sp, sp, #40
 2410              	.LCFI72:
 2411              		.cfi_def_cfa_offset 48
 2412 0004 00AF     		add	r7, sp, #0
 2413              	.LCFI73:
 2414              		.cfi_def_cfa_register 7
 2415 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2416              		.loc 1 1907 13
 2417 0008 0023     		movs	r3, #0
 2418 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2419              		.loc 1 1908 16
 2420 000c 7B68     		ldr	r3, [r7, #4]
 2421 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2422              		.loc 1 1911 3
 2423 0010 7B68     		ldr	r3, [r7, #4]
 2424 0012 002B     		cmp	r3, #0
 2425 0014 0AD1     		bne	.L148
 2426              	.LBB154:
 2427              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2428              		.loc 2 195 2
 2429              		.syntax unified
 2430              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2431 0016 4FF05003 			mov r3, #80												
 2432 001a 83F31188 		msr basepri, r3											
 2433 001e BFF36F8F 		isb														
 2434 0022 BFF34F8F 		dsb														
 2435              	
 2436              	@ 0 "" 2
 2437              		.thumb
 2438              		.syntax unified
ARM GAS  /tmp/ccfq1u8L.s 			page 81


 2439 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2440              		.loc 2 203 1
 2441 0028 00BF     		nop
 2442              	.L149:
 2443              	.LBE155:
 2444              	.LBE154:
 2445              		.loc 1 1911 3 discriminator 1
 2446 002a FEE7     		b	.L149
 2447              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2448              		.loc 1 1929 3
 2449 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2450              	.LBB156:
 2451              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2452              		.loc 2 211 2
 2453              		.syntax unified
 2454              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2455 0030 EFF31182 			mrs r2, basepri											
 2456 0034 4FF05003 		mov r3, #80												
 2457 0038 83F31188 		msr basepri, r3											
 2458 003c BFF36F8F 		isb														
 2459 0040 BFF34F8F 		dsb														
 2460              	
 2461              	@ 0 "" 2
 2462              		.thumb
 2463              		.syntax unified
 2464 0044 7A61     		str	r2, [r7, #20]
 2465 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2466              		.loc 2 223 9
 2467 0048 7B69     		ldr	r3, [r7, #20]
 2468              	.LBE157:
 2469              	.LBE156:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2470              		.loc 1 1931 28
 2471 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccfq1u8L.s 			page 82


1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2472              		.loc 1 1933 8
 2473 004c 386A     		ldr	r0, [r7, #32]
 2474 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2475 0052 0346     		mov	r3, r0
 2476              		.loc 1 1933 6
 2477 0054 002B     		cmp	r3, #0
 2478 0056 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2479              		.loc 1 1938 30
 2480 0058 1D4B     		ldr	r3, .L156
 2481 005a 1B68     		ldr	r3, [r3]
 2482              		.loc 1 1938 7
 2483 005c 002B     		cmp	r3, #0
 2484 005e 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2485              		.loc 1 1942 15
 2486 0060 3B6A     		ldr	r3, [r7, #32]
 2487 0062 DA6A     		ldr	r2, [r3, #44]
 2488              		.loc 1 1942 43
 2489 0064 1B4B     		ldr	r3, .L156+4
 2490 0066 1B68     		ldr	r3, [r3]
 2491 0068 DB6A     		ldr	r3, [r3, #44]
 2492              		.loc 1 1942 8
 2493 006a 9A42     		cmp	r2, r3
 2494 006c 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2495              		.loc 1 1944 22
 2496 006e 0123     		movs	r3, #1
 2497 0070 7B62     		str	r3, [r7, #36]
 2498              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2499              		.loc 1 1951 15
 2500 0072 3B6A     		ldr	r3, [r7, #32]
 2501 0074 0433     		adds	r3, r3, #4
 2502 0076 1846     		mov	r0, r3
 2503 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2504              		.loc 1 1952 6
 2505 007c 3B6A     		ldr	r3, [r7, #32]
 2506 007e DA6A     		ldr	r2, [r3, #44]
 2507 0080 154B     		ldr	r3, .L156+8
 2508 0082 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 83


 2509 0084 9A42     		cmp	r2, r3
 2510 0086 03D9     		bls	.L154
 2511              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2512 0088 3B6A     		ldr	r3, [r7, #32]
 2513 008a DB6A     		ldr	r3, [r3, #44]
 2514 008c 124A     		ldr	r2, .L156+8
 2515 008e 1360     		str	r3, [r2]
 2516              	.L154:
 2517              		.loc 1 1952 6 discriminator 3
 2518 0090 3B6A     		ldr	r3, [r7, #32]
 2519 0092 DA6A     		ldr	r2, [r3, #44]
 2520 0094 1346     		mov	r3, r2
 2521 0096 9B00     		lsls	r3, r3, #2
 2522 0098 1344     		add	r3, r3, r2
 2523 009a 9B00     		lsls	r3, r3, #2
 2524 009c 0F4A     		ldr	r2, .L156+12
 2525 009e 1A44     		add	r2, r2, r3
 2526 00a0 3B6A     		ldr	r3, [r7, #32]
 2527 00a2 0433     		adds	r3, r3, #4
 2528 00a4 1946     		mov	r1, r3
 2529 00a6 1046     		mov	r0, r2
 2530 00a8 FFF7FEFF 		bl	vListInsertEnd
 2531 00ac 05E0     		b	.L151
 2532              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2533              		.loc 1 1959 6 is_stmt 1
 2534 00ae 3B6A     		ldr	r3, [r7, #32]
 2535 00b0 1833     		adds	r3, r3, #24
 2536 00b2 1946     		mov	r1, r3
 2537 00b4 0A48     		ldr	r0, .L156+16
 2538 00b6 FFF7FEFF 		bl	vListInsertEnd
 2539              	.L151:
 2540 00ba FB69     		ldr	r3, [r7, #28]
 2541 00bc FB60     		str	r3, [r7, #12]
 2542              	.LBB158:
 2543              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2544              		.loc 2 229 2
 2545 00be FB68     		ldr	r3, [r7, #12]
 2546              		.syntax unified
 2547              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2548 00c0 83F31188 			msr basepri, r3	
 2549              	@ 0 "" 2
 2550              		.loc 2 233 1
 2551              		.thumb
 2552              		.syntax unified
 2553 00c4 00BF     		nop
 2554              	.LBE159:
 2555              	.LBE158:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfq1u8L.s 			page 84


1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2556              		.loc 1 1969 10
 2557 00c6 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2558              		.loc 1 1970 2
 2559 00c8 1846     		mov	r0, r3
 2560 00ca 2837     		adds	r7, r7, #40
 2561              	.LCFI74:
 2562              		.cfi_def_cfa_offset 8
 2563 00cc BD46     		mov	sp, r7
 2564              	.LCFI75:
 2565              		.cfi_def_cfa_register 13
 2566              		@ sp needed
 2567 00ce 80BD     		pop	{r7, pc}
 2568              	.L157:
 2569              		.align	2
 2570              	.L156:
 2571 00d0 00000000 		.word	uxSchedulerSuspended
 2572 00d4 00000000 		.word	pxCurrentTCB
 2573 00d8 00000000 		.word	uxTopReadyPriority
 2574 00dc 00000000 		.word	pxReadyTasksLists
 2575 00e0 00000000 		.word	xPendingReadyList
 2576              		.cfi_endproc
 2577              	.LFE18:
 2579              		.section	.rodata
 2580              		.align	2
 2581              	.LC0:
 2582 0000 49444C45 		.ascii	"IDLE\000"
 2582      00
 2583              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2584              		.align	1
 2585              		.global	vTaskStartScheduler
 2586              		.syntax unified
 2587              		.thumb
 2588              		.thumb_func
 2590              	vTaskStartScheduler:
 2591              	.LFB19:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2592              		.loc 1 1976 1
 2593              		.cfi_startproc
 2594              		@ args = 0, pretend = 0, frame = 24
 2595              		@ frame_needed = 1, uses_anonymous_args = 0
 2596 0000 80B5     		push	{r7, lr}
 2597              	.LCFI76:
 2598              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccfq1u8L.s 			page 85


 2599              		.cfi_offset 7, -8
 2600              		.cfi_offset 14, -4
 2601 0002 8AB0     		sub	sp, sp, #40
 2602              	.LCFI77:
 2603              		.cfi_def_cfa_offset 48
 2604 0004 04AF     		add	r7, sp, #16
 2605              	.LCFI78:
 2606              		.cfi_def_cfa 7, 32
 2607              	.LBB160:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2608              		.loc 1 1982 17
 2609 0006 0023     		movs	r3, #0
 2610 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2611              		.loc 1 1983 16
 2612 000a 0023     		movs	r3, #0
 2613 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2614              		.loc 1 1988 3
 2615 000e 3A46     		mov	r2, r7
 2616 0010 391D     		adds	r1, r7, #4
 2617 0012 07F10803 		add	r3, r7, #8
 2618 0016 1846     		mov	r0, r3
 2619 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2620              		.loc 1 1989 21
 2621 001c 3968     		ldr	r1, [r7]
 2622 001e 7B68     		ldr	r3, [r7, #4]
 2623 0020 BA68     		ldr	r2, [r7, #8]
 2624 0022 0292     		str	r2, [sp, #8]
 2625 0024 0193     		str	r3, [sp, #4]
 2626 0026 0023     		movs	r3, #0
 2627 0028 0093     		str	r3, [sp]
 2628 002a 0023     		movs	r3, #0
 2629 002c 0A46     		mov	r2, r1
 2630 002e 2449     		ldr	r1, .L166
 2631 0030 2448     		ldr	r0, .L166+4
 2632 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2633 0036 0346     		mov	r3, r0
 2634              		.loc 1 1989 19
 2635 0038 234A     		ldr	r2, .L166+8
 2636 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
ARM GAS  /tmp/ccfq1u8L.s 			page 86


1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2637              		.loc 1 1997 23
 2638 003c 224B     		ldr	r3, .L166+8
 2639 003e 1B68     		ldr	r3, [r3]
 2640              		.loc 1 1997 5
 2641 0040 002B     		cmp	r3, #0
 2642 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2643              		.loc 1 1999 12
 2644 0044 0123     		movs	r3, #1
 2645 0046 7B61     		str	r3, [r7, #20]
 2646 0048 01E0     		b	.L160
 2647              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2648              		.loc 1 2003 12
 2649 004a 0023     		movs	r3, #0
 2650 004c 7B61     		str	r3, [r7, #20]
 2651              	.L160:
 2652              	.LBE160:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2653              		.loc 1 2020 5
 2654 004e 7B69     		ldr	r3, [r7, #20]
 2655 0050 012B     		cmp	r3, #1
 2656 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2657              		.loc 1 2022 14
 2658 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2659 0058 7861     		str	r0, [r7, #20]
 2660              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccfq1u8L.s 			page 87


2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2661              		.loc 1 2031 4
 2662 005a 7B69     		ldr	r3, [r7, #20]
 2663 005c 012B     		cmp	r3, #1
 2664 005e 1BD1     		bne	.L162
 2665              	.LBB161:
 2666              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2667              		.loc 2 195 2
 2668              		.syntax unified
 2669              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2670 0060 4FF05003 			mov r3, #80												
 2671 0064 83F31188 		msr basepri, r3											
 2672 0068 BFF36F8F 		isb														
 2673 006c BFF34F8F 		dsb														
 2674              	
 2675              	@ 0 "" 2
 2676              		.thumb
 2677              		.syntax unified
 2678 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2679              		.loc 2 203 1
 2680 0072 00BF     		nop
 2681              	.LBE162:
 2682              	.LBE161:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 2683              		.loc 1 2055 33
 2684 0074 154B     		ldr	r3, .L166+12
 2685 0076 1B68     		ldr	r3, [r3]
 2686              		.loc 1 2055 18
 2687 0078 5833     		adds	r3, r3, #88
 2688              		.loc 1 2055 16
ARM GAS  /tmp/ccfq1u8L.s 			page 88


 2689 007a 154A     		ldr	r2, .L166+16
 2690 007c 1360     		str	r3, [r2]
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2691              		.loc 1 2059 24
 2692 007e 154B     		ldr	r3, .L166+20
 2693 0080 4FF0FF32 		mov	r2, #-1
 2694 0084 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2695              		.loc 1 2060 21
 2696 0086 144B     		ldr	r3, .L166+24
 2697 0088 0122     		movs	r2, #1
 2698 008a 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2699              		.loc 1 2061 14
 2700 008c 134B     		ldr	r3, .L166+28
 2701 008e 0022     		movs	r2, #0
 2702 0090 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2703              		.loc 1 2075 7
 2704 0092 FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccfq1u8L.s 			page 89


 2705              		.loc 1 2096 1
 2706 0096 0EE0     		b	.L165
 2707              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2708              		.loc 1 2090 3
 2709 0098 7B69     		ldr	r3, [r7, #20]
 2710 009a B3F1FF3F 		cmp	r3, #-1
 2711 009e 0AD1     		bne	.L165
 2712              	.LBB163:
 2713              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2714              		.loc 2 195 2
 2715              		.syntax unified
 2716              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2717 00a0 4FF05003 			mov r3, #80												
 2718 00a4 83F31188 		msr basepri, r3											
 2719 00a8 BFF36F8F 		isb														
 2720 00ac BFF34F8F 		dsb														
 2721              	
 2722              	@ 0 "" 2
 2723              		.thumb
 2724              		.syntax unified
 2725 00b0 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2726              		.loc 2 203 1
 2727 00b2 00BF     		nop
 2728              	.L164:
 2729              	.LBE164:
 2730              	.LBE163:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2731              		.loc 1 2090 3 discriminator 2
 2732 00b4 FEE7     		b	.L164
 2733              	.L165:
 2734              		.loc 1 2096 1
 2735 00b6 00BF     		nop
 2736 00b8 1837     		adds	r7, r7, #24
 2737              	.LCFI79:
 2738              		.cfi_def_cfa_offset 8
 2739 00ba BD46     		mov	sp, r7
 2740              	.LCFI80:
 2741              		.cfi_def_cfa_register 13
 2742              		@ sp needed
 2743 00bc 80BD     		pop	{r7, pc}
 2744              	.L167:
 2745 00be 00BF     		.align	2
 2746              	.L166:
 2747 00c0 00000000 		.word	.LC0
 2748 00c4 00000000 		.word	prvIdleTask
 2749 00c8 00000000 		.word	xIdleTaskHandle
 2750 00cc 00000000 		.word	pxCurrentTCB
 2751 00d0 00000000 		.word	_impure_ptr
 2752 00d4 00000000 		.word	xNextTaskUnblockTime
 2753 00d8 00000000 		.word	xSchedulerRunning
 2754 00dc 00000000 		.word	xTickCount
 2755              		.cfi_endproc
 2756              	.LFE19:
 2758              		.section	.text.vTaskEndScheduler,"ax",%progbits
ARM GAS  /tmp/ccfq1u8L.s 			page 90


 2759              		.align	1
 2760              		.global	vTaskEndScheduler
 2761              		.syntax unified
 2762              		.thumb
 2763              		.thumb_func
 2765              	vTaskEndScheduler:
 2766              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2767              		.loc 1 2100 1
 2768              		.cfi_startproc
 2769              		@ args = 0, pretend = 0, frame = 8
 2770              		@ frame_needed = 1, uses_anonymous_args = 0
 2771 0000 80B5     		push	{r7, lr}
 2772              	.LCFI81:
 2773              		.cfi_def_cfa_offset 8
 2774              		.cfi_offset 7, -8
 2775              		.cfi_offset 14, -4
 2776 0002 82B0     		sub	sp, sp, #8
 2777              	.LCFI82:
 2778              		.cfi_def_cfa_offset 16
 2779 0004 00AF     		add	r7, sp, #0
 2780              	.LCFI83:
 2781              		.cfi_def_cfa_register 7
 2782              	.LBB165:
 2783              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2784              		.loc 2 195 2
 2785              		.syntax unified
 2786              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2787 0006 4FF05003 			mov r3, #80												
 2788 000a 83F31188 		msr basepri, r3											
 2789 000e BFF36F8F 		isb														
 2790 0012 BFF34F8F 		dsb														
 2791              	
 2792              	@ 0 "" 2
 2793              		.thumb
 2794              		.syntax unified
 2795 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2796              		.loc 2 203 1
 2797 0018 00BF     		nop
 2798              	.LBE166:
 2799              	.LBE165:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2800              		.loc 1 2105 20
 2801 001a 044B     		ldr	r3, .L169
 2802 001c 0022     		movs	r2, #0
 2803 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2804              		.loc 1 2106 2
ARM GAS  /tmp/ccfq1u8L.s 			page 91


 2805 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2806              		.loc 1 2107 1
 2807 0024 00BF     		nop
 2808 0026 0837     		adds	r7, r7, #8
 2809              	.LCFI84:
 2810              		.cfi_def_cfa_offset 8
 2811 0028 BD46     		mov	sp, r7
 2812              	.LCFI85:
 2813              		.cfi_def_cfa_register 13
 2814              		@ sp needed
 2815 002a 80BD     		pop	{r7, pc}
 2816              	.L170:
 2817              		.align	2
 2818              	.L169:
 2819 002c 00000000 		.word	xSchedulerRunning
 2820              		.cfi_endproc
 2821              	.LFE20:
 2823              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2824              		.align	1
 2825              		.global	vTaskSuspendAll
 2826              		.syntax unified
 2827              		.thumb
 2828              		.thumb_func
 2830              	vTaskSuspendAll:
 2831              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2832              		.loc 1 2111 1
 2833              		.cfi_startproc
 2834              		@ args = 0, pretend = 0, frame = 0
 2835              		@ frame_needed = 1, uses_anonymous_args = 0
 2836              		@ link register save eliminated.
 2837 0000 80B4     		push	{r7}
 2838              	.LCFI86:
 2839              		.cfi_def_cfa_offset 4
 2840              		.cfi_offset 7, -4
 2841 0002 00AF     		add	r7, sp, #0
 2842              	.LCFI87:
 2843              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2844              		.loc 1 2123 2
 2845 0004 044B     		ldr	r3, .L172
 2846 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 92


 2847 0008 0133     		adds	r3, r3, #1
 2848 000a 034A     		ldr	r2, .L172
 2849 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2850              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2851              		.loc 1 2128 1
 2852 000e 00BF     		nop
 2853 0010 BD46     		mov	sp, r7
 2854              	.LCFI88:
 2855              		.cfi_def_cfa_register 13
 2856              		@ sp needed
 2857 0012 5DF8047B 		ldr	r7, [sp], #4
 2858              	.LCFI89:
 2859              		.cfi_restore 7
 2860              		.cfi_def_cfa_offset 0
 2861 0016 7047     		bx	lr
 2862              	.L173:
 2863              		.align	2
 2864              	.L172:
 2865 0018 00000000 		.word	uxSchedulerSuspended
 2866              		.cfi_endproc
 2867              	.LFE21:
 2869              		.section	.text.xTaskResumeAll,"ax",%progbits
 2870              		.align	1
 2871              		.global	xTaskResumeAll
 2872              		.syntax unified
 2873              		.thumb
 2874              		.thumb_func
 2876              	xTaskResumeAll:
 2877              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
ARM GAS  /tmp/ccfq1u8L.s 			page 93


2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2878              		.loc 1 2195 1
 2879              		.cfi_startproc
 2880              		@ args = 0, pretend = 0, frame = 16
 2881              		@ frame_needed = 1, uses_anonymous_args = 0
 2882 0000 80B5     		push	{r7, lr}
 2883              	.LCFI90:
 2884              		.cfi_def_cfa_offset 8
 2885              		.cfi_offset 7, -8
 2886              		.cfi_offset 14, -4
 2887 0002 84B0     		sub	sp, sp, #16
 2888              	.LCFI91:
 2889              		.cfi_def_cfa_offset 24
 2890 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 94


 2891              	.LCFI92:
 2892              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2893              		.loc 1 2196 8
 2894 0006 0023     		movs	r3, #0
 2895 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2896              		.loc 1 2197 12
 2897 000a 0023     		movs	r3, #0
 2898 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2899              		.loc 1 2201 2
 2900 000e 424B     		ldr	r3, .L186
 2901 0010 1B68     		ldr	r3, [r3]
 2902 0012 002B     		cmp	r3, #0
 2903 0014 0AD1     		bne	.L175
 2904              	.LBB167:
 2905              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2906              		.loc 2 195 2
 2907              		.syntax unified
 2908              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2909 0016 4FF05003 			mov r3, #80												
 2910 001a 83F31188 		msr basepri, r3											
 2911 001e BFF36F8F 		isb														
 2912 0022 BFF34F8F 		dsb														
 2913              	
 2914              	@ 0 "" 2
 2915              		.thumb
 2916              		.syntax unified
 2917 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2918              		.loc 2 203 1
 2919 0028 00BF     		nop
 2920              	.L176:
 2921              	.LBE168:
 2922              	.LBE167:
 2923              		.loc 1 2201 2 discriminator 1
 2924 002a FEE7     		b	.L176
 2925              	.L175:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2926              		.loc 1 2208 2
 2927 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2928              		.loc 1 2210 3
 2929 0030 394B     		ldr	r3, .L186
 2930 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 95


 2931 0034 013B     		subs	r3, r3, #1
 2932 0036 384A     		ldr	r2, .L186
 2933 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2934              		.loc 1 2212 28
 2935 003a 374B     		ldr	r3, .L186
 2936 003c 1B68     		ldr	r3, [r3]
 2937              		.loc 1 2212 5
 2938 003e 002B     		cmp	r3, #0
 2939 0040 62D1     		bne	.L177
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2940              		.loc 1 2214 31
 2941 0042 364B     		ldr	r3, .L186+4
 2942 0044 1B68     		ldr	r3, [r3]
 2943              		.loc 1 2214 6
 2944 0046 002B     		cmp	r3, #0
 2945 0048 5ED0     		beq	.L177
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2946              		.loc 1 2218 10
 2947 004a 2FE0     		b	.L178
 2948              	.L180:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2949              		.loc 1 2220 14
 2950 004c 344B     		ldr	r3, .L186+8
 2951 004e DB68     		ldr	r3, [r3, #12]
 2952              		.loc 1 2220 12
 2953 0050 DB68     		ldr	r3, [r3, #12]
 2954 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2955              		.loc 1 2221 15
 2956 0054 FB68     		ldr	r3, [r7, #12]
 2957 0056 1833     		adds	r3, r3, #24
 2958 0058 1846     		mov	r0, r3
 2959 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2960              		.loc 1 2222 15
 2961 005e FB68     		ldr	r3, [r7, #12]
 2962 0060 0433     		adds	r3, r3, #4
 2963 0062 1846     		mov	r0, r3
 2964 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2965              		.loc 1 2223 6
 2966 0068 FB68     		ldr	r3, [r7, #12]
 2967 006a DA6A     		ldr	r2, [r3, #44]
 2968 006c 2D4B     		ldr	r3, .L186+12
 2969 006e 1B68     		ldr	r3, [r3]
 2970 0070 9A42     		cmp	r2, r3
 2971 0072 03D9     		bls	.L179
 2972              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2973 0074 FB68     		ldr	r3, [r7, #12]
 2974 0076 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccfq1u8L.s 			page 96


 2975 0078 2A4A     		ldr	r2, .L186+12
 2976 007a 1360     		str	r3, [r2]
 2977              	.L179:
 2978              		.loc 1 2223 6 discriminator 3
 2979 007c FB68     		ldr	r3, [r7, #12]
 2980 007e DA6A     		ldr	r2, [r3, #44]
 2981 0080 1346     		mov	r3, r2
 2982 0082 9B00     		lsls	r3, r3, #2
 2983 0084 1344     		add	r3, r3, r2
 2984 0086 9B00     		lsls	r3, r3, #2
 2985 0088 274A     		ldr	r2, .L186+16
 2986 008a 1A44     		add	r2, r2, r3
 2987 008c FB68     		ldr	r3, [r7, #12]
 2988 008e 0433     		adds	r3, r3, #4
 2989 0090 1946     		mov	r1, r3
 2990 0092 1046     		mov	r0, r2
 2991 0094 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2992              		.loc 1 2227 15 is_stmt 1 discriminator 3
 2993 0098 FB68     		ldr	r3, [r7, #12]
 2994 009a DA6A     		ldr	r2, [r3, #44]
 2995              		.loc 1 2227 43 discriminator 3
 2996 009c 234B     		ldr	r3, .L186+20
 2997 009e 1B68     		ldr	r3, [r3]
 2998 00a0 DB6A     		ldr	r3, [r3, #44]
 2999              		.loc 1 2227 8 discriminator 3
 3000 00a2 9A42     		cmp	r2, r3
 3001 00a4 02D3     		bcc	.L178
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 3002              		.loc 1 2229 21
 3003 00a6 224B     		ldr	r3, .L186+24
 3004 00a8 0122     		movs	r2, #1
 3005 00aa 1A60     		str	r2, [r3]
 3006              	.L178:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3007              		.loc 1 2218 12
 3008 00ac 1C4B     		ldr	r3, .L186+8
 3009 00ae 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3010              		.loc 1 2218 10
 3011 00b0 002B     		cmp	r3, #0
 3012 00b2 CBD1     		bne	.L180
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3013              		.loc 1 2237 7
 3014 00b4 FB68     		ldr	r3, [r7, #12]
 3015 00b6 002B     		cmp	r3, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 97


 3016 00b8 01D0     		beq	.L181
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 3017              		.loc 1 2245 6
 3018 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3019              	.L181:
 3020              	.LBB169:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 3021              		.loc 1 2253 17
 3022 00be 1D4B     		ldr	r3, .L186+28
 3023 00c0 1B68     		ldr	r3, [r3]
 3024 00c2 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 3025              		.loc 1 2255 8
 3026 00c4 7B68     		ldr	r3, [r7, #4]
 3027 00c6 002B     		cmp	r3, #0
 3028 00c8 10D0     		beq	.L182
 3029              	.L184:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 3030              		.loc 1 2259 12
 3031 00ca FFF7FEFF 		bl	xTaskIncrementTick
 3032 00ce 0346     		mov	r3, r0
 3033              		.loc 1 2259 10
 3034 00d0 002B     		cmp	r3, #0
 3035 00d2 02D0     		beq	.L183
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 3036              		.loc 1 2261 23
 3037 00d4 164B     		ldr	r3, .L186+24
 3038 00d6 0122     		movs	r2, #1
 3039 00d8 1A60     		str	r2, [r3]
 3040              	.L183:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3041              		.loc 1 2267 8
 3042 00da 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccfq1u8L.s 			page 98


 3043 00dc 013B     		subs	r3, r3, #1
 3044 00de 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3045              		.loc 1 2268 7
 3046 00e0 7B68     		ldr	r3, [r7, #4]
 3047 00e2 002B     		cmp	r3, #0
 3048 00e4 F1D1     		bne	.L184
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3049              		.loc 1 2270 20
 3050 00e6 134B     		ldr	r3, .L186+28
 3051 00e8 0022     		movs	r2, #0
 3052 00ea 1A60     		str	r2, [r3]
 3053              	.L182:
 3054              	.LBE169:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3055              		.loc 1 2278 23
 3056 00ec 104B     		ldr	r3, .L186+24
 3057 00ee 1B68     		ldr	r3, [r3]
 3058              		.loc 1 2278 7
 3059 00f0 002B     		cmp	r3, #0
 3060 00f2 09D0     		beq	.L177
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3061              		.loc 1 2282 23
 3062 00f4 0123     		movs	r3, #1
 3063 00f6 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3064              		.loc 1 2285 6
 3065 00f8 0F4B     		ldr	r3, .L186+32
 3066 00fa 4FF08052 		mov	r2, #268435456
 3067 00fe 1A60     		str	r2, [r3]
 3068              		.syntax unified
 3069              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3070 0100 BFF34F8F 		dsb
 3071              	@ 0 "" 2
 3072              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3073 0104 BFF36F8F 		isb
 3074              	@ 0 "" 2
 3075              		.thumb
 3076              		.syntax unified
 3077              	.L177:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccfq1u8L.s 			page 99


2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3078              		.loc 1 2298 2
 3079 0108 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3080              		.loc 1 2300 9
 3081 010c BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3082              		.loc 1 2301 1
 3083 010e 1846     		mov	r0, r3
 3084 0110 1037     		adds	r7, r7, #16
 3085              	.LCFI93:
 3086              		.cfi_def_cfa_offset 8
 3087 0112 BD46     		mov	sp, r7
 3088              	.LCFI94:
 3089              		.cfi_def_cfa_register 13
 3090              		@ sp needed
 3091 0114 80BD     		pop	{r7, pc}
 3092              	.L187:
 3093 0116 00BF     		.align	2
 3094              	.L186:
 3095 0118 00000000 		.word	uxSchedulerSuspended
 3096 011c 00000000 		.word	uxCurrentNumberOfTasks
 3097 0120 00000000 		.word	xPendingReadyList
 3098 0124 00000000 		.word	uxTopReadyPriority
 3099 0128 00000000 		.word	pxReadyTasksLists
 3100 012c 00000000 		.word	pxCurrentTCB
 3101 0130 00000000 		.word	xYieldPending
 3102 0134 00000000 		.word	xPendedTicks
 3103 0138 04ED00E0 		.word	-536810236
 3104              		.cfi_endproc
 3105              	.LFE22:
 3107              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3108              		.align	1
 3109              		.global	xTaskGetTickCount
 3110              		.syntax unified
 3111              		.thumb
 3112              		.thumb_func
 3114              	xTaskGetTickCount:
 3115              	.LFB23:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3116              		.loc 1 2305 1
 3117              		.cfi_startproc
 3118              		@ args = 0, pretend = 0, frame = 8
 3119              		@ frame_needed = 1, uses_anonymous_args = 0
 3120              		@ link register save eliminated.
ARM GAS  /tmp/ccfq1u8L.s 			page 100


 3121 0000 80B4     		push	{r7}
 3122              	.LCFI95:
 3123              		.cfi_def_cfa_offset 4
 3124              		.cfi_offset 7, -4
 3125 0002 83B0     		sub	sp, sp, #12
 3126              	.LCFI96:
 3127              		.cfi_def_cfa_offset 16
 3128 0004 00AF     		add	r7, sp, #0
 3129              	.LCFI97:
 3130              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3131              		.loc 1 2311 10
 3132 0006 054B     		ldr	r3, .L190
 3133 0008 1B68     		ldr	r3, [r3]
 3134 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3135              		.loc 1 2315 9
 3136 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3137              		.loc 1 2316 1
 3138 000e 1846     		mov	r0, r3
 3139 0010 0C37     		adds	r7, r7, #12
 3140              	.LCFI98:
 3141              		.cfi_def_cfa_offset 4
 3142 0012 BD46     		mov	sp, r7
 3143              	.LCFI99:
 3144              		.cfi_def_cfa_register 13
 3145              		@ sp needed
 3146 0014 5DF8047B 		ldr	r7, [sp], #4
 3147              	.LCFI100:
 3148              		.cfi_restore 7
 3149              		.cfi_def_cfa_offset 0
 3150 0018 7047     		bx	lr
 3151              	.L191:
 3152 001a 00BF     		.align	2
 3153              	.L190:
 3154 001c 00000000 		.word	xTickCount
 3155              		.cfi_endproc
 3156              	.LFE23:
 3158              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3159              		.align	1
 3160              		.global	xTaskGetTickCountFromISR
 3161              		.syntax unified
 3162              		.thumb
 3163              		.thumb_func
 3165              	xTaskGetTickCountFromISR:
 3166              	.LFB24:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 101


2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3167              		.loc 1 2320 1
 3168              		.cfi_startproc
 3169              		@ args = 0, pretend = 0, frame = 8
 3170              		@ frame_needed = 1, uses_anonymous_args = 0
 3171 0000 80B5     		push	{r7, lr}
 3172              	.LCFI101:
 3173              		.cfi_def_cfa_offset 8
 3174              		.cfi_offset 7, -8
 3175              		.cfi_offset 14, -4
 3176 0002 82B0     		sub	sp, sp, #8
 3177              	.LCFI102:
 3178              		.cfi_def_cfa_offset 16
 3179 0004 00AF     		add	r7, sp, #0
 3180              	.LCFI103:
 3181              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3182              		.loc 1 2338 2
 3183 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3184              		.loc 1 2340 25
 3185 000a 0023     		movs	r3, #0
 3186 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3187              		.loc 1 2342 11
 3188 000e 044B     		ldr	r3, .L194
 3189 0010 1B68     		ldr	r3, [r3]
 3190 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3191              		.loc 1 2346 9
 3192 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3193              		.loc 1 2347 1
 3194 0016 1846     		mov	r0, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 102


 3195 0018 0837     		adds	r7, r7, #8
 3196              	.LCFI104:
 3197              		.cfi_def_cfa_offset 8
 3198 001a BD46     		mov	sp, r7
 3199              	.LCFI105:
 3200              		.cfi_def_cfa_register 13
 3201              		@ sp needed
 3202 001c 80BD     		pop	{r7, pc}
 3203              	.L195:
 3204 001e 00BF     		.align	2
 3205              	.L194:
 3206 0020 00000000 		.word	xTickCount
 3207              		.cfi_endproc
 3208              	.LFE24:
 3210              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3211              		.align	1
 3212              		.global	uxTaskGetNumberOfTasks
 3213              		.syntax unified
 3214              		.thumb
 3215              		.thumb_func
 3217              	uxTaskGetNumberOfTasks:
 3218              	.LFB25:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3219              		.loc 1 2351 1
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 1, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 3224 0000 80B4     		push	{r7}
 3225              	.LCFI106:
 3226              		.cfi_def_cfa_offset 4
 3227              		.cfi_offset 7, -4
 3228 0002 00AF     		add	r7, sp, #0
 3229              	.LCFI107:
 3230              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3231              		.loc 1 2354 9
 3232 0004 034B     		ldr	r3, .L198
 3233 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3234              		.loc 1 2355 1
 3235 0008 1846     		mov	r0, r3
 3236 000a BD46     		mov	sp, r7
 3237              	.LCFI108:
 3238              		.cfi_def_cfa_register 13
 3239              		@ sp needed
 3240 000c 5DF8047B 		ldr	r7, [sp], #4
 3241              	.LCFI109:
 3242              		.cfi_restore 7
 3243              		.cfi_def_cfa_offset 0
 3244 0010 7047     		bx	lr
 3245              	.L199:
ARM GAS  /tmp/ccfq1u8L.s 			page 103


 3246 0012 00BF     		.align	2
 3247              	.L198:
 3248 0014 00000000 		.word	uxCurrentNumberOfTasks
 3249              		.cfi_endproc
 3250              	.LFE25:
 3252              		.section	.text.pcTaskGetName,"ax",%progbits
 3253              		.align	1
 3254              		.global	pcTaskGetName
 3255              		.syntax unified
 3256              		.thumb
 3257              		.thumb_func
 3259              	pcTaskGetName:
 3260              	.LFB26:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3261              		.loc 1 2359 1
 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 16
 3264              		@ frame_needed = 1, uses_anonymous_args = 0
 3265              		@ link register save eliminated.
 3266 0000 80B4     		push	{r7}
 3267              	.LCFI110:
 3268              		.cfi_def_cfa_offset 4
 3269              		.cfi_offset 7, -4
 3270 0002 85B0     		sub	sp, sp, #20
 3271              	.LCFI111:
 3272              		.cfi_def_cfa_offset 24
 3273 0004 00AF     		add	r7, sp, #0
 3274              	.LCFI112:
 3275              		.cfi_def_cfa_register 7
 3276 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3277              		.loc 1 2364 10
 3278 0008 7B68     		ldr	r3, [r7, #4]
 3279 000a 002B     		cmp	r3, #0
 3280 000c 02D1     		bne	.L201
 3281              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3282 000e 0D4B     		ldr	r3, .L206
 3283 0010 1B68     		ldr	r3, [r3]
 3284 0012 00E0     		b	.L202
 3285              	.L201:
 3286              		.loc 1 2364 10 discriminator 2
 3287 0014 7B68     		ldr	r3, [r7, #4]
 3288              	.L202:
 3289              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3290 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3291              		.loc 1 2365 2 discriminator 4
 3292 0018 FB68     		ldr	r3, [r7, #12]
 3293 001a 002B     		cmp	r3, #0
 3294 001c 0AD1     		bne	.L203
ARM GAS  /tmp/ccfq1u8L.s 			page 104


 3295              	.LBB170:
 3296              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3297              		.loc 2 195 2
 3298              		.syntax unified
 3299              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3300 001e 4FF05003 			mov r3, #80												
 3301 0022 83F31188 		msr basepri, r3											
 3302 0026 BFF36F8F 		isb														
 3303 002a BFF34F8F 		dsb														
 3304              	
 3305              	@ 0 "" 2
 3306              		.thumb
 3307              		.syntax unified
 3308 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3309              		.loc 2 203 1
 3310 0030 00BF     		nop
 3311              	.L204:
 3312              	.LBE171:
 3313              	.LBE170:
 3314              		.loc 1 2365 2 discriminator 1
 3315 0032 FEE7     		b	.L204
 3316              	.L203:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3317              		.loc 1 2366 9
 3318 0034 FB68     		ldr	r3, [r7, #12]
 3319 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3320              		.loc 1 2367 1
 3321 0038 1846     		mov	r0, r3
 3322 003a 1437     		adds	r7, r7, #20
 3323              	.LCFI113:
 3324              		.cfi_def_cfa_offset 4
 3325 003c BD46     		mov	sp, r7
 3326              	.LCFI114:
 3327              		.cfi_def_cfa_register 13
 3328              		@ sp needed
 3329 003e 5DF8047B 		ldr	r7, [sp], #4
 3330              	.LCFI115:
 3331              		.cfi_restore 7
 3332              		.cfi_def_cfa_offset 0
 3333 0042 7047     		bx	lr
 3334              	.L207:
 3335              		.align	2
 3336              	.L206:
 3337 0044 00000000 		.word	pxCurrentTCB
 3338              		.cfi_endproc
 3339              	.LFE26:
 3341              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3342              		.align	1
 3343              		.global	uxTaskGetSystemState
 3344              		.syntax unified
 3345              		.thumb
 3346              		.thumb_func
 3348              	uxTaskGetSystemState:
 3349              	.LFB27:
ARM GAS  /tmp/ccfq1u8L.s 			page 105


2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 106


2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccfq1u8L.s 			page 107


2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3350              		.loc 1 2506 2
 3351              		.cfi_startproc
 3352              		@ args = 0, pretend = 0, frame = 24
 3353              		@ frame_needed = 1, uses_anonymous_args = 0
 3354 0000 80B5     		push	{r7, lr}
 3355              	.LCFI116:
 3356              		.cfi_def_cfa_offset 8
 3357              		.cfi_offset 7, -8
 3358              		.cfi_offset 14, -4
 3359 0002 86B0     		sub	sp, sp, #24
 3360              	.LCFI117:
 3361              		.cfi_def_cfa_offset 32
 3362 0004 00AF     		add	r7, sp, #0
 3363              	.LCFI118:
 3364              		.cfi_def_cfa_register 7
 3365 0006 F860     		str	r0, [r7, #12]
 3366 0008 B960     		str	r1, [r7, #8]
 3367 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3368              		.loc 1 2507 14
 3369 000c 0023     		movs	r3, #0
 3370 000e 7B61     		str	r3, [r7, #20]
 3371              		.loc 1 2507 26
 3372 0010 3823     		movs	r3, #56
 3373 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3374              		.loc 1 2509 3
 3375 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /tmp/ccfq1u8L.s 			page 108


 3376              		.loc 1 2512 20
 3377 0018 3A4B     		ldr	r3, .L212
 3378 001a 1B68     		ldr	r3, [r3]
 3379              		.loc 1 2512 6
 3380 001c BA68     		ldr	r2, [r7, #8]
 3381 001e 9A42     		cmp	r2, r3
 3382 0020 68D3     		bcc	.L209
 3383              	.L210:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3384              		.loc 1 2518 13 discriminator 1
 3385 0022 3B69     		ldr	r3, [r7, #16]
 3386 0024 013B     		subs	r3, r3, #1
 3387 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3388              		.loc 1 2519 66 discriminator 1
 3389 0028 7A69     		ldr	r2, [r7, #20]
 3390 002a 1346     		mov	r3, r2
 3391 002c DB00     		lsls	r3, r3, #3
 3392 002e 1344     		add	r3, r3, r2
 3393 0030 9B00     		lsls	r3, r3, #2
 3394 0032 1A46     		mov	r2, r3
 3395              		.loc 1 2519 16 discriminator 1
 3396 0034 FB68     		ldr	r3, [r7, #12]
 3397 0036 9818     		adds	r0, r3, r2
 3398 0038 3A69     		ldr	r2, [r7, #16]
 3399 003a 1346     		mov	r3, r2
 3400 003c 9B00     		lsls	r3, r3, #2
 3401 003e 1344     		add	r3, r3, r2
 3402 0040 9B00     		lsls	r3, r3, #2
 3403 0042 314A     		ldr	r2, .L212+4
 3404 0044 1344     		add	r3, r3, r2
 3405 0046 0122     		movs	r2, #1
 3406 0048 1946     		mov	r1, r3
 3407 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3408 004e 0246     		mov	r2, r0
 3409              		.loc 1 2519 13 discriminator 1
 3410 0050 7B69     		ldr	r3, [r7, #20]
 3411 0052 1344     		add	r3, r3, r2
 3412 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3413              		.loc 1 2521 5 discriminator 1
 3414 0056 3B69     		ldr	r3, [r7, #16]
 3415 0058 002B     		cmp	r3, #0
 3416 005a E2D1     		bne	.L210
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3417              		.loc 1 2525 65
 3418 005c 7A69     		ldr	r2, [r7, #20]
 3419 005e 1346     		mov	r3, r2
ARM GAS  /tmp/ccfq1u8L.s 			page 109


 3420 0060 DB00     		lsls	r3, r3, #3
 3421 0062 1344     		add	r3, r3, r2
 3422 0064 9B00     		lsls	r3, r3, #2
 3423 0066 1A46     		mov	r2, r3
 3424              		.loc 1 2525 15
 3425 0068 FB68     		ldr	r3, [r7, #12]
 3426 006a 1344     		add	r3, r3, r2
 3427 006c 274A     		ldr	r2, .L212+8
 3428 006e 1168     		ldr	r1, [r2]
 3429 0070 0222     		movs	r2, #2
 3430 0072 1846     		mov	r0, r3
 3431 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3432 0078 0246     		mov	r2, r0
 3433              		.loc 1 2525 12
 3434 007a 7B69     		ldr	r3, [r7, #20]
 3435 007c 1344     		add	r3, r3, r2
 3436 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3437              		.loc 1 2526 65
 3438 0080 7A69     		ldr	r2, [r7, #20]
 3439 0082 1346     		mov	r3, r2
 3440 0084 DB00     		lsls	r3, r3, #3
 3441 0086 1344     		add	r3, r3, r2
 3442 0088 9B00     		lsls	r3, r3, #2
 3443 008a 1A46     		mov	r2, r3
 3444              		.loc 1 2526 15
 3445 008c FB68     		ldr	r3, [r7, #12]
 3446 008e 1344     		add	r3, r3, r2
 3447 0090 1F4A     		ldr	r2, .L212+12
 3448 0092 1168     		ldr	r1, [r2]
 3449 0094 0222     		movs	r2, #2
 3450 0096 1846     		mov	r0, r3
 3451 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3452 009c 0246     		mov	r2, r0
 3453              		.loc 1 2526 12
 3454 009e 7B69     		ldr	r3, [r7, #20]
 3455 00a0 1344     		add	r3, r3, r2
 3456 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3457              		.loc 1 2532 66
 3458 00a4 7A69     		ldr	r2, [r7, #20]
 3459 00a6 1346     		mov	r3, r2
 3460 00a8 DB00     		lsls	r3, r3, #3
 3461 00aa 1344     		add	r3, r3, r2
 3462 00ac 9B00     		lsls	r3, r3, #2
 3463 00ae 1A46     		mov	r2, r3
 3464              		.loc 1 2532 16
 3465 00b0 FB68     		ldr	r3, [r7, #12]
 3466 00b2 1344     		add	r3, r3, r2
 3467 00b4 0422     		movs	r2, #4
 3468 00b6 1749     		ldr	r1, .L212+16
 3469 00b8 1846     		mov	r0, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 110


 3470 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3471 00be 0246     		mov	r2, r0
 3472              		.loc 1 2532 13
 3473 00c0 7B69     		ldr	r3, [r7, #20]
 3474 00c2 1344     		add	r3, r3, r2
 3475 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3476              		.loc 1 2540 66
 3477 00c6 7A69     		ldr	r2, [r7, #20]
 3478 00c8 1346     		mov	r3, r2
 3479 00ca DB00     		lsls	r3, r3, #3
 3480 00cc 1344     		add	r3, r3, r2
 3481 00ce 9B00     		lsls	r3, r3, #2
 3482 00d0 1A46     		mov	r2, r3
 3483              		.loc 1 2540 16
 3484 00d2 FB68     		ldr	r3, [r7, #12]
 3485 00d4 1344     		add	r3, r3, r2
 3486 00d6 0322     		movs	r2, #3
 3487 00d8 0F49     		ldr	r1, .L212+20
 3488 00da 1846     		mov	r0, r3
 3489 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3490 00e0 0246     		mov	r2, r0
 3491              		.loc 1 2540 13
 3492 00e2 7B69     		ldr	r3, [r7, #20]
 3493 00e4 1344     		add	r3, r3, r2
 3494 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3495              		.loc 1 2557 8
 3496 00e8 7B68     		ldr	r3, [r7, #4]
 3497 00ea 002B     		cmp	r3, #0
 3498 00ec 02D0     		beq	.L209
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3499              		.loc 1 2559 24
ARM GAS  /tmp/ccfq1u8L.s 			page 111


 3500 00ee 7B68     		ldr	r3, [r7, #4]
 3501 00f0 0022     		movs	r2, #0
 3502 00f2 1A60     		str	r2, [r3]
 3503              	.L209:
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3504              		.loc 1 2569 12
 3505 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3506              		.loc 1 2571 10
 3507 00f8 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3508              		.loc 1 2572 2
 3509 00fa 1846     		mov	r0, r3
 3510 00fc 1837     		adds	r7, r7, #24
 3511              	.LCFI119:
 3512              		.cfi_def_cfa_offset 8
 3513 00fe BD46     		mov	sp, r7
 3514              	.LCFI120:
 3515              		.cfi_def_cfa_register 13
 3516              		@ sp needed
 3517 0100 80BD     		pop	{r7, pc}
 3518              	.L213:
 3519 0102 00BF     		.align	2
 3520              	.L212:
 3521 0104 00000000 		.word	uxCurrentNumberOfTasks
 3522 0108 00000000 		.word	pxReadyTasksLists
 3523 010c 00000000 		.word	pxDelayedTaskList
 3524 0110 00000000 		.word	pxOverflowDelayedTaskList
 3525 0114 00000000 		.word	xTasksWaitingTermination
 3526 0118 00000000 		.word	xSuspendedTaskList
 3527              		.cfi_endproc
 3528              	.LFE27:
 3530              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3531              		.align	1
 3532              		.global	xTaskCatchUpTicks
 3533              		.syntax unified
 3534              		.thumb
 3535              		.thumb_func
 3537              	xTaskCatchUpTicks:
 3538              	.LFB28:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS  /tmp/ccfq1u8L.s 			page 112


2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3539              		.loc 1 2610 1
 3540              		.cfi_startproc
 3541              		@ args = 0, pretend = 0, frame = 16
 3542              		@ frame_needed = 1, uses_anonymous_args = 0
 3543 0000 80B5     		push	{r7, lr}
 3544              	.LCFI121:
 3545              		.cfi_def_cfa_offset 8
 3546              		.cfi_offset 7, -8
 3547              		.cfi_offset 14, -4
 3548 0002 84B0     		sub	sp, sp, #16
 3549              	.LCFI122:
 3550              		.cfi_def_cfa_offset 24
 3551 0004 00AF     		add	r7, sp, #0
 3552              	.LCFI123:
 3553              		.cfi_def_cfa_register 7
 3554 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3555              		.loc 1 2611 12
 3556 0008 0023     		movs	r3, #0
 3557 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3558              		.loc 1 2615 2
 3559 000c 0F4B     		ldr	r3, .L218
ARM GAS  /tmp/ccfq1u8L.s 			page 113


 3560 000e 1B68     		ldr	r3, [r3]
 3561 0010 002B     		cmp	r3, #0
 3562 0012 0AD0     		beq	.L215
 3563              	.LBB172:
 3564              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3565              		.loc 2 195 2
 3566              		.syntax unified
 3567              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3568 0014 4FF05003 			mov r3, #80												
 3569 0018 83F31188 		msr basepri, r3											
 3570 001c BFF36F8F 		isb														
 3571 0020 BFF34F8F 		dsb														
 3572              	
 3573              	@ 0 "" 2
 3574              		.thumb
 3575              		.syntax unified
 3576 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3577              		.loc 2 203 1
 3578 0026 00BF     		nop
 3579              	.L216:
 3580              	.LBE173:
 3581              	.LBE172:
 3582              		.loc 1 2615 2 discriminator 1
 3583 0028 FEE7     		b	.L216
 3584              	.L215:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3585              		.loc 1 2619 2
 3586 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3587              		.loc 1 2620 15
 3588 002e 084B     		ldr	r3, .L218+4
 3589 0030 1A68     		ldr	r2, [r3]
 3590 0032 7B68     		ldr	r3, [r7, #4]
 3591 0034 1344     		add	r3, r3, r2
 3592 0036 064A     		ldr	r2, .L218+4
 3593 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3594              		.loc 1 2621 19
 3595 003a FFF7FEFF 		bl	xTaskResumeAll
 3596 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3597              		.loc 1 2623 9
 3598 0040 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3599              		.loc 1 2624 1
 3600 0042 1846     		mov	r0, r3
 3601 0044 1037     		adds	r7, r7, #16
 3602              	.LCFI124:
 3603              		.cfi_def_cfa_offset 8
 3604 0046 BD46     		mov	sp, r7
 3605              	.LCFI125:
ARM GAS  /tmp/ccfq1u8L.s 			page 114


 3606              		.cfi_def_cfa_register 13
 3607              		@ sp needed
 3608 0048 80BD     		pop	{r7, pc}
 3609              	.L219:
 3610 004a 00BF     		.align	2
 3611              	.L218:
 3612 004c 00000000 		.word	uxSchedulerSuspended
 3613 0050 00000000 		.word	xPendedTicks
 3614              		.cfi_endproc
 3615              	.LFE28:
 3617              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3618              		.align	1
 3619              		.global	xTaskIncrementTick
 3620              		.syntax unified
 3621              		.thumb
 3622              		.thumb_func
 3624              	xTaskIncrementTick:
 3625              	.LFB29:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccfq1u8L.s 			page 115


2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3626              		.loc 1 2708 1
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 24
 3629              		@ frame_needed = 1, uses_anonymous_args = 0
 3630 0000 80B5     		push	{r7, lr}
 3631              	.LCFI126:
 3632              		.cfi_def_cfa_offset 8
 3633              		.cfi_offset 7, -8
 3634              		.cfi_offset 14, -4
 3635 0002 86B0     		sub	sp, sp, #24
 3636              	.LCFI127:
 3637              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccfq1u8L.s 			page 116


 3638 0004 00AF     		add	r7, sp, #0
 3639              	.LCFI128:
 3640              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3641              		.loc 1 2711 12
 3642 0006 0023     		movs	r3, #0
 3643 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3644              		.loc 1 2717 27
 3645 000a 4F4B     		ldr	r3, .L235
 3646 000c 1B68     		ldr	r3, [r3]
 3647              		.loc 1 2717 4
 3648 000e 002B     		cmp	r3, #0
 3649 0010 40F08F80 		bne	.L221
 3650              	.LBB174:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3651              		.loc 1 2721 49
 3652 0014 4D4B     		ldr	r3, .L235+4
 3653 0016 1B68     		ldr	r3, [r3]
 3654              		.loc 1 2721 20
 3655 0018 0133     		adds	r3, r3, #1
 3656 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3657              		.loc 1 2725 14
 3658 001c 4B4A     		ldr	r2, .L235+4
 3659 001e 3B69     		ldr	r3, [r7, #16]
 3660 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3661              		.loc 1 2727 5
 3662 0022 3B69     		ldr	r3, [r7, #16]
 3663 0024 002B     		cmp	r3, #0
 3664 0026 20D1     		bne	.L222
 3665              	.LBB175:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3666              		.loc 1 2729 4
 3667 0028 494B     		ldr	r3, .L235+8
 3668 002a 1B68     		ldr	r3, [r3]
 3669 002c 1B68     		ldr	r3, [r3]
 3670 002e 002B     		cmp	r3, #0
 3671 0030 0AD0     		beq	.L223
 3672              	.LBB176:
 3673              	.LBB177:
ARM GAS  /tmp/ccfq1u8L.s 			page 117


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3674              		.loc 2 195 2
 3675              		.syntax unified
 3676              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3677 0032 4FF05003 			mov r3, #80												
 3678 0036 83F31188 		msr basepri, r3											
 3679 003a BFF36F8F 		isb														
 3680 003e BFF34F8F 		dsb														
 3681              	
 3682              	@ 0 "" 2
 3683              		.thumb
 3684              		.syntax unified
 3685 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3686              		.loc 2 203 1
 3687 0044 00BF     		nop
 3688              	.L224:
 3689              	.LBE177:
 3690              	.LBE176:
 3691              		.loc 1 2729 4 discriminator 1
 3692 0046 FEE7     		b	.L224
 3693              	.L223:
 3694              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3695 0048 414B     		ldr	r3, .L235+8
 3696 004a 1B68     		ldr	r3, [r3]
 3697 004c FB60     		str	r3, [r7, #12]
 3698 004e 414B     		ldr	r3, .L235+12
 3699 0050 1B68     		ldr	r3, [r3]
 3700 0052 3F4A     		ldr	r2, .L235+8
 3701 0054 1360     		str	r3, [r2]
 3702 0056 3F4A     		ldr	r2, .L235+12
 3703 0058 FB68     		ldr	r3, [r7, #12]
 3704 005a 1360     		str	r3, [r2]
 3705 005c 3E4B     		ldr	r3, .L235+16
 3706 005e 1B68     		ldr	r3, [r3]
 3707 0060 0133     		adds	r3, r3, #1
 3708 0062 3D4A     		ldr	r2, .L235+16
 3709 0064 1360     		str	r3, [r2]
 3710 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3711              	.L222:
 3712              	.LBE175:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3713              		.loc 1 2740 23 is_stmt 1
 3714 006a 3C4B     		ldr	r3, .L235+20
 3715 006c 1B68     		ldr	r3, [r3]
 3716              		.loc 1 2740 5
 3717 006e 3A69     		ldr	r2, [r7, #16]
ARM GAS  /tmp/ccfq1u8L.s 			page 118


 3718 0070 9A42     		cmp	r2, r3
 3719 0072 49D3     		bcc	.L225
 3720              	.L231:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3721              		.loc 1 2744 9
 3722 0074 364B     		ldr	r3, .L235+8
 3723 0076 1B68     		ldr	r3, [r3]
 3724 0078 1B68     		ldr	r3, [r3]
 3725              		.loc 1 2744 7
 3726 007a 002B     		cmp	r3, #0
 3727 007c 04D1     		bne	.L226
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3728              		.loc 1 2751 27
 3729 007e 374B     		ldr	r3, .L235+20
 3730 0080 4FF0FF32 		mov	r2, #-1
 3731 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3732              		.loc 1 2752 6
 3733 0086 3FE0     		b	.L225
 3734              	.L226:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3735              		.loc 1 2760 14
 3736 0088 314B     		ldr	r3, .L235+8
 3737 008a 1B68     		ldr	r3, [r3]
 3738 008c DB68     		ldr	r3, [r3, #12]
 3739              		.loc 1 2760 12
 3740 008e DB68     		ldr	r3, [r3, #12]
 3741 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3742              		.loc 1 2761 17
 3743 0092 BB68     		ldr	r3, [r7, #8]
 3744 0094 5B68     		ldr	r3, [r3, #4]
 3745 0096 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3746              		.loc 1 2763 8
 3747 0098 3A69     		ldr	r2, [r7, #16]
 3748 009a 7B68     		ldr	r3, [r7, #4]
 3749 009c 9A42     		cmp	r2, r3
 3750 009e 03D2     		bcs	.L227
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccfq1u8L.s 			page 119


2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3751              		.loc 1 2770 28
 3752 00a0 2E4A     		ldr	r2, .L235+20
 3753 00a2 7B68     		ldr	r3, [r7, #4]
 3754 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3755              		.loc 1 2771 7
 3756 00a6 2FE0     		b	.L225
 3757              	.L227:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3758              		.loc 1 2779 15
 3759 00a8 BB68     		ldr	r3, [r7, #8]
 3760 00aa 0433     		adds	r3, r3, #4
 3761 00ac 1846     		mov	r0, r3
 3762 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3763              		.loc 1 2783 10
 3764 00b2 BB68     		ldr	r3, [r7, #8]
 3765 00b4 9B6A     		ldr	r3, [r3, #40]
 3766              		.loc 1 2783 8
 3767 00b6 002B     		cmp	r3, #0
 3768 00b8 04D0     		beq	.L228
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3769              		.loc 1 2785 16
 3770 00ba BB68     		ldr	r3, [r7, #8]
 3771 00bc 1833     		adds	r3, r3, #24
 3772 00be 1846     		mov	r0, r3
 3773 00c0 FFF7FEFF 		bl	uxListRemove
 3774              	.L228:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3775              		.loc 1 2794 6
 3776 00c4 BB68     		ldr	r3, [r7, #8]
 3777 00c6 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccfq1u8L.s 			page 120


 3778 00c8 254B     		ldr	r3, .L235+24
 3779 00ca 1B68     		ldr	r3, [r3]
 3780 00cc 9A42     		cmp	r2, r3
 3781 00ce 03D9     		bls	.L229
 3782              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3783 00d0 BB68     		ldr	r3, [r7, #8]
 3784 00d2 DB6A     		ldr	r3, [r3, #44]
 3785 00d4 224A     		ldr	r2, .L235+24
 3786 00d6 1360     		str	r3, [r2]
 3787              	.L229:
 3788              		.loc 1 2794 6 discriminator 3
 3789 00d8 BB68     		ldr	r3, [r7, #8]
 3790 00da DA6A     		ldr	r2, [r3, #44]
 3791 00dc 1346     		mov	r3, r2
 3792 00de 9B00     		lsls	r3, r3, #2
 3793 00e0 1344     		add	r3, r3, r2
 3794 00e2 9B00     		lsls	r3, r3, #2
 3795 00e4 1F4A     		ldr	r2, .L235+28
 3796 00e6 1A44     		add	r2, r2, r3
 3797 00e8 BB68     		ldr	r3, [r7, #8]
 3798 00ea 0433     		adds	r3, r3, #4
 3799 00ec 1946     		mov	r1, r3
 3800 00ee 1046     		mov	r0, r2
 3801 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3802              		.loc 1 2804 16 is_stmt 1 discriminator 3
 3803 00f4 BB68     		ldr	r3, [r7, #8]
 3804 00f6 DA6A     		ldr	r2, [r3, #44]
 3805              		.loc 1 2804 44 discriminator 3
 3806 00f8 1B4B     		ldr	r3, .L235+32
 3807 00fa 1B68     		ldr	r3, [r3]
 3808 00fc DB6A     		ldr	r3, [r3, #44]
 3809              		.loc 1 2804 9 discriminator 3
 3810 00fe 9A42     		cmp	r2, r3
 3811 0100 B8D3     		bcc	.L231
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3812              		.loc 1 2806 24
 3813 0102 0123     		movs	r3, #1
 3814 0104 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3815              		.loc 1 2744 7
 3816 0106 B5E7     		b	.L231
 3817              	.L225:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccfq1u8L.s 			page 121


2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3818              		.loc 1 2823 8
 3819 0108 174B     		ldr	r3, .L235+32
 3820 010a 1B68     		ldr	r3, [r3]
 3821 010c DA6A     		ldr	r2, [r3, #44]
 3822 010e 1549     		ldr	r1, .L235+28
 3823 0110 1346     		mov	r3, r2
 3824 0112 9B00     		lsls	r3, r3, #2
 3825 0114 1344     		add	r3, r3, r2
 3826 0116 9B00     		lsls	r3, r3, #2
 3827 0118 0B44     		add	r3, r3, r1
 3828 011a 1B68     		ldr	r3, [r3]
 3829              		.loc 1 2823 6
 3830 011c 012B     		cmp	r3, #1
 3831 011e 01D9     		bls	.L232
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3832              		.loc 1 2825 21
 3833 0120 0123     		movs	r3, #1
 3834 0122 7B61     		str	r3, [r7, #20]
 3835              	.L232:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
ARM GAS  /tmp/ccfq1u8L.s 			page 122


2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3836              		.loc 1 2851 22
 3837 0124 114B     		ldr	r3, .L235+36
 3838 0126 1B68     		ldr	r3, [r3]
 3839              		.loc 1 2851 6
 3840 0128 002B     		cmp	r3, #0
 3841 012a 07D0     		beq	.L233
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3842              		.loc 1 2853 21
 3843 012c 0123     		movs	r3, #1
 3844 012e 7B61     		str	r3, [r7, #20]
 3845 0130 04E0     		b	.L233
 3846              	.L221:
 3847              	.LBE174:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3848              		.loc 1 2864 3
 3849 0132 0F4B     		ldr	r3, .L235+40
 3850 0134 1B68     		ldr	r3, [r3]
 3851 0136 0133     		adds	r3, r3, #1
 3852 0138 0D4A     		ldr	r2, .L235+40
 3853 013a 1360     		str	r3, [r2]
 3854              	.L233:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3855              		.loc 1 2875 9
 3856 013c 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3857              		.loc 1 2876 1
 3858 013e 1846     		mov	r0, r3
 3859 0140 1837     		adds	r7, r7, #24
 3860              	.LCFI129:
 3861              		.cfi_def_cfa_offset 8
 3862 0142 BD46     		mov	sp, r7
 3863              	.LCFI130:
 3864              		.cfi_def_cfa_register 13
 3865              		@ sp needed
ARM GAS  /tmp/ccfq1u8L.s 			page 123


 3866 0144 80BD     		pop	{r7, pc}
 3867              	.L236:
 3868 0146 00BF     		.align	2
 3869              	.L235:
 3870 0148 00000000 		.word	uxSchedulerSuspended
 3871 014c 00000000 		.word	xTickCount
 3872 0150 00000000 		.word	pxDelayedTaskList
 3873 0154 00000000 		.word	pxOverflowDelayedTaskList
 3874 0158 00000000 		.word	xNumOfOverflows
 3875 015c 00000000 		.word	xNextTaskUnblockTime
 3876 0160 00000000 		.word	uxTopReadyPriority
 3877 0164 00000000 		.word	pxReadyTasksLists
 3878 0168 00000000 		.word	pxCurrentTCB
 3879 016c 00000000 		.word	xYieldPending
 3880 0170 00000000 		.word	xPendedTicks
 3881              		.cfi_endproc
 3882              	.LFE29:
 3884              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3885              		.align	1
 3886              		.global	vTaskSwitchContext
 3887              		.syntax unified
 3888              		.thumb
 3889              		.thumb_func
 3891              	vTaskSwitchContext:
 3892              	.LFB30:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/ccfq1u8L.s 			page 124


2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
ARM GAS  /tmp/ccfq1u8L.s 			page 125


2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3893              		.loc 1 2990 1
 3894              		.cfi_startproc
 3895              		@ args = 0, pretend = 0, frame = 16
 3896              		@ frame_needed = 1, uses_anonymous_args = 0
 3897              		@ link register save eliminated.
 3898 0000 80B4     		push	{r7}
 3899              	.LCFI131:
 3900              		.cfi_def_cfa_offset 4
 3901              		.cfi_offset 7, -4
 3902 0002 85B0     		sub	sp, sp, #20
 3903              	.LCFI132:
 3904              		.cfi_def_cfa_offset 24
 3905 0004 00AF     		add	r7, sp, #0
 3906              	.LCFI133:
 3907              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3908              		.loc 1 2991 27
 3909 0006 2A4B     		ldr	r3, .L246
 3910 0008 1B68     		ldr	r3, [r3]
 3911              		.loc 1 2991 4
 3912 000a 002B     		cmp	r3, #0
 3913 000c 03D0     		beq	.L238
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3914              		.loc 1 2995 17
 3915 000e 294B     		ldr	r3, .L246+4
 3916 0010 0122     		movs	r2, #1
 3917 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  /tmp/ccfq1u8L.s 			page 126


2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
ARM GAS  /tmp/ccfq1u8L.s 			page 127


3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3918              		.loc 1 3061 1
 3919 0014 46E0     		b	.L245
 3920              	.L238:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3921              		.loc 1 2999 17
 3922 0016 274B     		ldr	r3, .L246+4
 3923 0018 0022     		movs	r2, #0
 3924 001a 1A60     		str	r2, [r3]
 3925              	.LBB178:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3926              		.loc 1 3041 3
 3927 001c 264B     		ldr	r3, .L246+8
 3928 001e 1B68     		ldr	r3, [r3]
 3929 0020 FB60     		str	r3, [r7, #12]
 3930 0022 10E0     		b	.L240
 3931              	.L243:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3932              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3933 0024 FB68     		ldr	r3, [r7, #12]
 3934 0026 002B     		cmp	r3, #0
 3935 0028 0AD1     		bne	.L241
 3936              	.LBB179:
 3937              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3938              		.loc 2 195 2 is_stmt 1
 3939              		.syntax unified
 3940              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3941 002a 4FF05003 			mov r3, #80												
 3942 002e 83F31188 		msr basepri, r3											
 3943 0032 BFF36F8F 		isb														
 3944 0036 BFF34F8F 		dsb														
 3945              	
 3946              	@ 0 "" 2
 3947              		.thumb
 3948              		.syntax unified
 3949 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3950              		.loc 2 203 1
 3951 003c 00BF     		nop
 3952              	.L242:
 3953              	.LBE180:
 3954              	.LBE179:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3955              		.loc 1 3041 3 discriminator 1
 3956 003e FEE7     		b	.L242
 3957              	.L241:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3958              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3959 0040 FB68     		ldr	r3, [r7, #12]
 3960 0042 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccfq1u8L.s 			page 128


 3961 0044 FB60     		str	r3, [r7, #12]
 3962              	.L240:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3963              		.loc 1 3041 3 discriminator 4
 3964 0046 1D49     		ldr	r1, .L246+12
 3965 0048 FA68     		ldr	r2, [r7, #12]
 3966 004a 1346     		mov	r3, r2
 3967 004c 9B00     		lsls	r3, r3, #2
 3968 004e 1344     		add	r3, r3, r2
 3969 0050 9B00     		lsls	r3, r3, #2
 3970 0052 0B44     		add	r3, r3, r1
 3971 0054 1B68     		ldr	r3, [r3]
 3972 0056 002B     		cmp	r3, #0
 3973 0058 E4D0     		beq	.L243
 3974              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3975              		.loc 1 3041 3 discriminator 6
 3976 005a FA68     		ldr	r2, [r7, #12]
 3977 005c 1346     		mov	r3, r2
 3978 005e 9B00     		lsls	r3, r3, #2
 3979 0060 1344     		add	r3, r3, r2
 3980 0062 9B00     		lsls	r3, r3, #2
 3981 0064 154A     		ldr	r2, .L246+12
 3982 0066 1344     		add	r3, r3, r2
 3983 0068 BB60     		str	r3, [r7, #8]
 3984 006a BB68     		ldr	r3, [r7, #8]
 3985 006c 5B68     		ldr	r3, [r3, #4]
 3986 006e 5A68     		ldr	r2, [r3, #4]
 3987 0070 BB68     		ldr	r3, [r7, #8]
 3988 0072 5A60     		str	r2, [r3, #4]
 3989 0074 BB68     		ldr	r3, [r7, #8]
 3990 0076 5A68     		ldr	r2, [r3, #4]
 3991 0078 BB68     		ldr	r3, [r7, #8]
 3992 007a 0833     		adds	r3, r3, #8
 3993 007c 9A42     		cmp	r2, r3
 3994 007e 04D1     		bne	.L244
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3995              		.loc 1 3041 3 discriminator 7
 3996 0080 BB68     		ldr	r3, [r7, #8]
 3997 0082 5B68     		ldr	r3, [r3, #4]
 3998 0084 5A68     		ldr	r2, [r3, #4]
 3999 0086 BB68     		ldr	r3, [r7, #8]
 4000 0088 5A60     		str	r2, [r3, #4]
 4001              	.L244:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4002              		.loc 1 3041 3 discriminator 9
 4003 008a BB68     		ldr	r3, [r7, #8]
 4004 008c 5B68     		ldr	r3, [r3, #4]
 4005 008e DB68     		ldr	r3, [r3, #12]
 4006 0090 0B4A     		ldr	r2, .L246+16
 4007 0092 1360     		str	r3, [r2]
 4008              	.LBE181:
 4009 0094 084A     		ldr	r2, .L246+8
 4010 0096 FB68     		ldr	r3, [r7, #12]
 4011 0098 1360     		str	r3, [r2]
 4012              	.LBE178:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccfq1u8L.s 			page 129


 4013              		.loc 1 3057 33 is_stmt 1 discriminator 9
 4014 009a 094B     		ldr	r3, .L246+16
 4015 009c 1B68     		ldr	r3, [r3]
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4016              		.loc 1 3057 18 discriminator 9
 4017 009e 5833     		adds	r3, r3, #88
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4018              		.loc 1 3057 16 discriminator 9
 4019 00a0 084A     		ldr	r2, .L246+20
 4020 00a2 1360     		str	r3, [r2]
 4021              	.L245:
 4022              		.loc 1 3061 1
 4023 00a4 00BF     		nop
 4024 00a6 1437     		adds	r7, r7, #20
 4025              	.LCFI134:
 4026              		.cfi_def_cfa_offset 4
 4027 00a8 BD46     		mov	sp, r7
 4028              	.LCFI135:
 4029              		.cfi_def_cfa_register 13
 4030              		@ sp needed
 4031 00aa 5DF8047B 		ldr	r7, [sp], #4
 4032              	.LCFI136:
 4033              		.cfi_restore 7
 4034              		.cfi_def_cfa_offset 0
 4035 00ae 7047     		bx	lr
 4036              	.L247:
 4037              		.align	2
 4038              	.L246:
 4039 00b0 00000000 		.word	uxSchedulerSuspended
 4040 00b4 00000000 		.word	xYieldPending
 4041 00b8 00000000 		.word	uxTopReadyPriority
 4042 00bc 00000000 		.word	pxReadyTasksLists
 4043 00c0 00000000 		.word	pxCurrentTCB
 4044 00c4 00000000 		.word	_impure_ptr
 4045              		.cfi_endproc
 4046              	.LFE30:
 4048              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4049              		.align	1
 4050              		.global	vTaskPlaceOnEventList
 4051              		.syntax unified
 4052              		.thumb
 4053              		.thumb_func
 4055              	vTaskPlaceOnEventList:
 4056              	.LFB31:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4057              		.loc 1 3065 1
 4058              		.cfi_startproc
 4059              		@ args = 0, pretend = 0, frame = 16
 4060              		@ frame_needed = 1, uses_anonymous_args = 0
 4061 0000 80B5     		push	{r7, lr}
 4062              	.LCFI137:
 4063              		.cfi_def_cfa_offset 8
 4064              		.cfi_offset 7, -8
 4065              		.cfi_offset 14, -4
ARM GAS  /tmp/ccfq1u8L.s 			page 130


 4066 0002 84B0     		sub	sp, sp, #16
 4067              	.LCFI138:
 4068              		.cfi_def_cfa_offset 24
 4069 0004 00AF     		add	r7, sp, #0
 4070              	.LCFI139:
 4071              		.cfi_def_cfa_register 7
 4072 0006 7860     		str	r0, [r7, #4]
 4073 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4074              		.loc 1 3066 2
 4075 000a 7B68     		ldr	r3, [r7, #4]
 4076 000c 002B     		cmp	r3, #0
 4077 000e 0AD1     		bne	.L249
 4078              	.LBB182:
 4079              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4080              		.loc 2 195 2
 4081              		.syntax unified
 4082              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4083 0010 4FF05003 			mov r3, #80												
 4084 0014 83F31188 		msr basepri, r3											
 4085 0018 BFF36F8F 		isb														
 4086 001c BFF34F8F 		dsb														
 4087              	
 4088              	@ 0 "" 2
 4089              		.thumb
 4090              		.syntax unified
 4091 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4092              		.loc 2 203 1
 4093 0022 00BF     		nop
 4094              	.L250:
 4095              	.LBE183:
 4096              	.LBE182:
 4097              		.loc 1 3066 2 discriminator 1
 4098 0024 FEE7     		b	.L250
 4099              	.L249:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4100              		.loc 1 3075 43
 4101 0026 074B     		ldr	r3, .L251
 4102 0028 1B68     		ldr	r3, [r3]
 4103              		.loc 1 3075 2
 4104 002a 1833     		adds	r3, r3, #24
 4105 002c 1946     		mov	r1, r3
 4106 002e 7868     		ldr	r0, [r7, #4]
 4107 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4108              		.loc 1 3077 2
ARM GAS  /tmp/ccfq1u8L.s 			page 131


 4109 0034 0121     		movs	r1, #1
 4110 0036 3868     		ldr	r0, [r7]
 4111 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4112              		.loc 1 3078 1
 4113 003c 00BF     		nop
 4114 003e 1037     		adds	r7, r7, #16
 4115              	.LCFI140:
 4116              		.cfi_def_cfa_offset 8
 4117 0040 BD46     		mov	sp, r7
 4118              	.LCFI141:
 4119              		.cfi_def_cfa_register 13
 4120              		@ sp needed
 4121 0042 80BD     		pop	{r7, pc}
 4122              	.L252:
 4123              		.align	2
 4124              	.L251:
 4125 0044 00000000 		.word	pxCurrentTCB
 4126              		.cfi_endproc
 4127              	.LFE31:
 4129              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4130              		.align	1
 4131              		.global	vTaskPlaceOnUnorderedEventList
 4132              		.syntax unified
 4133              		.thumb
 4134              		.thumb_func
 4136              	vTaskPlaceOnUnorderedEventList:
 4137              	.LFB32:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4138              		.loc 1 3082 1
 4139              		.cfi_startproc
 4140              		@ args = 0, pretend = 0, frame = 24
 4141              		@ frame_needed = 1, uses_anonymous_args = 0
 4142 0000 80B5     		push	{r7, lr}
 4143              	.LCFI142:
 4144              		.cfi_def_cfa_offset 8
 4145              		.cfi_offset 7, -8
 4146              		.cfi_offset 14, -4
 4147 0002 86B0     		sub	sp, sp, #24
 4148              	.LCFI143:
 4149              		.cfi_def_cfa_offset 32
 4150 0004 00AF     		add	r7, sp, #0
 4151              	.LCFI144:
 4152              		.cfi_def_cfa_register 7
 4153 0006 F860     		str	r0, [r7, #12]
 4154 0008 B960     		str	r1, [r7, #8]
 4155 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4156              		.loc 1 3083 2
 4157 000c FB68     		ldr	r3, [r7, #12]
 4158 000e 002B     		cmp	r3, #0
 4159 0010 0AD1     		bne	.L254
 4160              	.LBB184:
 4161              	.LBB185:
ARM GAS  /tmp/ccfq1u8L.s 			page 132


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4162              		.loc 2 195 2
 4163              		.syntax unified
 4164              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4165 0012 4FF05003 			mov r3, #80												
 4166 0016 83F31188 		msr basepri, r3											
 4167 001a BFF36F8F 		isb														
 4168 001e BFF34F8F 		dsb														
 4169              	
 4170              	@ 0 "" 2
 4171              		.thumb
 4172              		.syntax unified
 4173 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4174              		.loc 2 203 1
 4175 0024 00BF     		nop
 4176              	.L255:
 4177              	.LBE185:
 4178              	.LBE184:
 4179              		.loc 1 3083 2 discriminator 1
 4180 0026 FEE7     		b	.L255
 4181              	.L254:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4182              		.loc 1 3087 2
 4183 0028 114B     		ldr	r3, .L258
 4184 002a 1B68     		ldr	r3, [r3]
 4185 002c 002B     		cmp	r3, #0
 4186 002e 0AD1     		bne	.L256
 4187              	.LBB186:
 4188              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4189              		.loc 2 195 2
 4190              		.syntax unified
 4191              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4192 0030 4FF05003 			mov r3, #80												
 4193 0034 83F31188 		msr basepri, r3											
 4194 0038 BFF36F8F 		isb														
 4195 003c BFF34F8F 		dsb														
 4196              	
 4197              	@ 0 "" 2
 4198              		.thumb
 4199              		.syntax unified
 4200 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4201              		.loc 2 203 1
 4202 0042 00BF     		nop
 4203              	.L257:
 4204              	.LBE187:
 4205              	.LBE186:
 4206              		.loc 1 3087 2 discriminator 2
 4207 0044 FEE7     		b	.L257
 4208              	.L256:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
ARM GAS  /tmp/ccfq1u8L.s 			page 133


3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4209              		.loc 1 3092 2
 4210 0046 0B4B     		ldr	r3, .L258+4
 4211 0048 1B68     		ldr	r3, [r3]
 4212 004a BA68     		ldr	r2, [r7, #8]
 4213 004c 42F00042 		orr	r2, r2, #-2147483648
 4214 0050 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4215              		.loc 1 3099 46
 4216 0052 084B     		ldr	r3, .L258+4
 4217 0054 1B68     		ldr	r3, [r3]
 4218              		.loc 1 3099 2
 4219 0056 1833     		adds	r3, r3, #24
 4220 0058 1946     		mov	r1, r3
 4221 005a F868     		ldr	r0, [r7, #12]
 4222 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4223              		.loc 1 3101 2
 4224 0060 0121     		movs	r1, #1
 4225 0062 7868     		ldr	r0, [r7, #4]
 4226 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4227              		.loc 1 3102 1
 4228 0068 00BF     		nop
 4229 006a 1837     		adds	r7, r7, #24
 4230              	.LCFI145:
 4231              		.cfi_def_cfa_offset 8
 4232 006c BD46     		mov	sp, r7
 4233              	.LCFI146:
 4234              		.cfi_def_cfa_register 13
 4235              		@ sp needed
 4236 006e 80BD     		pop	{r7, pc}
 4237              	.L259:
 4238              		.align	2
 4239              	.L258:
 4240 0070 00000000 		.word	uxSchedulerSuspended
 4241 0074 00000000 		.word	pxCurrentTCB
 4242              		.cfi_endproc
 4243              	.LFE32:
 4245              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4246              		.align	1
 4247              		.global	vTaskPlaceOnEventListRestricted
 4248              		.syntax unified
 4249              		.thumb
 4250              		.thumb_func
 4252              	vTaskPlaceOnEventListRestricted:
 4253              	.LFB33:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccfq1u8L.s 			page 134


3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4254              		.loc 1 3108 2
 4255              		.cfi_startproc
 4256              		@ args = 0, pretend = 0, frame = 24
 4257              		@ frame_needed = 1, uses_anonymous_args = 0
 4258 0000 80B5     		push	{r7, lr}
 4259              	.LCFI147:
 4260              		.cfi_def_cfa_offset 8
 4261              		.cfi_offset 7, -8
 4262              		.cfi_offset 14, -4
 4263 0002 86B0     		sub	sp, sp, #24
 4264              	.LCFI148:
 4265              		.cfi_def_cfa_offset 32
 4266 0004 00AF     		add	r7, sp, #0
 4267              	.LCFI149:
 4268              		.cfi_def_cfa_register 7
 4269 0006 F860     		str	r0, [r7, #12]
 4270 0008 B960     		str	r1, [r7, #8]
 4271 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4272              		.loc 1 3109 3
 4273 000c FB68     		ldr	r3, [r7, #12]
 4274 000e 002B     		cmp	r3, #0
 4275 0010 0AD1     		bne	.L261
 4276              	.LBB188:
 4277              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4278              		.loc 2 195 2
 4279              		.syntax unified
 4280              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4281 0012 4FF05003 			mov r3, #80												
 4282 0016 83F31188 		msr basepri, r3											
 4283 001a BFF36F8F 		isb														
 4284 001e BFF34F8F 		dsb														
 4285              	
 4286              	@ 0 "" 2
 4287              		.thumb
 4288              		.syntax unified
 4289 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4290              		.loc 2 203 1
 4291 0024 00BF     		nop
 4292              	.L262:
 4293              	.LBE189:
 4294              	.LBE188:
 4295              		.loc 1 3109 3 discriminator 1
 4296 0026 FEE7     		b	.L262
 4297              	.L261:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
ARM GAS  /tmp/ccfq1u8L.s 			page 135


3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4298              		.loc 1 3121 47
 4299 0028 0A4B     		ldr	r3, .L264
 4300 002a 1B68     		ldr	r3, [r3]
 4301              		.loc 1 3121 3
 4302 002c 1833     		adds	r3, r3, #24
 4303 002e 1946     		mov	r1, r3
 4304 0030 F868     		ldr	r0, [r7, #12]
 4305 0032 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4306              		.loc 1 3126 5
 4307 0036 7B68     		ldr	r3, [r7, #4]
 4308 0038 002B     		cmp	r3, #0
 4309 003a 02D0     		beq	.L263
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4310              		.loc 1 3128 17
 4311 003c 4FF0FF33 		mov	r3, #-1
 4312 0040 BB60     		str	r3, [r7, #8]
 4313              	.L263:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4314              		.loc 1 3132 3
 4315 0042 7968     		ldr	r1, [r7, #4]
 4316 0044 B868     		ldr	r0, [r7, #8]
 4317 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4318              		.loc 1 3133 2
 4319 004a 00BF     		nop
 4320 004c 1837     		adds	r7, r7, #24
 4321              	.LCFI150:
 4322              		.cfi_def_cfa_offset 8
 4323 004e BD46     		mov	sp, r7
 4324              	.LCFI151:
 4325              		.cfi_def_cfa_register 13
 4326              		@ sp needed
 4327 0050 80BD     		pop	{r7, pc}
 4328              	.L265:
 4329 0052 00BF     		.align	2
 4330              	.L264:
 4331 0054 00000000 		.word	pxCurrentTCB
 4332              		.cfi_endproc
 4333              	.LFE33:
 4335              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4336              		.align	1
ARM GAS  /tmp/ccfq1u8L.s 			page 136


 4337              		.global	xTaskRemoveFromEventList
 4338              		.syntax unified
 4339              		.thumb
 4340              		.thumb_func
 4342              	xTaskRemoveFromEventList:
 4343              	.LFB34:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4344              		.loc 1 3139 1
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 24
 4347              		@ frame_needed = 1, uses_anonymous_args = 0
 4348 0000 80B5     		push	{r7, lr}
 4349              	.LCFI152:
 4350              		.cfi_def_cfa_offset 8
 4351              		.cfi_offset 7, -8
 4352              		.cfi_offset 14, -4
 4353 0002 86B0     		sub	sp, sp, #24
 4354              	.LCFI153:
 4355              		.cfi_def_cfa_offset 32
 4356 0004 00AF     		add	r7, sp, #0
 4357              	.LCFI154:
 4358              		.cfi_def_cfa_register 7
 4359 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4360              		.loc 1 3156 19
 4361 0008 7B68     		ldr	r3, [r7, #4]
 4362 000a DB68     		ldr	r3, [r3, #12]
 4363              		.loc 1 3156 17
 4364 000c DB68     		ldr	r3, [r3, #12]
 4365 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4366              		.loc 1 3157 2
 4367 0010 3B69     		ldr	r3, [r7, #16]
 4368 0012 002B     		cmp	r3, #0
 4369 0014 0AD1     		bne	.L267
 4370              	.LBB190:
ARM GAS  /tmp/ccfq1u8L.s 			page 137


 4371              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4372              		.loc 2 195 2
 4373              		.syntax unified
 4374              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4375 0016 4FF05003 			mov r3, #80												
 4376 001a 83F31188 		msr basepri, r3											
 4377 001e BFF36F8F 		isb														
 4378 0022 BFF34F8F 		dsb														
 4379              	
 4380              	@ 0 "" 2
 4381              		.thumb
 4382              		.syntax unified
 4383 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4384              		.loc 2 203 1
 4385 0028 00BF     		nop
 4386              	.L268:
 4387              	.LBE191:
 4388              	.LBE190:
 4389              		.loc 1 3157 2 discriminator 1
 4390 002a FEE7     		b	.L268
 4391              	.L267:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4392              		.loc 1 3158 11
 4393 002c 3B69     		ldr	r3, [r7, #16]
 4394 002e 1833     		adds	r3, r3, #24
 4395 0030 1846     		mov	r0, r3
 4396 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4397              		.loc 1 3160 27
 4398 0036 1E4B     		ldr	r3, .L275
 4399 0038 1B68     		ldr	r3, [r3]
 4400              		.loc 1 3160 4
 4401 003a 002B     		cmp	r3, #0
 4402 003c 1DD1     		bne	.L269
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4403              		.loc 1 3162 12
 4404 003e 3B69     		ldr	r3, [r7, #16]
 4405 0040 0433     		adds	r3, r3, #4
 4406 0042 1846     		mov	r0, r3
 4407 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4408              		.loc 1 3163 3
 4409 0048 3B69     		ldr	r3, [r7, #16]
 4410 004a DA6A     		ldr	r2, [r3, #44]
 4411 004c 194B     		ldr	r3, .L275+4
 4412 004e 1B68     		ldr	r3, [r3]
 4413 0050 9A42     		cmp	r2, r3
 4414 0052 03D9     		bls	.L270
 4415              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4416 0054 3B69     		ldr	r3, [r7, #16]
 4417 0056 DB6A     		ldr	r3, [r3, #44]
 4418 0058 164A     		ldr	r2, .L275+4
 4419 005a 1360     		str	r3, [r2]
ARM GAS  /tmp/ccfq1u8L.s 			page 138


 4420              	.L270:
 4421              		.loc 1 3163 3 discriminator 3
 4422 005c 3B69     		ldr	r3, [r7, #16]
 4423 005e DA6A     		ldr	r2, [r3, #44]
 4424 0060 1346     		mov	r3, r2
 4425 0062 9B00     		lsls	r3, r3, #2
 4426 0064 1344     		add	r3, r3, r2
 4427 0066 9B00     		lsls	r3, r3, #2
 4428 0068 134A     		ldr	r2, .L275+8
 4429 006a 1A44     		add	r2, r2, r3
 4430 006c 3B69     		ldr	r3, [r7, #16]
 4431 006e 0433     		adds	r3, r3, #4
 4432 0070 1946     		mov	r1, r3
 4433 0072 1046     		mov	r0, r2
 4434 0074 FFF7FEFF 		bl	vListInsertEnd
 4435 0078 05E0     		b	.L271
 4436              	.L269:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4437              		.loc 1 3183 3 is_stmt 1
 4438 007a 3B69     		ldr	r3, [r7, #16]
 4439 007c 1833     		adds	r3, r3, #24
 4440 007e 1946     		mov	r1, r3
 4441 0080 0E48     		ldr	r0, .L275+12
 4442 0082 FFF7FEFF 		bl	vListInsertEnd
 4443              	.L271:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4444              		.loc 1 3186 20
 4445 0086 3B69     		ldr	r3, [r7, #16]
 4446 0088 DA6A     		ldr	r2, [r3, #44]
 4447              		.loc 1 3186 47
 4448 008a 0D4B     		ldr	r3, .L275+16
 4449 008c 1B68     		ldr	r3, [r3]
 4450 008e DB6A     		ldr	r3, [r3, #44]
 4451              		.loc 1 3186 4
 4452 0090 9A42     		cmp	r2, r3
 4453 0092 05D9     		bls	.L272
ARM GAS  /tmp/ccfq1u8L.s 			page 139


3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4454              		.loc 1 3191 11
 4455 0094 0123     		movs	r3, #1
 4456 0096 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4457              		.loc 1 3195 17
 4458 0098 0A4B     		ldr	r3, .L275+20
 4459 009a 0122     		movs	r2, #1
 4460 009c 1A60     		str	r2, [r3]
 4461 009e 01E0     		b	.L273
 4462              	.L272:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4463              		.loc 1 3199 11
 4464 00a0 0023     		movs	r3, #0
 4465 00a2 7B61     		str	r3, [r7, #20]
 4466              	.L273:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4467              		.loc 1 3202 9
 4468 00a4 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4469              		.loc 1 3203 1
 4470 00a6 1846     		mov	r0, r3
 4471 00a8 1837     		adds	r7, r7, #24
 4472              	.LCFI155:
 4473              		.cfi_def_cfa_offset 8
 4474 00aa BD46     		mov	sp, r7
 4475              	.LCFI156:
 4476              		.cfi_def_cfa_register 13
 4477              		@ sp needed
 4478 00ac 80BD     		pop	{r7, pc}
 4479              	.L276:
 4480 00ae 00BF     		.align	2
 4481              	.L275:
 4482 00b0 00000000 		.word	uxSchedulerSuspended
 4483 00b4 00000000 		.word	uxTopReadyPriority
 4484 00b8 00000000 		.word	pxReadyTasksLists
 4485 00bc 00000000 		.word	xPendingReadyList
 4486 00c0 00000000 		.word	pxCurrentTCB
 4487 00c4 00000000 		.word	xYieldPending
 4488              		.cfi_endproc
 4489              	.LFE34:
 4491              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4492              		.align	1
 4493              		.global	vTaskRemoveFromUnorderedEventList
 4494              		.syntax unified
ARM GAS  /tmp/ccfq1u8L.s 			page 140


 4495              		.thumb
 4496              		.thumb_func
 4498              	vTaskRemoveFromUnorderedEventList:
 4499              	.LFB35:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4500              		.loc 1 3207 1
 4501              		.cfi_startproc
 4502              		@ args = 0, pretend = 0, frame = 24
 4503              		@ frame_needed = 1, uses_anonymous_args = 0
 4504 0000 80B5     		push	{r7, lr}
 4505              	.LCFI157:
 4506              		.cfi_def_cfa_offset 8
 4507              		.cfi_offset 7, -8
 4508              		.cfi_offset 14, -4
 4509 0002 86B0     		sub	sp, sp, #24
 4510              	.LCFI158:
 4511              		.cfi_def_cfa_offset 32
 4512 0004 00AF     		add	r7, sp, #0
 4513              	.LCFI159:
 4514              		.cfi_def_cfa_register 7
 4515 0006 7860     		str	r0, [r7, #4]
 4516 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4517              		.loc 1 3212 2
 4518 000a 294B     		ldr	r3, .L285
 4519 000c 1B68     		ldr	r3, [r3]
 4520 000e 002B     		cmp	r3, #0
 4521 0010 0AD1     		bne	.L278
 4522              	.LBB192:
 4523              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4524              		.loc 2 195 2
 4525              		.syntax unified
 4526              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4527 0012 4FF05003 			mov r3, #80												
 4528 0016 83F31188 		msr basepri, r3											
 4529 001a BFF36F8F 		isb														
 4530 001e BFF34F8F 		dsb														
 4531              	
 4532              	@ 0 "" 2
 4533              		.thumb
 4534              		.syntax unified
 4535 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4536              		.loc 2 203 1
 4537 0024 00BF     		nop
 4538              	.L279:
 4539              	.LBE193:
 4540              	.LBE192:
 4541              		.loc 1 3212 2 discriminator 1
ARM GAS  /tmp/ccfq1u8L.s 			page 141


 4542 0026 FEE7     		b	.L279
 4543              	.L278:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4544              		.loc 1 3215 2
 4545 0028 3B68     		ldr	r3, [r7]
 4546 002a 43F00042 		orr	r2, r3, #-2147483648
 4547 002e 7B68     		ldr	r3, [r7, #4]
 4548 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4549              		.loc 1 3219 17
 4550 0032 7B68     		ldr	r3, [r7, #4]
 4551 0034 DB68     		ldr	r3, [r3, #12]
 4552 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4553              		.loc 1 3220 2
 4554 0038 7B69     		ldr	r3, [r7, #20]
 4555 003a 002B     		cmp	r3, #0
 4556 003c 0AD1     		bne	.L280
 4557              	.LBB194:
 4558              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4559              		.loc 2 195 2
 4560              		.syntax unified
 4561              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4562 003e 4FF05003 			mov r3, #80												
 4563 0042 83F31188 		msr basepri, r3											
 4564 0046 BFF36F8F 		isb														
 4565 004a BFF34F8F 		dsb														
 4566              	
 4567              	@ 0 "" 2
 4568              		.thumb
 4569              		.syntax unified
 4570 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4571              		.loc 2 203 1
 4572 0050 00BF     		nop
 4573              	.L281:
 4574              	.LBE195:
 4575              	.LBE194:
 4576              		.loc 1 3220 2 discriminator 2
 4577 0052 FEE7     		b	.L281
 4578              	.L280:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4579              		.loc 1 3221 11
 4580 0054 7868     		ldr	r0, [r7, #4]
 4581 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
ARM GAS  /tmp/ccfq1u8L.s 			page 142


3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4582              		.loc 1 3240 11
 4583 005a 7B69     		ldr	r3, [r7, #20]
 4584 005c 0433     		adds	r3, r3, #4
 4585 005e 1846     		mov	r0, r3
 4586 0060 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4587              		.loc 1 3241 2
 4588 0064 7B69     		ldr	r3, [r7, #20]
 4589 0066 DA6A     		ldr	r2, [r3, #44]
 4590 0068 124B     		ldr	r3, .L285+4
 4591 006a 1B68     		ldr	r3, [r3]
 4592 006c 9A42     		cmp	r2, r3
 4593 006e 03D9     		bls	.L282
 4594              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4595 0070 7B69     		ldr	r3, [r7, #20]
 4596 0072 DB6A     		ldr	r3, [r3, #44]
 4597 0074 0F4A     		ldr	r2, .L285+4
 4598 0076 1360     		str	r3, [r2]
 4599              	.L282:
 4600              		.loc 1 3241 2 discriminator 3
 4601 0078 7B69     		ldr	r3, [r7, #20]
 4602 007a DA6A     		ldr	r2, [r3, #44]
 4603 007c 1346     		mov	r3, r2
 4604 007e 9B00     		lsls	r3, r3, #2
 4605 0080 1344     		add	r3, r3, r2
 4606 0082 9B00     		lsls	r3, r3, #2
 4607 0084 0C4A     		ldr	r2, .L285+8
 4608 0086 1A44     		add	r2, r2, r3
 4609 0088 7B69     		ldr	r3, [r7, #20]
 4610 008a 0433     		adds	r3, r3, #4
 4611 008c 1946     		mov	r1, r3
 4612 008e 1046     		mov	r0, r2
 4613 0090 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4614              		.loc 1 3243 20 is_stmt 1 discriminator 3
 4615 0094 7B69     		ldr	r3, [r7, #20]
 4616 0096 DA6A     		ldr	r2, [r3, #44]
 4617              		.loc 1 3243 47 discriminator 3
 4618 0098 084B     		ldr	r3, .L285+12
 4619 009a 1B68     		ldr	r3, [r3]
 4620 009c DB6A     		ldr	r3, [r3, #44]
 4621              		.loc 1 3243 4 discriminator 3
 4622 009e 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 143


 4623 00a0 02D9     		bls	.L284
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4624              		.loc 1 3249 17
 4625 00a2 074B     		ldr	r3, .L285+16
 4626 00a4 0122     		movs	r2, #1
 4627 00a6 1A60     		str	r2, [r3]
 4628              	.L284:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4629              		.loc 1 3251 1
 4630 00a8 00BF     		nop
 4631 00aa 1837     		adds	r7, r7, #24
 4632              	.LCFI160:
 4633              		.cfi_def_cfa_offset 8
 4634 00ac BD46     		mov	sp, r7
 4635              	.LCFI161:
 4636              		.cfi_def_cfa_register 13
 4637              		@ sp needed
 4638 00ae 80BD     		pop	{r7, pc}
 4639              	.L286:
 4640              		.align	2
 4641              	.L285:
 4642 00b0 00000000 		.word	uxSchedulerSuspended
 4643 00b4 00000000 		.word	uxTopReadyPriority
 4644 00b8 00000000 		.word	pxReadyTasksLists
 4645 00bc 00000000 		.word	pxCurrentTCB
 4646 00c0 00000000 		.word	xYieldPending
 4647              		.cfi_endproc
 4648              	.LFE35:
 4650              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4651              		.align	1
 4652              		.global	vTaskSetTimeOutState
 4653              		.syntax unified
 4654              		.thumb
 4655              		.thumb_func
 4657              	vTaskSetTimeOutState:
 4658              	.LFB36:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4659              		.loc 1 3255 1
 4660              		.cfi_startproc
 4661              		@ args = 0, pretend = 0, frame = 16
 4662              		@ frame_needed = 1, uses_anonymous_args = 0
 4663 0000 80B5     		push	{r7, lr}
 4664              	.LCFI162:
 4665              		.cfi_def_cfa_offset 8
 4666              		.cfi_offset 7, -8
 4667              		.cfi_offset 14, -4
 4668 0002 84B0     		sub	sp, sp, #16
 4669              	.LCFI163:
ARM GAS  /tmp/ccfq1u8L.s 			page 144


 4670              		.cfi_def_cfa_offset 24
 4671 0004 00AF     		add	r7, sp, #0
 4672              	.LCFI164:
 4673              		.cfi_def_cfa_register 7
 4674 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4675              		.loc 1 3256 2
 4676 0008 7B68     		ldr	r3, [r7, #4]
 4677 000a 002B     		cmp	r3, #0
 4678 000c 0AD1     		bne	.L288
 4679              	.LBB196:
 4680              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4681              		.loc 2 195 2
 4682              		.syntax unified
 4683              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4684 000e 4FF05003 			mov r3, #80												
 4685 0012 83F31188 		msr basepri, r3											
 4686 0016 BFF36F8F 		isb														
 4687 001a BFF34F8F 		dsb														
 4688              	
 4689              	@ 0 "" 2
 4690              		.thumb
 4691              		.syntax unified
 4692 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4693              		.loc 2 203 1
 4694 0020 00BF     		nop
 4695              	.L289:
 4696              	.LBE197:
 4697              	.LBE196:
 4698              		.loc 1 3256 2 discriminator 1
 4699 0022 FEE7     		b	.L289
 4700              	.L288:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4701              		.loc 1 3257 2
 4702 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4703              		.loc 1 3259 29
 4704 0028 064B     		ldr	r3, .L290
 4705 002a 1A68     		ldr	r2, [r3]
 4706 002c 7B68     		ldr	r3, [r7, #4]
 4707 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4708              		.loc 1 3260 30
 4709 0030 054B     		ldr	r3, .L290+4
 4710 0032 1A68     		ldr	r2, [r3]
 4711 0034 7B68     		ldr	r3, [r7, #4]
 4712 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4713              		.loc 1 3262 2
 4714 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4715              		.loc 1 3263 1
 4716 003c 00BF     		nop
ARM GAS  /tmp/ccfq1u8L.s 			page 145


 4717 003e 1037     		adds	r7, r7, #16
 4718              	.LCFI165:
 4719              		.cfi_def_cfa_offset 8
 4720 0040 BD46     		mov	sp, r7
 4721              	.LCFI166:
 4722              		.cfi_def_cfa_register 13
 4723              		@ sp needed
 4724 0042 80BD     		pop	{r7, pc}
 4725              	.L291:
 4726              		.align	2
 4727              	.L290:
 4728 0044 00000000 		.word	xNumOfOverflows
 4729 0048 00000000 		.word	xTickCount
 4730              		.cfi_endproc
 4731              	.LFE36:
 4733              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4734              		.align	1
 4735              		.global	vTaskInternalSetTimeOutState
 4736              		.syntax unified
 4737              		.thumb
 4738              		.thumb_func
 4740              	vTaskInternalSetTimeOutState:
 4741              	.LFB37:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4742              		.loc 1 3267 1
 4743              		.cfi_startproc
 4744              		@ args = 0, pretend = 0, frame = 8
 4745              		@ frame_needed = 1, uses_anonymous_args = 0
 4746              		@ link register save eliminated.
 4747 0000 80B4     		push	{r7}
 4748              	.LCFI167:
 4749              		.cfi_def_cfa_offset 4
 4750              		.cfi_offset 7, -4
 4751 0002 83B0     		sub	sp, sp, #12
 4752              	.LCFI168:
 4753              		.cfi_def_cfa_offset 16
 4754 0004 00AF     		add	r7, sp, #0
 4755              	.LCFI169:
 4756              		.cfi_def_cfa_register 7
 4757 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4758              		.loc 1 3269 28
 4759 0008 064B     		ldr	r3, .L293
 4760 000a 1A68     		ldr	r2, [r3]
 4761 000c 7B68     		ldr	r3, [r7, #4]
 4762 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4763              		.loc 1 3270 29
 4764 0010 054B     		ldr	r3, .L293+4
 4765 0012 1A68     		ldr	r2, [r3]
 4766 0014 7B68     		ldr	r3, [r7, #4]
 4767 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccfq1u8L.s 			page 146


 4768              		.loc 1 3271 1
 4769 0018 00BF     		nop
 4770 001a 0C37     		adds	r7, r7, #12
 4771              	.LCFI170:
 4772              		.cfi_def_cfa_offset 4
 4773 001c BD46     		mov	sp, r7
 4774              	.LCFI171:
 4775              		.cfi_def_cfa_register 13
 4776              		@ sp needed
 4777 001e 5DF8047B 		ldr	r7, [sp], #4
 4778              	.LCFI172:
 4779              		.cfi_restore 7
 4780              		.cfi_def_cfa_offset 0
 4781 0022 7047     		bx	lr
 4782              	.L294:
 4783              		.align	2
 4784              	.L293:
 4785 0024 00000000 		.word	xNumOfOverflows
 4786 0028 00000000 		.word	xTickCount
 4787              		.cfi_endproc
 4788              	.LFE37:
 4790              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4791              		.align	1
 4792              		.global	xTaskCheckForTimeOut
 4793              		.syntax unified
 4794              		.thumb
 4795              		.thumb_func
 4797              	xTaskCheckForTimeOut:
 4798              	.LFB38:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4799              		.loc 1 3275 1
 4800              		.cfi_startproc
 4801              		@ args = 0, pretend = 0, frame = 32
 4802              		@ frame_needed = 1, uses_anonymous_args = 0
 4803 0000 80B5     		push	{r7, lr}
 4804              	.LCFI173:
 4805              		.cfi_def_cfa_offset 8
 4806              		.cfi_offset 7, -8
 4807              		.cfi_offset 14, -4
 4808 0002 88B0     		sub	sp, sp, #32
 4809              	.LCFI174:
 4810              		.cfi_def_cfa_offset 40
 4811 0004 00AF     		add	r7, sp, #0
 4812              	.LCFI175:
 4813              		.cfi_def_cfa_register 7
 4814 0006 7860     		str	r0, [r7, #4]
 4815 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4816              		.loc 1 3278 2
 4817 000a 7B68     		ldr	r3, [r7, #4]
 4818 000c 002B     		cmp	r3, #0
 4819 000e 0AD1     		bne	.L296
ARM GAS  /tmp/ccfq1u8L.s 			page 147


 4820              	.LBB198:
 4821              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4822              		.loc 2 195 2
 4823              		.syntax unified
 4824              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4825 0010 4FF05003 			mov r3, #80												
 4826 0014 83F31188 		msr basepri, r3											
 4827 0018 BFF36F8F 		isb														
 4828 001c BFF34F8F 		dsb														
 4829              	
 4830              	@ 0 "" 2
 4831              		.thumb
 4832              		.syntax unified
 4833 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4834              		.loc 2 203 1
 4835 0022 00BF     		nop
 4836              	.L297:
 4837              	.LBE199:
 4838              	.LBE198:
 4839              		.loc 1 3278 2 discriminator 1
 4840 0024 FEE7     		b	.L297
 4841              	.L296:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4842              		.loc 1 3279 2
 4843 0026 3B68     		ldr	r3, [r7]
 4844 0028 002B     		cmp	r3, #0
 4845 002a 0AD1     		bne	.L298
 4846              	.LBB200:
 4847              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4848              		.loc 2 195 2
 4849              		.syntax unified
 4850              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4851 002c 4FF05003 			mov r3, #80												
 4852 0030 83F31188 		msr basepri, r3											
 4853 0034 BFF36F8F 		isb														
 4854 0038 BFF34F8F 		dsb														
 4855              	
 4856              	@ 0 "" 2
 4857              		.thumb
 4858              		.syntax unified
 4859 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4860              		.loc 2 203 1
 4861 003e 00BF     		nop
 4862              	.L299:
 4863              	.LBE201:
 4864              	.LBE200:
 4865              		.loc 1 3279 2 discriminator 2
 4866 0040 FEE7     		b	.L299
 4867              	.L298:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4868              		.loc 1 3281 2
 4869 0042 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccfq1u8L.s 			page 148


 4870              	.LBB202:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4871              		.loc 1 3284 20
 4872 0046 1D4B     		ldr	r3, .L305
 4873 0048 1B68     		ldr	r3, [r3]
 4874 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4875              		.loc 1 3285 62
 4876 004c 7B68     		ldr	r3, [r7, #4]
 4877 004e 5B68     		ldr	r3, [r3, #4]
 4878              		.loc 1 3285 20
 4879 0050 BA69     		ldr	r2, [r7, #24]
 4880 0052 D31A     		subs	r3, r2, r3
 4881 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4882              		.loc 1 3299 8
 4883 0056 3B68     		ldr	r3, [r7]
 4884 0058 1B68     		ldr	r3, [r3]
 4885              		.loc 1 3299 6
 4886 005a B3F1FF3F 		cmp	r3, #-1
 4887 005e 02D1     		bne	.L300
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4888              		.loc 1 3304 13
 4889 0060 0023     		movs	r3, #0
 4890 0062 FB61     		str	r3, [r7, #28]
 4891 0064 23E0     		b	.L301
 4892              	.L300:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4893              		.loc 1 3309 37
 4894 0066 7B68     		ldr	r3, [r7, #4]
 4895 0068 1A68     		ldr	r2, [r3]
 4896              		.loc 1 3309 25
 4897 006a 154B     		ldr	r3, .L305+4
 4898 006c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 149


 4899              		.loc 1 3309 5
 4900 006e 9A42     		cmp	r2, r3
 4901 0070 07D0     		beq	.L302
 4902              		.loc 1 3309 89 discriminator 1
 4903 0072 7B68     		ldr	r3, [r7, #4]
 4904 0074 5B68     		ldr	r3, [r3, #4]
 4905              		.loc 1 3309 56 discriminator 1
 4906 0076 BA69     		ldr	r2, [r7, #24]
 4907 0078 9A42     		cmp	r2, r3
 4908 007a 02D3     		bcc	.L302
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4909              		.loc 1 3316 12
 4910 007c 0123     		movs	r3, #1
 4911 007e FB61     		str	r3, [r7, #28]
 4912 0080 15E0     		b	.L301
 4913              	.L302:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4914              		.loc 1 3318 27
 4915 0082 3B68     		ldr	r3, [r7]
 4916 0084 1B68     		ldr	r3, [r3]
 4917              		.loc 1 3318 10
 4918 0086 7A69     		ldr	r2, [r7, #20]
 4919 0088 9A42     		cmp	r2, r3
 4920 008a 0BD2     		bcs	.L303
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4921              		.loc 1 3321 19
 4922 008c 3B68     		ldr	r3, [r7]
 4923 008e 1A68     		ldr	r2, [r3]
 4924 0090 7B69     		ldr	r3, [r7, #20]
 4925 0092 D21A     		subs	r2, r2, r3
 4926 0094 3B68     		ldr	r3, [r7]
 4927 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4928              		.loc 1 3322 4
 4929 0098 7868     		ldr	r0, [r7, #4]
 4930 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4931              		.loc 1 3323 12
 4932 009e 0023     		movs	r3, #0
 4933 00a0 FB61     		str	r3, [r7, #28]
 4934 00a2 04E0     		b	.L301
 4935              	.L303:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4936              		.loc 1 3327 19
 4937 00a4 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccfq1u8L.s 			page 150


 4938 00a6 0022     		movs	r2, #0
 4939 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4940              		.loc 1 3328 12
 4941 00aa 0123     		movs	r3, #1
 4942 00ac FB61     		str	r3, [r7, #28]
 4943              	.L301:
 4944              	.LBE202:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4945              		.loc 1 3331 2
 4946 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4947              		.loc 1 3333 9
 4948 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4949              		.loc 1 3334 1
 4950 00b4 1846     		mov	r0, r3
 4951 00b6 2037     		adds	r7, r7, #32
 4952              	.LCFI176:
 4953              		.cfi_def_cfa_offset 8
 4954 00b8 BD46     		mov	sp, r7
 4955              	.LCFI177:
 4956              		.cfi_def_cfa_register 13
 4957              		@ sp needed
 4958 00ba 80BD     		pop	{r7, pc}
 4959              	.L306:
 4960              		.align	2
 4961              	.L305:
 4962 00bc 00000000 		.word	xTickCount
 4963 00c0 00000000 		.word	xNumOfOverflows
 4964              		.cfi_endproc
 4965              	.LFE38:
 4967              		.section	.text.vTaskMissedYield,"ax",%progbits
 4968              		.align	1
 4969              		.global	vTaskMissedYield
 4970              		.syntax unified
 4971              		.thumb
 4972              		.thumb_func
 4974              	vTaskMissedYield:
 4975              	.LFB39:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4976              		.loc 1 3338 1
 4977              		.cfi_startproc
 4978              		@ args = 0, pretend = 0, frame = 0
 4979              		@ frame_needed = 1, uses_anonymous_args = 0
 4980              		@ link register save eliminated.
 4981 0000 80B4     		push	{r7}
 4982              	.LCFI178:
 4983              		.cfi_def_cfa_offset 4
 4984              		.cfi_offset 7, -4
 4985 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 151


 4986              	.LCFI179:
 4987              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4988              		.loc 1 3339 16
 4989 0004 034B     		ldr	r3, .L308
 4990 0006 0122     		movs	r2, #1
 4991 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4992              		.loc 1 3340 1
 4993 000a 00BF     		nop
 4994 000c BD46     		mov	sp, r7
 4995              	.LCFI180:
 4996              		.cfi_def_cfa_register 13
 4997              		@ sp needed
 4998 000e 5DF8047B 		ldr	r7, [sp], #4
 4999              	.LCFI181:
 5000              		.cfi_restore 7
 5001              		.cfi_def_cfa_offset 0
 5002 0012 7047     		bx	lr
 5003              	.L309:
 5004              		.align	2
 5005              	.L308:
 5006 0014 00000000 		.word	xYieldPending
 5007              		.cfi_endproc
 5008              	.LFE39:
 5010              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5011              		.align	1
 5012              		.global	uxTaskGetTaskNumber
 5013              		.syntax unified
 5014              		.thumb
 5015              		.thumb_func
 5017              	uxTaskGetTaskNumber:
 5018              	.LFB40:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5019              		.loc 1 3346 2
 5020              		.cfi_startproc
 5021              		@ args = 0, pretend = 0, frame = 16
 5022              		@ frame_needed = 1, uses_anonymous_args = 0
 5023              		@ link register save eliminated.
 5024 0000 80B4     		push	{r7}
 5025              	.LCFI182:
 5026              		.cfi_def_cfa_offset 4
 5027              		.cfi_offset 7, -4
 5028 0002 85B0     		sub	sp, sp, #20
 5029              	.LCFI183:
 5030              		.cfi_def_cfa_offset 24
 5031 0004 00AF     		add	r7, sp, #0
 5032              	.LCFI184:
 5033              		.cfi_def_cfa_register 7
 5034 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  /tmp/ccfq1u8L.s 			page 152


3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5035              		.loc 1 3350 5
 5036 0008 7B68     		ldr	r3, [r7, #4]
 5037 000a 002B     		cmp	r3, #0
 5038 000c 05D0     		beq	.L311
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5039              		.loc 1 3352 10
 5040 000e 7B68     		ldr	r3, [r7, #4]
 5041 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5042              		.loc 1 3353 13
 5043 0012 BB68     		ldr	r3, [r7, #8]
 5044 0014 9B6C     		ldr	r3, [r3, #72]
 5045 0016 FB60     		str	r3, [r7, #12]
 5046 0018 01E0     		b	.L312
 5047              	.L311:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5048              		.loc 1 3357 13
 5049 001a 0023     		movs	r3, #0
 5050 001c FB60     		str	r3, [r7, #12]
 5051              	.L312:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5052              		.loc 1 3360 10
 5053 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5054              		.loc 1 3361 2
 5055 0020 1846     		mov	r0, r3
 5056 0022 1437     		adds	r7, r7, #20
 5057              	.LCFI185:
 5058              		.cfi_def_cfa_offset 4
 5059 0024 BD46     		mov	sp, r7
 5060              	.LCFI186:
 5061              		.cfi_def_cfa_register 13
 5062              		@ sp needed
 5063 0026 5DF8047B 		ldr	r7, [sp], #4
 5064              	.LCFI187:
 5065              		.cfi_restore 7
 5066              		.cfi_def_cfa_offset 0
 5067 002a 7047     		bx	lr
 5068              		.cfi_endproc
 5069              	.LFE40:
 5071              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5072              		.align	1
 5073              		.global	vTaskSetTaskNumber
 5074              		.syntax unified
 5075              		.thumb
 5076              		.thumb_func
 5078              	vTaskSetTaskNumber:
 5079              	.LFB41:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 153


3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5080              		.loc 1 3369 2
 5081              		.cfi_startproc
 5082              		@ args = 0, pretend = 0, frame = 16
 5083              		@ frame_needed = 1, uses_anonymous_args = 0
 5084              		@ link register save eliminated.
 5085 0000 80B4     		push	{r7}
 5086              	.LCFI188:
 5087              		.cfi_def_cfa_offset 4
 5088              		.cfi_offset 7, -4
 5089 0002 85B0     		sub	sp, sp, #20
 5090              	.LCFI189:
 5091              		.cfi_def_cfa_offset 24
 5092 0004 00AF     		add	r7, sp, #0
 5093              	.LCFI190:
 5094              		.cfi_def_cfa_register 7
 5095 0006 7860     		str	r0, [r7, #4]
 5096 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5097              		.loc 1 3372 5
 5098 000a 7B68     		ldr	r3, [r7, #4]
 5099 000c 002B     		cmp	r3, #0
 5100 000e 04D0     		beq	.L316
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5101              		.loc 1 3374 10
 5102 0010 7B68     		ldr	r3, [r7, #4]
 5103 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5104              		.loc 1 3375 24
 5105 0014 FB68     		ldr	r3, [r7, #12]
 5106 0016 3A68     		ldr	r2, [r7]
 5107 0018 9A64     		str	r2, [r3, #72]
 5108              	.L316:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5109              		.loc 1 3377 2
 5110 001a 00BF     		nop
 5111 001c 1437     		adds	r7, r7, #20
 5112              	.LCFI191:
 5113              		.cfi_def_cfa_offset 4
 5114 001e BD46     		mov	sp, r7
 5115              	.LCFI192:
 5116              		.cfi_def_cfa_register 13
 5117              		@ sp needed
 5118 0020 5DF8047B 		ldr	r7, [sp], #4
 5119              	.LCFI193:
 5120              		.cfi_restore 7
 5121              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccfq1u8L.s 			page 154


 5122 0024 7047     		bx	lr
 5123              		.cfi_endproc
 5124              	.LFE41:
 5126              		.section	.text.prvIdleTask,"ax",%progbits
 5127              		.align	1
 5128              		.syntax unified
 5129              		.thumb
 5130              		.thumb_func
 5132              	prvIdleTask:
 5133              	.LFB42:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5134              		.loc 1 3393 1
 5135              		.cfi_startproc
 5136              		@ args = 0, pretend = 0, frame = 8
 5137              		@ frame_needed = 1, uses_anonymous_args = 0
 5138 0000 80B5     		push	{r7, lr}
 5139              	.LCFI194:
 5140              		.cfi_def_cfa_offset 8
 5141              		.cfi_offset 7, -8
 5142              		.cfi_offset 14, -4
 5143 0002 82B0     		sub	sp, sp, #8
 5144              	.LCFI195:
 5145              		.cfi_def_cfa_offset 16
 5146 0004 00AF     		add	r7, sp, #0
 5147              	.LCFI196:
 5148              		.cfi_def_cfa_register 7
 5149 0006 7860     		str	r0, [r7, #4]
 5150              	.L319:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
ARM GAS  /tmp/ccfq1u8L.s 			page 155


3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5151              		.loc 1 3409 3
 5152 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5153              		.loc 1 3432 8
 5154 000c 064B     		ldr	r3, .L320
 5155 000e 1B68     		ldr	r3, [r3]
 5156              		.loc 1 3432 6
 5157 0010 012B     		cmp	r3, #1
 5158 0012 F9D9     		bls	.L319
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5159              		.loc 1 3434 5
 5160 0014 054B     		ldr	r3, .L320+4
 5161 0016 4FF08052 		mov	r2, #268435456
 5162 001a 1A60     		str	r2, [r3]
 5163              		.syntax unified
 5164              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5165 001c BFF34F8F 		dsb
 5166              	@ 0 "" 2
 5167              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5168 0020 BFF36F8F 		isb
 5169              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5170              		.loc 1 3409 3
 5171              		.thumb
 5172              		.syntax unified
 5173 0024 F0E7     		b	.L319
 5174              	.L321:
 5175 0026 00BF     		.align	2
 5176              	.L320:
 5177 0028 00000000 		.word	pxReadyTasksLists
 5178 002c 04ED00E0 		.word	-536810236
 5179              		.cfi_endproc
ARM GAS  /tmp/ccfq1u8L.s 			page 156


 5180              	.LFE42:
 5182              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5183              		.align	1
 5184              		.syntax unified
 5185              		.thumb
 5186              		.thumb_func
 5188              	prvInitialiseTaskLists:
 5189              	.LFB43:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
ARM GAS  /tmp/ccfq1u8L.s 			page 157


3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccfq1u8L.s 			page 158


3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
ARM GAS  /tmp/ccfq1u8L.s 			page 159


3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5190              		.loc 1 3608 1
 5191              		.cfi_startproc
 5192              		@ args = 0, pretend = 0, frame = 8
 5193              		@ frame_needed = 1, uses_anonymous_args = 0
 5194 0000 80B5     		push	{r7, lr}
 5195              	.LCFI197:
 5196              		.cfi_def_cfa_offset 8
 5197              		.cfi_offset 7, -8
 5198              		.cfi_offset 14, -4
 5199 0002 82B0     		sub	sp, sp, #8
 5200              	.LCFI198:
 5201              		.cfi_def_cfa_offset 16
 5202 0004 00AF     		add	r7, sp, #0
 5203              	.LCFI199:
 5204              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5205              		.loc 1 3611 18
 5206 0006 0023     		movs	r3, #0
 5207 0008 7B60     		str	r3, [r7, #4]
 5208              		.loc 1 3611 2
 5209 000a 0CE0     		b	.L323
 5210              	.L324:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5211              		.loc 1 3613 3 discriminator 3
 5212 000c 7A68     		ldr	r2, [r7, #4]
 5213 000e 1346     		mov	r3, r2
 5214 0010 9B00     		lsls	r3, r3, #2
 5215 0012 1344     		add	r3, r3, r2
 5216 0014 9B00     		lsls	r3, r3, #2
 5217 0016 124A     		ldr	r2, .L325
 5218 0018 1344     		add	r3, r3, r2
 5219 001a 1846     		mov	r0, r3
 5220 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5221              		.loc 1 3611 101 discriminator 3
 5222 0020 7B68     		ldr	r3, [r7, #4]
 5223 0022 0133     		adds	r3, r3, #1
 5224 0024 7B60     		str	r3, [r7, #4]
 5225              	.L323:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5226              		.loc 1 3611 2 discriminator 1
 5227 0026 7B68     		ldr	r3, [r7, #4]
 5228 0028 372B     		cmp	r3, #55
ARM GAS  /tmp/ccfq1u8L.s 			page 160


 5229 002a EFD9     		bls	.L324
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5230              		.loc 1 3616 2
 5231 002c 0D48     		ldr	r0, .L325+4
 5232 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5233              		.loc 1 3617 2
 5234 0032 0D48     		ldr	r0, .L325+8
 5235 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5236              		.loc 1 3618 2
 5237 0038 0C48     		ldr	r0, .L325+12
 5238 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5239              		.loc 1 3622 3
 5240 003e 0C48     		ldr	r0, .L325+16
 5241 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5242              		.loc 1 3628 3
 5243 0044 0B48     		ldr	r0, .L325+20
 5244 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5245              		.loc 1 3634 20
 5246 004a 0B4B     		ldr	r3, .L325+24
 5247 004c 054A     		ldr	r2, .L325+4
 5248 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5249              		.loc 1 3635 28
 5250 0050 0A4B     		ldr	r3, .L325+28
 5251 0052 054A     		ldr	r2, .L325+8
 5252 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5253              		.loc 1 3636 1
 5254 0056 00BF     		nop
 5255 0058 0837     		adds	r7, r7, #8
 5256              	.LCFI200:
 5257              		.cfi_def_cfa_offset 8
 5258 005a BD46     		mov	sp, r7
 5259              	.LCFI201:
 5260              		.cfi_def_cfa_register 13
 5261              		@ sp needed
 5262 005c 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccfq1u8L.s 			page 161


 5263              	.L326:
 5264 005e 00BF     		.align	2
 5265              	.L325:
 5266 0060 00000000 		.word	pxReadyTasksLists
 5267 0064 00000000 		.word	xDelayedTaskList1
 5268 0068 00000000 		.word	xDelayedTaskList2
 5269 006c 00000000 		.word	xPendingReadyList
 5270 0070 00000000 		.word	xTasksWaitingTermination
 5271 0074 00000000 		.word	xSuspendedTaskList
 5272 0078 00000000 		.word	pxDelayedTaskList
 5273 007c 00000000 		.word	pxOverflowDelayedTaskList
 5274              		.cfi_endproc
 5275              	.LFE43:
 5277              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5278              		.align	1
 5279              		.syntax unified
 5280              		.thumb
 5281              		.thumb_func
 5283              	prvCheckTasksWaitingTermination:
 5284              	.LFB44:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5285              		.loc 1 3640 1
 5286              		.cfi_startproc
 5287              		@ args = 0, pretend = 0, frame = 8
 5288              		@ frame_needed = 1, uses_anonymous_args = 0
 5289 0000 80B5     		push	{r7, lr}
 5290              	.LCFI202:
 5291              		.cfi_def_cfa_offset 8
 5292              		.cfi_offset 7, -8
 5293              		.cfi_offset 14, -4
 5294 0002 82B0     		sub	sp, sp, #8
 5295              	.LCFI203:
 5296              		.cfi_def_cfa_offset 16
 5297 0004 00AF     		add	r7, sp, #0
 5298              	.LCFI204:
 5299              		.cfi_def_cfa_register 7
 5300              	.LBB203:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5301              		.loc 1 3650 8
 5302 0006 19E0     		b	.L328
 5303              	.L329:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5304              		.loc 1 3652 4
 5305 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccfq1u8L.s 			page 162


3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5306              		.loc 1 3654 13
 5307 000c 104B     		ldr	r3, .L330
 5308 000e DB68     		ldr	r3, [r3, #12]
 5309              		.loc 1 3654 11
 5310 0010 DB68     		ldr	r3, [r3, #12]
 5311 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5312              		.loc 1 3655 14
 5313 0014 7B68     		ldr	r3, [r7, #4]
 5314 0016 0433     		adds	r3, r3, #4
 5315 0018 1846     		mov	r0, r3
 5316 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5317              		.loc 1 3656 5
 5318 001e 0D4B     		ldr	r3, .L330+4
 5319 0020 1B68     		ldr	r3, [r3]
 5320 0022 013B     		subs	r3, r3, #1
 5321 0024 0B4A     		ldr	r2, .L330+4
 5322 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5323              		.loc 1 3657 5
 5324 0028 0B4B     		ldr	r3, .L330+8
 5325 002a 1B68     		ldr	r3, [r3]
 5326 002c 013B     		subs	r3, r3, #1
 5327 002e 0A4A     		ldr	r2, .L330+8
 5328 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5329              		.loc 1 3659 4
 5330 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5331              		.loc 1 3661 4
 5332 0036 7868     		ldr	r0, [r7, #4]
 5333 0038 FFF7FEFF 		bl	prvDeleteTCB
 5334              	.L328:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5335              		.loc 1 3650 39
 5336 003c 064B     		ldr	r3, .L330+8
 5337 003e 1B68     		ldr	r3, [r3]
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5338              		.loc 1 3650 8
 5339 0040 002B     		cmp	r3, #0
 5340 0042 E1D1     		bne	.L329
 5341              	.LBE203:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5342              		.loc 1 3665 1
 5343 0044 00BF     		nop
 5344 0046 00BF     		nop
 5345 0048 0837     		adds	r7, r7, #8
 5346              	.LCFI205:
 5347              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccfq1u8L.s 			page 163


 5348 004a BD46     		mov	sp, r7
 5349              	.LCFI206:
 5350              		.cfi_def_cfa_register 13
 5351              		@ sp needed
 5352 004c 80BD     		pop	{r7, pc}
 5353              	.L331:
 5354 004e 00BF     		.align	2
 5355              	.L330:
 5356 0050 00000000 		.word	xTasksWaitingTermination
 5357 0054 00000000 		.word	uxCurrentNumberOfTasks
 5358 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5359              		.cfi_endproc
 5360              	.LFE44:
 5362              		.section	.text.vTaskGetInfo,"ax",%progbits
 5363              		.align	1
 5364              		.global	vTaskGetInfo
 5365              		.syntax unified
 5366              		.thumb
 5367              		.thumb_func
 5369              	vTaskGetInfo:
 5370              	.LFB45:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5371              		.loc 1 3671 2
 5372              		.cfi_startproc
 5373              		@ args = 0, pretend = 0, frame = 24
 5374              		@ frame_needed = 1, uses_anonymous_args = 0
 5375 0000 80B5     		push	{r7, lr}
 5376              	.LCFI207:
 5377              		.cfi_def_cfa_offset 8
 5378              		.cfi_offset 7, -8
 5379              		.cfi_offset 14, -4
 5380 0002 86B0     		sub	sp, sp, #24
 5381              	.LCFI208:
 5382              		.cfi_def_cfa_offset 32
 5383 0004 00AF     		add	r7, sp, #0
 5384              	.LCFI209:
 5385              		.cfi_def_cfa_register 7
 5386 0006 F860     		str	r0, [r7, #12]
 5387 0008 B960     		str	r1, [r7, #8]
 5388 000a 7A60     		str	r2, [r7, #4]
 5389 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5390              		.loc 1 3675 11
 5391 000e FB68     		ldr	r3, [r7, #12]
 5392 0010 002B     		cmp	r3, #0
 5393 0012 02D1     		bne	.L333
 5394              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5395 0014 2C4B     		ldr	r3, .L342
 5396 0016 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 164


 5397 0018 00E0     		b	.L334
 5398              	.L333:
 5399              		.loc 1 3675 11 discriminator 2
 5400 001a FB68     		ldr	r3, [r7, #12]
 5401              	.L334:
 5402              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5403 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5404              		.loc 1 3677 25 discriminator 4
 5405 001e BB68     		ldr	r3, [r7, #8]
 5406 0020 7A69     		ldr	r2, [r7, #20]
 5407 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5408              		.loc 1 3678 47 discriminator 4
 5409 0024 7B69     		ldr	r3, [r7, #20]
 5410 0026 03F13402 		add	r2, r3, #52
 5411              		.loc 1 3678 28 discriminator 4
 5412 002a BB68     		ldr	r3, [r7, #8]
 5413 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5414              		.loc 1 3679 42 discriminator 4
 5415 002e 7B69     		ldr	r3, [r7, #20]
 5416 0030 DA6A     		ldr	r2, [r3, #44]
 5417              		.loc 1 3679 35 discriminator 4
 5418 0032 BB68     		ldr	r3, [r7, #8]
 5419 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5420              		.loc 1 3680 36 discriminator 4
 5421 0036 7B69     		ldr	r3, [r7, #20]
 5422 0038 1A6B     		ldr	r2, [r3, #48]
 5423              		.loc 1 3680 29 discriminator 4
 5424 003a BB68     		ldr	r3, [r7, #8]
 5425 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5426              		.loc 1 3681 36 discriminator 4
 5427 003e 7B69     		ldr	r3, [r7, #20]
 5428 0040 5A6C     		ldr	r2, [r3, #68]
 5429              		.loc 1 3681 29 discriminator 4
 5430 0042 BB68     		ldr	r3, [r7, #8]
 5431 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5432              		.loc 1 3685 40 discriminator 4
 5433 0046 7B69     		ldr	r3, [r7, #20]
 5434 0048 DA6C     		ldr	r2, [r3, #76]
 5435              		.loc 1 3685 33 discriminator 4
 5436 004a BB68     		ldr	r3, [r7, #8]
 5437 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccfq1u8L.s 			page 165


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5438              		.loc 1 3699 35 discriminator 4
 5439 004e BB68     		ldr	r3, [r7, #8]
 5440 0050 0022     		movs	r2, #0
 5441 0052 9A61     		str	r2, [r3, #24]
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5442              		.loc 1 3706 5 discriminator 4
 5443 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5444 0056 052B     		cmp	r3, #5
 5445 0058 1AD0     		beq	.L335
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5446              		.loc 1 3708 14
 5447 005a 1B4B     		ldr	r3, .L342
 5448 005c 1B68     		ldr	r3, [r3]
 5449              		.loc 1 3708 6
 5450 005e 7A69     		ldr	r2, [r7, #20]
 5451 0060 9A42     		cmp	r2, r3
 5452 0062 03D1     		bne	.L336
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5453              		.loc 1 3710 33
 5454 0064 BB68     		ldr	r3, [r7, #8]
 5455 0066 0022     		movs	r2, #0
 5456 0068 1A73     		strb	r2, [r3, #12]
 5457 006a 18E0     		b	.L337
 5458              	.L336:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5459              		.loc 1 3714 33
 5460 006c BB68     		ldr	r3, [r7, #8]
 5461 006e FA78     		ldrb	r2, [r7, #3]
 5462 0070 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5463              		.loc 1 3721 8
 5464 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccfq1u8L.s 			page 166


 5465 0074 032B     		cmp	r3, #3
 5466 0076 12D1     		bne	.L337
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5467              		.loc 1 3723 7
 5468 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5469              		.loc 1 3725 12
 5470 007c 7B69     		ldr	r3, [r7, #20]
 5471 007e 9B6A     		ldr	r3, [r3, #40]
 5472              		.loc 1 3725 10
 5473 0080 002B     		cmp	r3, #0
 5474 0082 02D0     		beq	.L338
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5475              		.loc 1 3727 37
 5476 0084 BB68     		ldr	r3, [r7, #8]
 5477 0086 0222     		movs	r2, #2
 5478 0088 1A73     		strb	r2, [r3, #12]
 5479              	.L338:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5480              		.loc 1 3730 16
 5481 008a FFF7FEFF 		bl	xTaskResumeAll
 5482 008e 06E0     		b	.L337
 5483              	.L335:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5484              		.loc 1 3738 34
 5485 0090 7869     		ldr	r0, [r7, #20]
 5486 0092 FFF7FEFF 		bl	eTaskGetState
 5487 0096 0346     		mov	r3, r0
 5488 0098 1A46     		mov	r2, r3
 5489              		.loc 1 3738 32
 5490 009a BB68     		ldr	r3, [r7, #8]
 5491 009c 1A73     		strb	r2, [r3, #12]
 5492              	.L337:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5493              		.loc 1 3743 5
 5494 009e 7B68     		ldr	r3, [r7, #4]
 5495 00a0 002B     		cmp	r3, #0
 5496 00a2 09D0     		beq	.L339
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccfq1u8L.s 			page 167


3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5497              		.loc 1 3751 89
 5498 00a4 7B69     		ldr	r3, [r7, #20]
 5499 00a6 1B6B     		ldr	r3, [r3, #48]
 5500              		.loc 1 3751 42
 5501 00a8 1846     		mov	r0, r3
 5502 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5503 00ae 0346     		mov	r3, r0
 5504 00b0 1A46     		mov	r2, r3
 5505              		.loc 1 3751 40
 5506 00b2 BB68     		ldr	r3, [r7, #8]
 5507 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5508              		.loc 1 3759 2
 5509 00b6 02E0     		b	.L341
 5510              	.L339:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5511              		.loc 1 3757 39
 5512 00b8 BB68     		ldr	r3, [r7, #8]
 5513 00ba 0022     		movs	r2, #0
 5514 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5515              	.L341:
 5516              		.loc 1 3759 2
 5517 00be 00BF     		nop
 5518 00c0 1837     		adds	r7, r7, #24
 5519              	.LCFI210:
 5520              		.cfi_def_cfa_offset 8
 5521 00c2 BD46     		mov	sp, r7
 5522              	.LCFI211:
 5523              		.cfi_def_cfa_register 13
 5524              		@ sp needed
 5525 00c4 80BD     		pop	{r7, pc}
 5526              	.L343:
 5527 00c6 00BF     		.align	2
 5528              	.L342:
 5529 00c8 00000000 		.word	pxCurrentTCB
 5530              		.cfi_endproc
 5531              	.LFE45:
 5533              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5534              		.align	1
 5535              		.syntax unified
 5536              		.thumb
 5537              		.thumb_func
 5539              	prvListTasksWithinSingleList:
 5540              	.LFB46:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 168


3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5541              		.loc 1 3767 2
 5542              		.cfi_startproc
 5543              		@ args = 0, pretend = 0, frame = 40
 5544              		@ frame_needed = 1, uses_anonymous_args = 0
 5545 0000 80B5     		push	{r7, lr}
 5546              	.LCFI212:
 5547              		.cfi_def_cfa_offset 8
 5548              		.cfi_offset 7, -8
 5549              		.cfi_offset 14, -4
 5550 0002 8AB0     		sub	sp, sp, #40
 5551              	.LCFI213:
 5552              		.cfi_def_cfa_offset 48
 5553 0004 00AF     		add	r7, sp, #0
 5554              	.LCFI214:
 5555              		.cfi_def_cfa_register 7
 5556 0006 F860     		str	r0, [r7, #12]
 5557 0008 B960     		str	r1, [r7, #8]
 5558 000a 1346     		mov	r3, r2
 5559 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5560              		.loc 1 3769 14
 5561 000e 0023     		movs	r3, #0
 5562 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5563              		.loc 1 3771 7
 5564 0012 BB68     		ldr	r3, [r7, #8]
 5565 0014 1B68     		ldr	r3, [r3]
 5566              		.loc 1 3771 5
 5567 0016 002B     		cmp	r3, #0
 5568 0018 3FD0     		beq	.L345
 5569              	.LBB204:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5570              		.loc 1 3773 4
 5571 001a BB68     		ldr	r3, [r7, #8]
 5572 001c 3B62     		str	r3, [r7, #32]
 5573 001e 3B6A     		ldr	r3, [r7, #32]
 5574 0020 5B68     		ldr	r3, [r3, #4]
 5575 0022 5A68     		ldr	r2, [r3, #4]
 5576 0024 3B6A     		ldr	r3, [r7, #32]
 5577 0026 5A60     		str	r2, [r3, #4]
 5578 0028 3B6A     		ldr	r3, [r7, #32]
 5579 002a 5A68     		ldr	r2, [r3, #4]
 5580 002c 3B6A     		ldr	r3, [r7, #32]
 5581 002e 0833     		adds	r3, r3, #8
 5582 0030 9A42     		cmp	r2, r3
 5583 0032 04D1     		bne	.L346
 5584              		.loc 1 3773 4 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccfq1u8L.s 			page 169


 5585 0034 3B6A     		ldr	r3, [r7, #32]
 5586 0036 5B68     		ldr	r3, [r3, #4]
 5587 0038 5A68     		ldr	r2, [r3, #4]
 5588 003a 3B6A     		ldr	r3, [r7, #32]
 5589 003c 5A60     		str	r2, [r3, #4]
 5590              	.L346:
 5591              		.loc 1 3773 4 discriminator 3
 5592 003e 3B6A     		ldr	r3, [r7, #32]
 5593 0040 5B68     		ldr	r3, [r3, #4]
 5594 0042 DB68     		ldr	r3, [r3, #12]
 5595 0044 FB61     		str	r3, [r7, #28]
 5596              	.L348:
 5597              	.LBE204:
 5598              	.LBB205:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5599              		.loc 1 3781 5 is_stmt 1
 5600 0046 BB68     		ldr	r3, [r7, #8]
 5601 0048 BB61     		str	r3, [r7, #24]
 5602 004a BB69     		ldr	r3, [r7, #24]
 5603 004c 5B68     		ldr	r3, [r3, #4]
 5604 004e 5A68     		ldr	r2, [r3, #4]
 5605 0050 BB69     		ldr	r3, [r7, #24]
 5606 0052 5A60     		str	r2, [r3, #4]
 5607 0054 BB69     		ldr	r3, [r7, #24]
 5608 0056 5A68     		ldr	r2, [r3, #4]
 5609 0058 BB69     		ldr	r3, [r7, #24]
 5610 005a 0833     		adds	r3, r3, #8
 5611 005c 9A42     		cmp	r2, r3
 5612 005e 04D1     		bne	.L347
 5613              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5614 0060 BB69     		ldr	r3, [r7, #24]
 5615 0062 5B68     		ldr	r3, [r3, #4]
 5616 0064 5A68     		ldr	r2, [r3, #4]
 5617 0066 BB69     		ldr	r3, [r7, #24]
 5618 0068 5A60     		str	r2, [r3, #4]
 5619              	.L347:
 5620              		.loc 1 3781 5 discriminator 3
 5621 006a BB69     		ldr	r3, [r7, #24]
 5622 006c 5B68     		ldr	r3, [r3, #4]
 5623 006e DB68     		ldr	r3, [r3, #12]
 5624 0070 7B61     		str	r3, [r7, #20]
 5625              	.LBE205:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5626              		.loc 1 3782 67 is_stmt 1 discriminator 3
 5627 0072 7A6A     		ldr	r2, [r7, #36]
 5628 0074 1346     		mov	r3, r2
 5629 0076 DB00     		lsls	r3, r3, #3
 5630 0078 1344     		add	r3, r3, r2
 5631 007a 9B00     		lsls	r3, r3, #2
 5632 007c 1A46     		mov	r2, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 170


 5633              		.loc 1 3782 5 discriminator 3
 5634 007e FB68     		ldr	r3, [r7, #12]
 5635 0080 9918     		adds	r1, r3, r2
 5636 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5637 0084 0122     		movs	r2, #1
 5638 0086 7869     		ldr	r0, [r7, #20]
 5639 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5640              		.loc 1 3783 11 discriminator 3
 5641 008c 7B6A     		ldr	r3, [r7, #36]
 5642 008e 0133     		adds	r3, r3, #1
 5643 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5644              		.loc 1 3784 4 discriminator 3
 5645 0092 7A69     		ldr	r2, [r7, #20]
 5646 0094 FB69     		ldr	r3, [r7, #28]
 5647 0096 9A42     		cmp	r2, r3
 5648 0098 D5D1     		bne	.L348
 5649              	.L345:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5650              		.loc 1 3791 10
 5651 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5652              		.loc 1 3792 2
 5653 009c 1846     		mov	r0, r3
 5654 009e 2837     		adds	r7, r7, #40
 5655              	.LCFI215:
 5656              		.cfi_def_cfa_offset 8
 5657 00a0 BD46     		mov	sp, r7
 5658              	.LCFI216:
 5659              		.cfi_def_cfa_register 13
 5660              		@ sp needed
 5661 00a2 80BD     		pop	{r7, pc}
 5662              		.cfi_endproc
 5663              	.LFE46:
 5665              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5666              		.align	1
 5667              		.syntax unified
 5668              		.thumb
 5669              		.thumb_func
 5671              	prvTaskCheckFreeStackSpace:
 5672              	.LFB47:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5673              		.loc 1 3800 2
ARM GAS  /tmp/ccfq1u8L.s 			page 171


 5674              		.cfi_startproc
 5675              		@ args = 0, pretend = 0, frame = 16
 5676              		@ frame_needed = 1, uses_anonymous_args = 0
 5677              		@ link register save eliminated.
 5678 0000 80B4     		push	{r7}
 5679              	.LCFI217:
 5680              		.cfi_def_cfa_offset 4
 5681              		.cfi_offset 7, -4
 5682 0002 85B0     		sub	sp, sp, #20
 5683              	.LCFI218:
 5684              		.cfi_def_cfa_offset 24
 5685 0004 00AF     		add	r7, sp, #0
 5686              	.LCFI219:
 5687              		.cfi_def_cfa_register 7
 5688 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5689              		.loc 1 3801 11
 5690 0008 0023     		movs	r3, #0
 5691 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5692              		.loc 1 3803 8
 5693 000c 05E0     		b	.L351
 5694              	.L352:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5695              		.loc 1 3805 17
 5696 000e 7B68     		ldr	r3, [r7, #4]
 5697 0010 0133     		adds	r3, r3, #1
 5698 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5699              		.loc 1 3806 11
 5700 0014 FB68     		ldr	r3, [r7, #12]
 5701 0016 0133     		adds	r3, r3, #1
 5702 0018 FB60     		str	r3, [r7, #12]
 5703              	.L351:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5704              		.loc 1 3803 10
 5705 001a 7B68     		ldr	r3, [r7, #4]
 5706 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5707              		.loc 1 3803 8
 5708 001e A52B     		cmp	r3, #165
 5709 0020 F5D0     		beq	.L352
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5710              		.loc 1 3809 11
 5711 0022 FB68     		ldr	r3, [r7, #12]
 5712 0024 9B08     		lsrs	r3, r3, #2
 5713 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5714              		.loc 1 3811 10
 5715 0028 FB68     		ldr	r3, [r7, #12]
 5716 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccfq1u8L.s 			page 172


 5717              		.loc 1 3812 2
 5718 002c 1846     		mov	r0, r3
 5719 002e 1437     		adds	r7, r7, #20
 5720              	.LCFI220:
 5721              		.cfi_def_cfa_offset 4
 5722 0030 BD46     		mov	sp, r7
 5723              	.LCFI221:
 5724              		.cfi_def_cfa_register 13
 5725              		@ sp needed
 5726 0032 5DF8047B 		ldr	r7, [sp], #4
 5727              	.LCFI222:
 5728              		.cfi_restore 7
 5729              		.cfi_def_cfa_offset 0
 5730 0036 7047     		bx	lr
 5731              		.cfi_endproc
 5732              	.LFE47:
 5734              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5735              		.align	1
 5736              		.global	uxTaskGetStackHighWaterMark
 5737              		.syntax unified
 5738              		.thumb
 5739              		.thumb_func
 5741              	uxTaskGetStackHighWaterMark:
 5742              	.LFB48:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
ARM GAS  /tmp/ccfq1u8L.s 			page 173


3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5743              		.loc 1 3860 2
 5744              		.cfi_startproc
 5745              		@ args = 0, pretend = 0, frame = 24
 5746              		@ frame_needed = 1, uses_anonymous_args = 0
 5747 0000 80B5     		push	{r7, lr}
 5748              	.LCFI223:
 5749              		.cfi_def_cfa_offset 8
 5750              		.cfi_offset 7, -8
 5751              		.cfi_offset 14, -4
 5752 0002 86B0     		sub	sp, sp, #24
 5753              	.LCFI224:
 5754              		.cfi_def_cfa_offset 32
 5755 0004 00AF     		add	r7, sp, #0
 5756              	.LCFI225:
 5757              		.cfi_def_cfa_register 7
 5758 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5759              		.loc 1 3865 11
 5760 0008 7B68     		ldr	r3, [r7, #4]
 5761 000a 002B     		cmp	r3, #0
 5762 000c 02D1     		bne	.L355
 5763              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5764 000e 094B     		ldr	r3, .L358
 5765 0010 1B68     		ldr	r3, [r3]
 5766 0012 00E0     		b	.L356
 5767              	.L355:
 5768              		.loc 1 3865 11 discriminator 2
 5769 0014 7B68     		ldr	r3, [r7, #4]
 5770              	.L356:
 5771              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5772 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5773              		.loc 1 3869 18 discriminator 4
 5774 0018 7B69     		ldr	r3, [r7, #20]
 5775 001a 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccfq1u8L.s 			page 174


 5776 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5777              		.loc 1 3877 30 discriminator 4
 5778 001e 3869     		ldr	r0, [r7, #16]
 5779 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5780 0024 0346     		mov	r3, r0
 5781              		.loc 1 3877 12 discriminator 4
 5782 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5783              		.loc 1 3879 10 discriminator 4
 5784 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5785              		.loc 1 3880 2 discriminator 4
 5786 002a 1846     		mov	r0, r3
 5787 002c 1837     		adds	r7, r7, #24
 5788              	.LCFI226:
 5789              		.cfi_def_cfa_offset 8
 5790 002e BD46     		mov	sp, r7
 5791              	.LCFI227:
 5792              		.cfi_def_cfa_register 13
 5793              		@ sp needed
 5794 0030 80BD     		pop	{r7, pc}
 5795              	.L359:
 5796 0032 00BF     		.align	2
 5797              	.L358:
 5798 0034 00000000 		.word	pxCurrentTCB
 5799              		.cfi_endproc
 5800              	.LFE48:
 5802              		.section	.text.prvDeleteTCB,"ax",%progbits
 5803              		.align	1
 5804              		.syntax unified
 5805              		.thumb
 5806              		.thumb_func
 5808              	prvDeleteTCB:
 5809              	.LFB49:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5810              		.loc 1 3888 2
 5811              		.cfi_startproc
 5812              		@ args = 0, pretend = 0, frame = 16
 5813              		@ frame_needed = 1, uses_anonymous_args = 0
 5814 0000 80B5     		push	{r7, lr}
 5815              	.LCFI228:
ARM GAS  /tmp/ccfq1u8L.s 			page 175


 5816              		.cfi_def_cfa_offset 8
 5817              		.cfi_offset 7, -8
 5818              		.cfi_offset 14, -4
 5819 0002 84B0     		sub	sp, sp, #16
 5820              	.LCFI229:
 5821              		.cfi_def_cfa_offset 24
 5822 0004 00AF     		add	r7, sp, #0
 5823              	.LCFI230:
 5824              		.cfi_def_cfa_register 7
 5825 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 5826              		.loc 1 3900 4
 5827 0008 7B68     		ldr	r3, [r7, #4]
 5828 000a 5833     		adds	r3, r3, #88
 5829 000c 1846     		mov	r0, r3
 5830 000e FFF7FEFF 		bl	_reclaim_reent
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5831              		.loc 1 3916 13
 5832 0012 7B68     		ldr	r3, [r7, #4]
 5833 0014 93F88534 		ldrb	r3, [r3, #1157]	@ zero_extendqisi2
 5834              		.loc 1 3916 6
 5835 0018 002B     		cmp	r3, #0
 5836 001a 08D1     		bne	.L361
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5837              		.loc 1 3920 21
 5838 001c 7B68     		ldr	r3, [r7, #4]
 5839 001e 1B6B     		ldr	r3, [r3, #48]
 5840              		.loc 1 3920 5
ARM GAS  /tmp/ccfq1u8L.s 			page 176


 5841 0020 1846     		mov	r0, r3
 5842 0022 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5843              		.loc 1 3921 5
 5844 0026 7868     		ldr	r0, [r7, #4]
 5845 0028 FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5846              		.loc 1 3938 2
 5847 002c 18E0     		b	.L365
 5848              	.L361:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5849              		.loc 1 3923 18
 5850 002e 7B68     		ldr	r3, [r7, #4]
 5851 0030 93F88534 		ldrb	r3, [r3, #1157]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5852              		.loc 1 3923 11
 5853 0034 012B     		cmp	r3, #1
 5854 0036 03D1     		bne	.L363
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5855              		.loc 1 3927 5
 5856 0038 7868     		ldr	r0, [r7, #4]
 5857 003a FFF7FEFF 		bl	vPortFree
 5858              		.loc 1 3938 2
 5859 003e 0FE0     		b	.L365
 5860              	.L363:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5861              		.loc 1 3933 5
 5862 0040 7B68     		ldr	r3, [r7, #4]
 5863 0042 93F88534 		ldrb	r3, [r3, #1157]	@ zero_extendqisi2
 5864 0046 022B     		cmp	r3, #2
 5865 0048 0AD0     		beq	.L365
 5866              	.LBB206:
 5867              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5868              		.loc 2 195 2
 5869              		.syntax unified
 5870              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5871 004a 4FF05003 			mov r3, #80												
 5872 004e 83F31188 		msr basepri, r3											
 5873 0052 BFF36F8F 		isb														
 5874 0056 BFF34F8F 		dsb														
ARM GAS  /tmp/ccfq1u8L.s 			page 177


 5875              	
 5876              	@ 0 "" 2
 5877              		.thumb
 5878              		.syntax unified
 5879 005a FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5880              		.loc 2 203 1
 5881 005c 00BF     		nop
 5882              	.L364:
 5883              	.LBE207:
 5884              	.LBE206:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5885              		.loc 1 3933 5 discriminator 1
 5886 005e FEE7     		b	.L364
 5887              	.L365:
 5888              		.loc 1 3938 2
 5889 0060 00BF     		nop
 5890 0062 1037     		adds	r7, r7, #16
 5891              	.LCFI231:
 5892              		.cfi_def_cfa_offset 8
 5893 0064 BD46     		mov	sp, r7
 5894              	.LCFI232:
 5895              		.cfi_def_cfa_register 13
 5896              		@ sp needed
 5897 0066 80BD     		pop	{r7, pc}
 5898              		.cfi_endproc
 5899              	.LFE49:
 5901              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5902              		.align	1
 5903              		.syntax unified
 5904              		.thumb
 5905              		.thumb_func
 5907              	prvResetNextTaskUnblockTime:
 5908              	.LFB50:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5909              		.loc 1 3944 1
 5910              		.cfi_startproc
 5911              		@ args = 0, pretend = 0, frame = 8
 5912              		@ frame_needed = 1, uses_anonymous_args = 0
 5913              		@ link register save eliminated.
 5914 0000 80B4     		push	{r7}
 5915              	.LCFI233:
 5916              		.cfi_def_cfa_offset 4
 5917              		.cfi_offset 7, -4
 5918 0002 83B0     		sub	sp, sp, #12
 5919              	.LCFI234:
 5920              		.cfi_def_cfa_offset 16
 5921 0004 00AF     		add	r7, sp, #0
 5922              	.LCFI235:
 5923              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 178


3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5924              		.loc 1 3947 6
 5925 0006 0C4B     		ldr	r3, .L370
 5926 0008 1B68     		ldr	r3, [r3]
 5927 000a 1B68     		ldr	r3, [r3]
 5928              		.loc 1 3947 4
 5929 000c 002B     		cmp	r3, #0
 5930 000e 04D1     		bne	.L367
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5931              		.loc 1 3953 24
 5932 0010 0A4B     		ldr	r3, .L370+4
 5933 0012 4FF0FF32 		mov	r2, #-1
 5934 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5935              		.loc 1 3964 1
 5936 0018 08E0     		b	.L369
 5937              	.L367:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5938              		.loc 1 3961 15
 5939 001a 074B     		ldr	r3, .L370
 5940 001c 1B68     		ldr	r3, [r3]
 5941 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5942              		.loc 1 3961 13
 5943 0020 DB68     		ldr	r3, [r3, #12]
 5944 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5945              		.loc 1 3962 26
 5946 0024 7B68     		ldr	r3, [r7, #4]
 5947 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5948              		.loc 1 3962 24
 5949 0028 044A     		ldr	r2, .L370+4
 5950 002a 1360     		str	r3, [r2]
 5951              	.L369:
 5952              		.loc 1 3964 1
 5953 002c 00BF     		nop
 5954 002e 0C37     		adds	r7, r7, #12
 5955              	.LCFI236:
 5956              		.cfi_def_cfa_offset 4
 5957 0030 BD46     		mov	sp, r7
 5958              	.LCFI237:
ARM GAS  /tmp/ccfq1u8L.s 			page 179


 5959              		.cfi_def_cfa_register 13
 5960              		@ sp needed
 5961 0032 5DF8047B 		ldr	r7, [sp], #4
 5962              	.LCFI238:
 5963              		.cfi_restore 7
 5964              		.cfi_def_cfa_offset 0
 5965 0036 7047     		bx	lr
 5966              	.L371:
 5967              		.align	2
 5968              	.L370:
 5969 0038 00000000 		.word	pxDelayedTaskList
 5970 003c 00000000 		.word	xNextTaskUnblockTime
 5971              		.cfi_endproc
 5972              	.LFE50:
 5974              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5975              		.align	1
 5976              		.global	xTaskGetCurrentTaskHandle
 5977              		.syntax unified
 5978              		.thumb
 5979              		.thumb_func
 5981              	xTaskGetCurrentTaskHandle:
 5982              	.LFB51:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5983              		.loc 1 3970 2
 5984              		.cfi_startproc
 5985              		@ args = 0, pretend = 0, frame = 8
 5986              		@ frame_needed = 1, uses_anonymous_args = 0
 5987              		@ link register save eliminated.
 5988 0000 80B4     		push	{r7}
 5989              	.LCFI239:
 5990              		.cfi_def_cfa_offset 4
 5991              		.cfi_offset 7, -4
 5992 0002 83B0     		sub	sp, sp, #12
 5993              	.LCFI240:
 5994              		.cfi_def_cfa_offset 16
 5995 0004 00AF     		add	r7, sp, #0
 5996              	.LCFI241:
 5997              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5998              		.loc 1 3976 11
 5999 0006 054B     		ldr	r3, .L374
 6000 0008 1B68     		ldr	r3, [r3]
 6001 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6002              		.loc 1 3978 10
 6003 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccfq1u8L.s 			page 180


3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6004              		.loc 1 3979 2
 6005 000e 1846     		mov	r0, r3
 6006 0010 0C37     		adds	r7, r7, #12
 6007              	.LCFI242:
 6008              		.cfi_def_cfa_offset 4
 6009 0012 BD46     		mov	sp, r7
 6010              	.LCFI243:
 6011              		.cfi_def_cfa_register 13
 6012              		@ sp needed
 6013 0014 5DF8047B 		ldr	r7, [sp], #4
 6014              	.LCFI244:
 6015              		.cfi_restore 7
 6016              		.cfi_def_cfa_offset 0
 6017 0018 7047     		bx	lr
 6018              	.L375:
 6019 001a 00BF     		.align	2
 6020              	.L374:
 6021 001c 00000000 		.word	pxCurrentTCB
 6022              		.cfi_endproc
 6023              	.LFE51:
 6025              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6026              		.align	1
 6027              		.global	xTaskGetSchedulerState
 6028              		.syntax unified
 6029              		.thumb
 6030              		.thumb_func
 6032              	xTaskGetSchedulerState:
 6033              	.LFB52:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6034              		.loc 1 3987 2
 6035              		.cfi_startproc
 6036              		@ args = 0, pretend = 0, frame = 8
 6037              		@ frame_needed = 1, uses_anonymous_args = 0
 6038              		@ link register save eliminated.
 6039 0000 80B4     		push	{r7}
 6040              	.LCFI245:
 6041              		.cfi_def_cfa_offset 4
 6042              		.cfi_offset 7, -4
 6043 0002 83B0     		sub	sp, sp, #12
 6044              	.LCFI246:
 6045              		.cfi_def_cfa_offset 16
 6046 0004 00AF     		add	r7, sp, #0
 6047              	.LCFI247:
 6048              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6049              		.loc 1 3990 25
 6050 0006 0B4B     		ldr	r3, .L381
ARM GAS  /tmp/ccfq1u8L.s 			page 181


 6051 0008 1B68     		ldr	r3, [r3]
 6052              		.loc 1 3990 5
 6053 000a 002B     		cmp	r3, #0
 6054 000c 02D1     		bne	.L377
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6055              		.loc 1 3992 12
 6056 000e 0123     		movs	r3, #1
 6057 0010 7B60     		str	r3, [r7, #4]
 6058 0012 08E0     		b	.L378
 6059              	.L377:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6060              		.loc 1 3996 29
 6061 0014 084B     		ldr	r3, .L381+4
 6062 0016 1B68     		ldr	r3, [r3]
 6063              		.loc 1 3996 6
 6064 0018 002B     		cmp	r3, #0
 6065 001a 02D1     		bne	.L379
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6066              		.loc 1 3998 13
 6067 001c 0223     		movs	r3, #2
 6068 001e 7B60     		str	r3, [r7, #4]
 6069 0020 01E0     		b	.L378
 6070              	.L379:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6071              		.loc 1 4002 13
 6072 0022 0023     		movs	r3, #0
 6073 0024 7B60     		str	r3, [r7, #4]
 6074              	.L378:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6075              		.loc 1 4006 10
 6076 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6077              		.loc 1 4007 2
 6078 0028 1846     		mov	r0, r3
 6079 002a 0C37     		adds	r7, r7, #12
 6080              	.LCFI248:
 6081              		.cfi_def_cfa_offset 4
 6082 002c BD46     		mov	sp, r7
 6083              	.LCFI249:
 6084              		.cfi_def_cfa_register 13
 6085              		@ sp needed
 6086 002e 5DF8047B 		ldr	r7, [sp], #4
 6087              	.LCFI250:
 6088              		.cfi_restore 7
 6089              		.cfi_def_cfa_offset 0
 6090 0032 7047     		bx	lr
ARM GAS  /tmp/ccfq1u8L.s 			page 182


 6091              	.L382:
 6092              		.align	2
 6093              	.L381:
 6094 0034 00000000 		.word	xSchedulerRunning
 6095 0038 00000000 		.word	uxSchedulerSuspended
 6096              		.cfi_endproc
 6097              	.LFE52:
 6099              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6100              		.align	1
 6101              		.global	xTaskPriorityInherit
 6102              		.syntax unified
 6103              		.thumb
 6104              		.thumb_func
 6106              	xTaskPriorityInherit:
 6107              	.LFB53:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6108              		.loc 1 4015 2
 6109              		.cfi_startproc
 6110              		@ args = 0, pretend = 0, frame = 16
 6111              		@ frame_needed = 1, uses_anonymous_args = 0
 6112 0000 80B5     		push	{r7, lr}
 6113              	.LCFI251:
 6114              		.cfi_def_cfa_offset 8
 6115              		.cfi_offset 7, -8
 6116              		.cfi_offset 14, -4
 6117 0002 84B0     		sub	sp, sp, #16
 6118              	.LCFI252:
 6119              		.cfi_def_cfa_offset 24
 6120 0004 00AF     		add	r7, sp, #0
 6121              	.LCFI253:
 6122              		.cfi_def_cfa_register 7
 6123 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6124              		.loc 1 4016 16
 6125 0008 7B68     		ldr	r3, [r7, #4]
 6126 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6127              		.loc 1 4017 13
 6128 000c 0023     		movs	r3, #0
 6129 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6130              		.loc 1 4022 5
 6131 0010 7B68     		ldr	r3, [r7, #4]
 6132 0012 002B     		cmp	r3, #0
 6133 0014 51D0     		beq	.L384
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccfq1u8L.s 			page 183


4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6134              		.loc 1 4027 24
 6135 0016 BB68     		ldr	r3, [r7, #8]
 6136 0018 DA6A     		ldr	r2, [r3, #44]
 6137              		.loc 1 4027 51
 6138 001a 2A4B     		ldr	r3, .L391
 6139 001c 1B68     		ldr	r3, [r3]
 6140 001e DB6A     		ldr	r3, [r3, #44]
 6141              		.loc 1 4027 6
 6142 0020 9A42     		cmp	r2, r3
 6143 0022 41D2     		bcs	.L385
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6144              		.loc 1 4032 11
 6145 0024 BB68     		ldr	r3, [r7, #8]
 6146 0026 9B69     		ldr	r3, [r3, #24]
 6147              		.loc 1 4032 7
 6148 0028 002B     		cmp	r3, #0
 6149 002a 06DB     		blt	.L386
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6150              		.loc 1 4034 6
 6151 002c 254B     		ldr	r3, .L391
 6152 002e 1B68     		ldr	r3, [r3]
 6153 0030 DB6A     		ldr	r3, [r3, #44]
 6154 0032 C3F13802 		rsb	r2, r3, #56
 6155 0036 BB68     		ldr	r3, [r7, #8]
 6156 0038 9A61     		str	r2, [r3, #24]
 6157              	.L386:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6158              		.loc 1 4043 9
 6159 003a BB68     		ldr	r3, [r7, #8]
 6160 003c 5969     		ldr	r1, [r3, #20]
 6161 003e BB68     		ldr	r3, [r7, #8]
 6162 0040 DA6A     		ldr	r2, [r3, #44]
 6163 0042 1346     		mov	r3, r2
 6164 0044 9B00     		lsls	r3, r3, #2
 6165 0046 1344     		add	r3, r3, r2
 6166 0048 9B00     		lsls	r3, r3, #2
 6167 004a 1F4A     		ldr	r2, .L391+4
 6168 004c 1344     		add	r3, r3, r2
 6169              		.loc 1 4043 7
 6170 004e 9942     		cmp	r1, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 184


 6171 0050 22D1     		bne	.L387
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6172              		.loc 1 4045 10
 6173 0052 BB68     		ldr	r3, [r7, #8]
 6174 0054 0433     		adds	r3, r3, #4
 6175 0056 1846     		mov	r0, r3
 6176 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6177              		.loc 1 4058 49
 6178 005c 194B     		ldr	r3, .L391
 6179 005e 1B68     		ldr	r3, [r3]
 6180 0060 DA6A     		ldr	r2, [r3, #44]
 6181              		.loc 1 4058 35
 6182 0062 BB68     		ldr	r3, [r7, #8]
 6183 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6184              		.loc 1 4059 6
 6185 0066 BB68     		ldr	r3, [r7, #8]
 6186 0068 DA6A     		ldr	r2, [r3, #44]
 6187 006a 184B     		ldr	r3, .L391+8
 6188 006c 1B68     		ldr	r3, [r3]
 6189 006e 9A42     		cmp	r2, r3
 6190 0070 03D9     		bls	.L388
 6191              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6192 0072 BB68     		ldr	r3, [r7, #8]
 6193 0074 DB6A     		ldr	r3, [r3, #44]
 6194 0076 154A     		ldr	r2, .L391+8
 6195 0078 1360     		str	r3, [r2]
 6196              	.L388:
 6197              		.loc 1 4059 6 discriminator 3
 6198 007a BB68     		ldr	r3, [r7, #8]
 6199 007c DA6A     		ldr	r2, [r3, #44]
 6200 007e 1346     		mov	r3, r2
 6201 0080 9B00     		lsls	r3, r3, #2
 6202 0082 1344     		add	r3, r3, r2
 6203 0084 9B00     		lsls	r3, r3, #2
 6204 0086 104A     		ldr	r2, .L391+4
 6205 0088 1A44     		add	r2, r2, r3
 6206 008a BB68     		ldr	r3, [r7, #8]
 6207 008c 0433     		adds	r3, r3, #4
 6208 008e 1946     		mov	r1, r3
 6209 0090 1046     		mov	r0, r2
 6210 0092 FFF7FEFF 		bl	vListInsertEnd
 6211 0096 04E0     		b	.L389
ARM GAS  /tmp/ccfq1u8L.s 			page 185


 6212              	.L387:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6213              		.loc 1 4064 49 is_stmt 1
 6214 0098 0A4B     		ldr	r3, .L391
 6215 009a 1B68     		ldr	r3, [r3]
 6216 009c DA6A     		ldr	r2, [r3, #44]
 6217              		.loc 1 4064 35
 6218 009e BB68     		ldr	r3, [r7, #8]
 6219 00a0 DA62     		str	r2, [r3, #44]
 6220              	.L389:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6221              		.loc 1 4070 13
 6222 00a2 0123     		movs	r3, #1
 6223 00a4 FB60     		str	r3, [r7, #12]
 6224 00a6 08E0     		b	.L384
 6225              	.L385:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6226              		.loc 1 4074 25
 6227 00a8 BB68     		ldr	r3, [r7, #8]
 6228 00aa DA6C     		ldr	r2, [r3, #76]
 6229              		.loc 1 4074 56
 6230 00ac 054B     		ldr	r3, .L391
 6231 00ae 1B68     		ldr	r3, [r3]
 6232 00b0 DB6A     		ldr	r3, [r3, #44]
 6233              		.loc 1 4074 7
 6234 00b2 9A42     		cmp	r2, r3
 6235 00b4 01D2     		bcs	.L384
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6236              		.loc 1 4083 14
 6237 00b6 0123     		movs	r3, #1
 6238 00b8 FB60     		str	r3, [r7, #12]
 6239              	.L384:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccfq1u8L.s 			page 186


4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6240              		.loc 1 4096 10
 6241 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6242              		.loc 1 4097 2
 6243 00bc 1846     		mov	r0, r3
 6244 00be 1037     		adds	r7, r7, #16
 6245              	.LCFI254:
 6246              		.cfi_def_cfa_offset 8
 6247 00c0 BD46     		mov	sp, r7
 6248              	.LCFI255:
 6249              		.cfi_def_cfa_register 13
 6250              		@ sp needed
 6251 00c2 80BD     		pop	{r7, pc}
 6252              	.L392:
 6253              		.align	2
 6254              	.L391:
 6255 00c4 00000000 		.word	pxCurrentTCB
 6256 00c8 00000000 		.word	pxReadyTasksLists
 6257 00cc 00000000 		.word	uxTopReadyPriority
 6258              		.cfi_endproc
 6259              	.LFE53:
 6261              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6262              		.align	1
 6263              		.global	xTaskPriorityDisinherit
 6264              		.syntax unified
 6265              		.thumb
 6266              		.thumb_func
 6268              	xTaskPriorityDisinherit:
 6269              	.LFB54:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6270              		.loc 1 4105 2
 6271              		.cfi_startproc
 6272              		@ args = 0, pretend = 0, frame = 24
 6273              		@ frame_needed = 1, uses_anonymous_args = 0
 6274 0000 80B5     		push	{r7, lr}
 6275              	.LCFI256:
 6276              		.cfi_def_cfa_offset 8
 6277              		.cfi_offset 7, -8
 6278              		.cfi_offset 14, -4
 6279 0002 86B0     		sub	sp, sp, #24
 6280              	.LCFI257:
 6281              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccfq1u8L.s 			page 187


 6282 0004 00AF     		add	r7, sp, #0
 6283              	.LCFI258:
 6284              		.cfi_def_cfa_register 7
 6285 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6286              		.loc 1 4106 16
 6287 0008 7B68     		ldr	r3, [r7, #4]
 6288 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6289              		.loc 1 4107 13
 6290 000c 0023     		movs	r3, #0
 6291 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6292              		.loc 1 4109 5
 6293 0010 7B68     		ldr	r3, [r7, #4]
 6294 0012 002B     		cmp	r3, #0
 6295 0014 56D0     		beq	.L394
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6296              		.loc 1 4115 4
 6297 0016 2E4B     		ldr	r3, .L401
 6298 0018 1B68     		ldr	r3, [r3]
 6299 001a 3A69     		ldr	r2, [r7, #16]
 6300 001c 9A42     		cmp	r2, r3
 6301 001e 0AD0     		beq	.L395
 6302              	.LBB208:
 6303              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6304              		.loc 2 195 2
 6305              		.syntax unified
 6306              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6307 0020 4FF05003 			mov r3, #80												
 6308 0024 83F31188 		msr basepri, r3											
 6309 0028 BFF36F8F 		isb														
 6310 002c BFF34F8F 		dsb														
 6311              	
 6312              	@ 0 "" 2
 6313              		.thumb
 6314              		.syntax unified
 6315 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6316              		.loc 2 203 1
 6317 0032 00BF     		nop
 6318              	.L396:
 6319              	.LBE209:
 6320              	.LBE208:
 6321              		.loc 1 4115 4 discriminator 1
 6322 0034 FEE7     		b	.L396
 6323              	.L395:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6324              		.loc 1 4116 4
 6325 0036 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccfq1u8L.s 			page 188


 6326 0038 1B6D     		ldr	r3, [r3, #80]
 6327 003a 002B     		cmp	r3, #0
 6328 003c 0AD1     		bne	.L397
 6329              	.LBB210:
 6330              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6331              		.loc 2 195 2
 6332              		.syntax unified
 6333              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6334 003e 4FF05003 			mov r3, #80												
 6335 0042 83F31188 		msr basepri, r3											
 6336 0046 BFF36F8F 		isb														
 6337 004a BFF34F8F 		dsb														
 6338              	
 6339              	@ 0 "" 2
 6340              		.thumb
 6341              		.syntax unified
 6342 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6343              		.loc 2 203 1
 6344 0050 00BF     		nop
 6345              	.L398:
 6346              	.LBE211:
 6347              	.LBE210:
 6348              		.loc 1 4116 4 discriminator 2
 6349 0052 FEE7     		b	.L398
 6350              	.L397:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6351              		.loc 1 4117 11
 6352 0054 3B69     		ldr	r3, [r7, #16]
 6353 0056 1B6D     		ldr	r3, [r3, #80]
 6354              		.loc 1 4117 28
 6355 0058 5A1E     		subs	r2, r3, #1
 6356 005a 3B69     		ldr	r3, [r7, #16]
 6357 005c 1A65     		str	r2, [r3, #80]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6358              		.loc 1 4121 13
 6359 005e 3B69     		ldr	r3, [r7, #16]
 6360 0060 DA6A     		ldr	r2, [r3, #44]
 6361              		.loc 1 4121 34
 6362 0062 3B69     		ldr	r3, [r7, #16]
 6363 0064 DB6C     		ldr	r3, [r3, #76]
 6364              		.loc 1 4121 6
 6365 0066 9A42     		cmp	r2, r3
 6366 0068 2CD0     		beq	.L394
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6367              		.loc 1 4124 14
 6368 006a 3B69     		ldr	r3, [r7, #16]
 6369 006c 1B6D     		ldr	r3, [r3, #80]
 6370              		.loc 1 4124 7
 6371 006e 002B     		cmp	r3, #0
 6372 0070 28D1     		bne	.L394
ARM GAS  /tmp/ccfq1u8L.s 			page 189


4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6373              		.loc 1 4131 10
 6374 0072 3B69     		ldr	r3, [r7, #16]
 6375 0074 0433     		adds	r3, r3, #4
 6376 0076 1846     		mov	r0, r3
 6377 0078 FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6378              		.loc 1 4143 31
 6379 007c 3B69     		ldr	r3, [r7, #16]
 6380 007e DA6C     		ldr	r2, [r3, #76]
 6381              		.loc 1 4143 24
 6382 0080 3B69     		ldr	r3, [r7, #16]
 6383 0082 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6384              		.loc 1 4148 6
 6385 0084 3B69     		ldr	r3, [r7, #16]
 6386 0086 DB6A     		ldr	r3, [r3, #44]
 6387 0088 C3F13802 		rsb	r2, r3, #56
 6388 008c 3B69     		ldr	r3, [r7, #16]
 6389 008e 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6390              		.loc 1 4149 6
 6391 0090 3B69     		ldr	r3, [r7, #16]
 6392 0092 DA6A     		ldr	r2, [r3, #44]
 6393 0094 0F4B     		ldr	r3, .L401+4
 6394 0096 1B68     		ldr	r3, [r3]
 6395 0098 9A42     		cmp	r2, r3
 6396 009a 03D9     		bls	.L399
 6397              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6398 009c 3B69     		ldr	r3, [r7, #16]
 6399 009e DB6A     		ldr	r3, [r3, #44]
 6400 00a0 0C4A     		ldr	r2, .L401+4
 6401 00a2 1360     		str	r3, [r2]
 6402              	.L399:
 6403              		.loc 1 4149 6 discriminator 3
 6404 00a4 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccfq1u8L.s 			page 190


 6405 00a6 DA6A     		ldr	r2, [r3, #44]
 6406 00a8 1346     		mov	r3, r2
 6407 00aa 9B00     		lsls	r3, r3, #2
 6408 00ac 1344     		add	r3, r3, r2
 6409 00ae 9B00     		lsls	r3, r3, #2
 6410 00b0 094A     		ldr	r2, .L401+8
 6411 00b2 1A44     		add	r2, r2, r3
 6412 00b4 3B69     		ldr	r3, [r7, #16]
 6413 00b6 0433     		adds	r3, r3, #4
 6414 00b8 1946     		mov	r1, r3
 6415 00ba 1046     		mov	r0, r2
 6416 00bc FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6417              		.loc 1 4159 14 is_stmt 1 discriminator 3
 6418 00c0 0123     		movs	r3, #1
 6419 00c2 7B61     		str	r3, [r7, #20]
 6420              	.L394:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6421              		.loc 1 4176 10
 6422 00c4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6423              		.loc 1 4177 2
 6424 00c6 1846     		mov	r0, r3
 6425 00c8 1837     		adds	r7, r7, #24
 6426              	.LCFI259:
 6427              		.cfi_def_cfa_offset 8
 6428 00ca BD46     		mov	sp, r7
 6429              	.LCFI260:
 6430              		.cfi_def_cfa_register 13
 6431              		@ sp needed
 6432 00cc 80BD     		pop	{r7, pc}
 6433              	.L402:
ARM GAS  /tmp/ccfq1u8L.s 			page 191


 6434 00ce 00BF     		.align	2
 6435              	.L401:
 6436 00d0 00000000 		.word	pxCurrentTCB
 6437 00d4 00000000 		.word	uxTopReadyPriority
 6438 00d8 00000000 		.word	pxReadyTasksLists
 6439              		.cfi_endproc
 6440              	.LFE54:
 6442              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6443              		.align	1
 6444              		.global	vTaskPriorityDisinheritAfterTimeout
 6445              		.syntax unified
 6446              		.thumb
 6447              		.thumb_func
 6449              	vTaskPriorityDisinheritAfterTimeout:
 6450              	.LFB55:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6451              		.loc 1 4185 2
 6452              		.cfi_startproc
 6453              		@ args = 0, pretend = 0, frame = 32
 6454              		@ frame_needed = 1, uses_anonymous_args = 0
 6455 0000 80B5     		push	{r7, lr}
 6456              	.LCFI261:
 6457              		.cfi_def_cfa_offset 8
 6458              		.cfi_offset 7, -8
 6459              		.cfi_offset 14, -4
 6460 0002 88B0     		sub	sp, sp, #32
 6461              	.LCFI262:
 6462              		.cfi_def_cfa_offset 40
 6463 0004 00AF     		add	r7, sp, #0
 6464              	.LCFI263:
 6465              		.cfi_def_cfa_register 7
 6466 0006 7860     		str	r0, [r7, #4]
 6467 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6468              		.loc 1 4186 16
 6469 000a 7B68     		ldr	r3, [r7, #4]
 6470 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6471              		.loc 1 4188 20
 6472 000e 0123     		movs	r3, #1
 6473 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6474              		.loc 1 4190 5
 6475 0012 7B68     		ldr	r3, [r7, #4]
 6476 0014 002B     		cmp	r3, #0
 6477 0016 6AD0     		beq	.L413
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
ARM GAS  /tmp/ccfq1u8L.s 			page 192


4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6478              		.loc 1 4194 4
 6479 0018 BB69     		ldr	r3, [r7, #24]
 6480 001a 1B6D     		ldr	r3, [r3, #80]
 6481 001c 002B     		cmp	r3, #0
 6482 001e 0AD1     		bne	.L405
 6483              	.LBB212:
 6484              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6485              		.loc 2 195 2
 6486              		.syntax unified
 6487              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6488 0020 4FF05003 			mov r3, #80												
 6489 0024 83F31188 		msr basepri, r3											
 6490 0028 BFF36F8F 		isb														
 6491 002c BFF34F8F 		dsb														
 6492              	
 6493              	@ 0 "" 2
 6494              		.thumb
 6495              		.syntax unified
 6496 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6497              		.loc 2 203 1
 6498 0032 00BF     		nop
 6499              	.L406:
 6500              	.LBE213:
 6501              	.LBE212:
 6502              		.loc 1 4194 4 discriminator 1
 6503 0034 FEE7     		b	.L406
 6504              	.L405:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6505              		.loc 1 4200 13
 6506 0036 BB69     		ldr	r3, [r7, #24]
 6507 0038 DB6C     		ldr	r3, [r3, #76]
 6508              		.loc 1 4200 6
 6509 003a 3A68     		ldr	r2, [r7]
 6510 003c 9A42     		cmp	r2, r3
 6511 003e 02D9     		bls	.L407
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6512              		.loc 1 4202 21
 6513 0040 3B68     		ldr	r3, [r7]
 6514 0042 FB61     		str	r3, [r7, #28]
 6515 0044 02E0     		b	.L408
 6516              	.L407:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6517              		.loc 1 4206 21
 6518 0046 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccfq1u8L.s 			page 193


 6519 0048 DB6C     		ldr	r3, [r3, #76]
 6520 004a FB61     		str	r3, [r7, #28]
 6521              	.L408:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6522              		.loc 1 4210 13
 6523 004c BB69     		ldr	r3, [r7, #24]
 6524 004e DB6A     		ldr	r3, [r3, #44]
 6525              		.loc 1 4210 6
 6526 0050 FA69     		ldr	r2, [r7, #28]
 6527 0052 9A42     		cmp	r2, r3
 6528 0054 4BD0     		beq	.L413
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6529              		.loc 1 4216 14
 6530 0056 BB69     		ldr	r3, [r7, #24]
 6531 0058 1B6D     		ldr	r3, [r3, #80]
 6532              		.loc 1 4216 7
 6533 005a 7A69     		ldr	r2, [r7, #20]
 6534 005c 9A42     		cmp	r2, r3
 6535 005e 46D1     		bne	.L413
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6536              		.loc 1 4221 6
 6537 0060 254B     		ldr	r3, .L414
 6538 0062 1B68     		ldr	r3, [r3]
 6539 0064 BA69     		ldr	r2, [r7, #24]
 6540 0066 9A42     		cmp	r2, r3
 6541 0068 0AD1     		bne	.L409
 6542              	.LBB214:
 6543              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6544              		.loc 2 195 2
 6545              		.syntax unified
 6546              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6547 006a 4FF05003 			mov r3, #80												
 6548 006e 83F31188 		msr basepri, r3											
 6549 0072 BFF36F8F 		isb														
 6550 0076 BFF34F8F 		dsb														
 6551              	
 6552              	@ 0 "" 2
 6553              		.thumb
 6554              		.syntax unified
 6555 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6556              		.loc 2 203 1
 6557 007c 00BF     		nop
 6558              	.L410:
ARM GAS  /tmp/ccfq1u8L.s 			page 194


 6559              	.LBE215:
 6560              	.LBE214:
 6561              		.loc 1 4221 6 discriminator 2
 6562 007e FEE7     		b	.L410
 6563              	.L409:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6564              		.loc 1 4227 28
 6565 0080 BB69     		ldr	r3, [r7, #24]
 6566 0082 DB6A     		ldr	r3, [r3, #44]
 6567 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6568              		.loc 1 4228 24
 6569 0086 BB69     		ldr	r3, [r7, #24]
 6570 0088 FA69     		ldr	r2, [r7, #28]
 6571 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6572              		.loc 1 4232 12
 6573 008c BB69     		ldr	r3, [r7, #24]
 6574 008e 9B69     		ldr	r3, [r3, #24]
 6575              		.loc 1 4232 8
 6576 0090 002B     		cmp	r3, #0
 6577 0092 04DB     		blt	.L411
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6578              		.loc 1 4234 7
 6579 0094 FB69     		ldr	r3, [r7, #28]
 6580 0096 C3F13802 		rsb	r2, r3, #56
 6581 009a BB69     		ldr	r3, [r7, #24]
 6582 009c 9A61     		str	r2, [r3, #24]
 6583              	.L411:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6584              		.loc 1 4247 10
 6585 009e BB69     		ldr	r3, [r7, #24]
 6586 00a0 5969     		ldr	r1, [r3, #20]
 6587 00a2 3A69     		ldr	r2, [r7, #16]
 6588 00a4 1346     		mov	r3, r2
 6589 00a6 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccfq1u8L.s 			page 195


 6590 00a8 1344     		add	r3, r3, r2
 6591 00aa 9B00     		lsls	r3, r3, #2
 6592 00ac 134A     		ldr	r2, .L414+4
 6593 00ae 1344     		add	r3, r3, r2
 6594              		.loc 1 4247 8
 6595 00b0 9942     		cmp	r1, r3
 6596 00b2 1CD1     		bne	.L413
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6597              		.loc 1 4249 11
 6598 00b4 BB69     		ldr	r3, [r7, #24]
 6599 00b6 0433     		adds	r3, r3, #4
 6600 00b8 1846     		mov	r0, r3
 6601 00ba FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6602              		.loc 1 4261 7
 6603 00be BB69     		ldr	r3, [r7, #24]
 6604 00c0 DA6A     		ldr	r2, [r3, #44]
 6605 00c2 0F4B     		ldr	r3, .L414+8
 6606 00c4 1B68     		ldr	r3, [r3]
 6607 00c6 9A42     		cmp	r2, r3
 6608 00c8 03D9     		bls	.L412
 6609              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6610 00ca BB69     		ldr	r3, [r7, #24]
 6611 00cc DB6A     		ldr	r3, [r3, #44]
 6612 00ce 0C4A     		ldr	r2, .L414+8
 6613 00d0 1360     		str	r3, [r2]
 6614              	.L412:
 6615              		.loc 1 4261 7 discriminator 3
 6616 00d2 BB69     		ldr	r3, [r7, #24]
 6617 00d4 DA6A     		ldr	r2, [r3, #44]
 6618 00d6 1346     		mov	r3, r2
 6619 00d8 9B00     		lsls	r3, r3, #2
 6620 00da 1344     		add	r3, r3, r2
 6621 00dc 9B00     		lsls	r3, r3, #2
 6622 00de 074A     		ldr	r2, .L414+4
 6623 00e0 1A44     		add	r2, r2, r3
 6624 00e2 BB69     		ldr	r3, [r7, #24]
 6625 00e4 0433     		adds	r3, r3, #4
 6626 00e6 1946     		mov	r1, r3
 6627 00e8 1046     		mov	r0, r2
 6628 00ea FFF7FEFF 		bl	vListInsertEnd
 6629              	.L413:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccfq1u8L.s 			page 196


4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6630              		.loc 1 4282 2 is_stmt 1
 6631 00ee 00BF     		nop
 6632 00f0 2037     		adds	r7, r7, #32
 6633              	.LCFI264:
 6634              		.cfi_def_cfa_offset 8
 6635 00f2 BD46     		mov	sp, r7
 6636              	.LCFI265:
 6637              		.cfi_def_cfa_register 13
 6638              		@ sp needed
 6639 00f4 80BD     		pop	{r7, pc}
 6640              	.L415:
 6641 00f6 00BF     		.align	2
 6642              	.L414:
 6643 00f8 00000000 		.word	pxCurrentTCB
 6644 00fc 00000000 		.word	pxReadyTasksLists
 6645 0100 00000000 		.word	uxTopReadyPriority
 6646              		.cfi_endproc
 6647              	.LFE55:
 6649              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6650              		.align	1
 6651              		.global	uxTaskResetEventItemValue
 6652              		.syntax unified
 6653              		.thumb
 6654              		.thumb_func
 6656              	uxTaskResetEventItemValue:
 6657              	.LFB56:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
ARM GAS  /tmp/ccfq1u8L.s 			page 197


4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
ARM GAS  /tmp/ccfq1u8L.s 			page 198


4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
ARM GAS  /tmp/ccfq1u8L.s 			page 199


4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccfq1u8L.s 			page 200


4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
ARM GAS  /tmp/ccfq1u8L.s 			page 201


4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 202


4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6658              		.loc 1 4603 1
 6659              		.cfi_startproc
 6660              		@ args = 0, pretend = 0, frame = 8
 6661              		@ frame_needed = 1, uses_anonymous_args = 0
 6662              		@ link register save eliminated.
 6663 0000 80B4     		push	{r7}
 6664              	.LCFI266:
 6665              		.cfi_def_cfa_offset 4
 6666              		.cfi_offset 7, -4
 6667 0002 83B0     		sub	sp, sp, #12
 6668              	.LCFI267:
 6669              		.cfi_def_cfa_offset 16
 6670 0004 00AF     		add	r7, sp, #0
 6671              	.LCFI268:
 6672              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6673              		.loc 1 4606 13
 6674 0006 094B     		ldr	r3, .L418
 6675 0008 1B68     		ldr	r3, [r3]
 6676              		.loc 1 4606 11
 6677 000a 9B69     		ldr	r3, [r3, #24]
 6678 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6679              		.loc 1 4610 2
 6680 000e 074B     		ldr	r3, .L418
 6681 0010 1B68     		ldr	r3, [r3]
 6682 0012 DA6A     		ldr	r2, [r3, #44]
 6683 0014 054B     		ldr	r3, .L418
 6684 0016 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 203


 6685 0018 C2F13802 		rsb	r2, r2, #56
 6686 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6687              		.loc 1 4612 9
 6688 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6689              		.loc 1 4613 1
 6690 0020 1846     		mov	r0, r3
 6691 0022 0C37     		adds	r7, r7, #12
 6692              	.LCFI269:
 6693              		.cfi_def_cfa_offset 4
 6694 0024 BD46     		mov	sp, r7
 6695              	.LCFI270:
 6696              		.cfi_def_cfa_register 13
 6697              		@ sp needed
 6698 0026 5DF8047B 		ldr	r7, [sp], #4
 6699              	.LCFI271:
 6700              		.cfi_restore 7
 6701              		.cfi_def_cfa_offset 0
 6702 002a 7047     		bx	lr
 6703              	.L419:
 6704              		.align	2
 6705              	.L418:
 6706 002c 00000000 		.word	pxCurrentTCB
 6707              		.cfi_endproc
 6708              	.LFE56:
 6710              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6711              		.align	1
 6712              		.global	pvTaskIncrementMutexHeldCount
 6713              		.syntax unified
 6714              		.thumb
 6715              		.thumb_func
 6717              	pvTaskIncrementMutexHeldCount:
 6718              	.LFB57:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6719              		.loc 1 4619 2
 6720              		.cfi_startproc
 6721              		@ args = 0, pretend = 0, frame = 0
 6722              		@ frame_needed = 1, uses_anonymous_args = 0
 6723              		@ link register save eliminated.
 6724 0000 80B4     		push	{r7}
 6725              	.LCFI272:
 6726              		.cfi_def_cfa_offset 4
 6727              		.cfi_offset 7, -4
 6728 0002 00AF     		add	r7, sp, #0
 6729              	.LCFI273:
 6730              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6731              		.loc 1 4622 20
ARM GAS  /tmp/ccfq1u8L.s 			page 204


 6732 0004 074B     		ldr	r3, .L423
 6733 0006 1B68     		ldr	r3, [r3]
 6734              		.loc 1 4622 5
 6735 0008 002B     		cmp	r3, #0
 6736 000a 04D0     		beq	.L421
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6737              		.loc 1 4624 18
 6738 000c 054B     		ldr	r3, .L423
 6739 000e 1B68     		ldr	r3, [r3]
 6740 0010 1A6D     		ldr	r2, [r3, #80]
 6741              		.loc 1 4624 35
 6742 0012 0132     		adds	r2, r2, #1
 6743 0014 1A65     		str	r2, [r3, #80]
 6744              	.L421:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6745              		.loc 1 4627 10
 6746 0016 034B     		ldr	r3, .L423
 6747 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6748              		.loc 1 4628 2
 6749 001a 1846     		mov	r0, r3
 6750 001c BD46     		mov	sp, r7
 6751              	.LCFI274:
 6752              		.cfi_def_cfa_register 13
 6753              		@ sp needed
 6754 001e 5DF8047B 		ldr	r7, [sp], #4
 6755              	.LCFI275:
 6756              		.cfi_restore 7
 6757              		.cfi_def_cfa_offset 0
 6758 0022 7047     		bx	lr
 6759              	.L424:
 6760              		.align	2
 6761              	.L423:
 6762 0024 00000000 		.word	pxCurrentTCB
 6763              		.cfi_endproc
 6764              	.LFE57:
 6766              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6767              		.align	1
 6768              		.global	ulTaskNotifyTake
 6769              		.syntax unified
 6770              		.thumb
 6771              		.thumb_func
 6773              	ulTaskNotifyTake:
 6774              	.LFB58:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6775              		.loc 1 4636 2
 6776              		.cfi_startproc
ARM GAS  /tmp/ccfq1u8L.s 			page 205


 6777              		@ args = 0, pretend = 0, frame = 16
 6778              		@ frame_needed = 1, uses_anonymous_args = 0
 6779 0000 80B5     		push	{r7, lr}
 6780              	.LCFI276:
 6781              		.cfi_def_cfa_offset 8
 6782              		.cfi_offset 7, -8
 6783              		.cfi_offset 14, -4
 6784 0002 84B0     		sub	sp, sp, #16
 6785              	.LCFI277:
 6786              		.cfi_def_cfa_offset 24
 6787 0004 00AF     		add	r7, sp, #0
 6788              	.LCFI278:
 6789              		.cfi_def_cfa_register 7
 6790 0006 7860     		str	r0, [r7, #4]
 6791 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6792              		.loc 1 4639 3
 6793 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6794              		.loc 1 4642 20
 6795 000e 204B     		ldr	r3, .L430
 6796 0010 1B68     		ldr	r3, [r3]
 6797 0012 D3F88034 		ldr	r3, [r3, #1152]
 6798              		.loc 1 4642 6
 6799 0016 002B     		cmp	r3, #0
 6800 0018 13D1     		bne	.L426
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6801              		.loc 1 4645 17
 6802 001a 1D4B     		ldr	r3, .L430
 6803 001c 1B68     		ldr	r3, [r3]
 6804              		.loc 1 4645 33
 6805 001e 0122     		movs	r2, #1
 6806 0020 83F88424 		strb	r2, [r3, #1156]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6807              		.loc 1 4647 7
 6808 0024 3B68     		ldr	r3, [r7]
 6809 0026 002B     		cmp	r3, #0
 6810 0028 0BD0     		beq	.L426
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6811              		.loc 1 4649 6
 6812 002a 0121     		movs	r1, #1
 6813 002c 3868     		ldr	r0, [r7]
 6814 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
ARM GAS  /tmp/ccfq1u8L.s 			page 206


4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6815              		.loc 1 4656 6
 6816 0032 184B     		ldr	r3, .L430+4
 6817 0034 4FF08052 		mov	r2, #268435456
 6818 0038 1A60     		str	r2, [r3]
 6819              		.syntax unified
 6820              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6821 003a BFF34F8F 		dsb
 6822              	@ 0 "" 2
 6823              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6824 003e BFF36F8F 		isb
 6825              	@ 0 "" 2
 6826              		.thumb
 6827              		.syntax unified
 6828              	.L426:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6829              		.loc 1 4668 3
 6830 0042 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6831              		.loc 1 4670 3
 6832 0046 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6833              		.loc 1 4673 27
 6834 004a 114B     		ldr	r3, .L430
 6835 004c 1B68     		ldr	r3, [r3]
 6836              		.loc 1 4673 13
 6837 004e D3F88034 		ldr	r3, [r3, #1152]
 6838 0052 FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6839              		.loc 1 4675 6
 6840 0054 FB68     		ldr	r3, [r7, #12]
 6841 0056 002B     		cmp	r3, #0
 6842 0058 0ED0     		beq	.L427
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6843              		.loc 1 4677 7
 6844 005a 7B68     		ldr	r3, [r7, #4]
 6845 005c 002B     		cmp	r3, #0
 6846 005e 05D0     		beq	.L428
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6847              		.loc 1 4679 18
ARM GAS  /tmp/ccfq1u8L.s 			page 207


 6848 0060 0B4B     		ldr	r3, .L430
 6849 0062 1B68     		ldr	r3, [r3]
 6850              		.loc 1 4679 36
 6851 0064 0022     		movs	r2, #0
 6852 0066 C3F88024 		str	r2, [r3, #1152]
 6853 006a 05E0     		b	.L427
 6854              	.L428:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6855              		.loc 1 4683 18
 6856 006c 084B     		ldr	r3, .L430
 6857 006e 1B68     		ldr	r3, [r3]
 6858              		.loc 1 4683 47
 6859 0070 FA68     		ldr	r2, [r7, #12]
 6860 0072 013A     		subs	r2, r2, #1
 6861              		.loc 1 4683 36
 6862 0074 C3F88024 		str	r2, [r3, #1152]
 6863              	.L427:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6864              		.loc 1 4691 16
 6865 0078 054B     		ldr	r3, .L430
 6866 007a 1B68     		ldr	r3, [r3]
 6867              		.loc 1 4691 32
 6868 007c 0022     		movs	r2, #0
 6869 007e 83F88424 		strb	r2, [r3, #1156]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6870              		.loc 1 4693 3
 6871 0082 FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6872              		.loc 1 4695 10
 6873 0086 FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6874              		.loc 1 4696 2
 6875 0088 1846     		mov	r0, r3
 6876 008a 1037     		adds	r7, r7, #16
 6877              	.LCFI279:
 6878              		.cfi_def_cfa_offset 8
 6879 008c BD46     		mov	sp, r7
 6880              	.LCFI280:
 6881              		.cfi_def_cfa_register 13
 6882              		@ sp needed
 6883 008e 80BD     		pop	{r7, pc}
 6884              	.L431:
 6885              		.align	2
 6886              	.L430:
 6887 0090 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/ccfq1u8L.s 			page 208


 6888 0094 04ED00E0 		.word	-536810236
 6889              		.cfi_endproc
 6890              	.LFE58:
 6892              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6893              		.align	1
 6894              		.global	xTaskNotifyWait
 6895              		.syntax unified
 6896              		.thumb
 6897              		.thumb_func
 6899              	xTaskNotifyWait:
 6900              	.LFB59:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6901              		.loc 1 4704 2
 6902              		.cfi_startproc
 6903              		@ args = 0, pretend = 0, frame = 24
 6904              		@ frame_needed = 1, uses_anonymous_args = 0
 6905 0000 80B5     		push	{r7, lr}
 6906              	.LCFI281:
 6907              		.cfi_def_cfa_offset 8
 6908              		.cfi_offset 7, -8
 6909              		.cfi_offset 14, -4
 6910 0002 86B0     		sub	sp, sp, #24
 6911              	.LCFI282:
 6912              		.cfi_def_cfa_offset 32
 6913 0004 00AF     		add	r7, sp, #0
 6914              	.LCFI283:
 6915              		.cfi_def_cfa_register 7
 6916 0006 F860     		str	r0, [r7, #12]
 6917 0008 B960     		str	r1, [r7, #8]
 6918 000a 7A60     		str	r2, [r7, #4]
 6919 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6920              		.loc 1 4707 3
 6921 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6922              		.loc 1 4710 20
 6923 0012 294B     		ldr	r3, .L438
 6924 0014 1B68     		ldr	r3, [r3]
 6925 0016 93F88434 		ldrb	r3, [r3, #1156]
 6926 001a DBB2     		uxtb	r3, r3
 6927              		.loc 1 4710 6
 6928 001c 022B     		cmp	r3, #2
 6929 001e 1CD0     		beq	.L433
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
ARM GAS  /tmp/ccfq1u8L.s 			page 209


4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6930              		.loc 1 4715 35
 6931 0020 254B     		ldr	r3, .L438
 6932 0022 1B68     		ldr	r3, [r3]
 6933 0024 D3F88014 		ldr	r1, [r3, #1152]
 6934              		.loc 1 4715 38
 6935 0028 FA68     		ldr	r2, [r7, #12]
 6936 002a D243     		mvns	r2, r2
 6937              		.loc 1 4715 35
 6938 002c 0A40     		ands	r2, r2, r1
 6939 002e C3F88024 		str	r2, [r3, #1152]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6940              		.loc 1 4718 17
 6941 0032 214B     		ldr	r3, .L438
 6942 0034 1B68     		ldr	r3, [r3]
 6943              		.loc 1 4718 33
 6944 0036 0122     		movs	r2, #1
 6945 0038 83F88424 		strb	r2, [r3, #1156]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6946              		.loc 1 4720 7
 6947 003c 3B68     		ldr	r3, [r7]
 6948 003e 002B     		cmp	r3, #0
 6949 0040 0BD0     		beq	.L433
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6950              		.loc 1 4722 6
 6951 0042 0121     		movs	r1, #1
 6952 0044 3868     		ldr	r0, [r7]
 6953 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6954              		.loc 1 4729 6
 6955 004a 1C4B     		ldr	r3, .L438+4
 6956 004c 4FF08052 		mov	r2, #268435456
 6957 0050 1A60     		str	r2, [r3]
 6958              		.syntax unified
 6959              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6960 0052 BFF34F8F 		dsb
 6961              	@ 0 "" 2
 6962              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6963 0056 BFF36F8F 		isb
 6964              	@ 0 "" 2
 6965              		.thumb
 6966              		.syntax unified
 6967              	.L433:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccfq1u8L.s 			page 210


4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6968              		.loc 1 4741 3
 6969 005a FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6970              		.loc 1 4743 3
 6971 005e FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6972              		.loc 1 4747 6
 6973 0062 7B68     		ldr	r3, [r7, #4]
 6974 0064 002B     		cmp	r3, #0
 6975 0066 05D0     		beq	.L434
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6976              		.loc 1 4751 41
 6977 0068 134B     		ldr	r3, .L438
 6978 006a 1B68     		ldr	r3, [r3]
 6979 006c D3F88024 		ldr	r2, [r3, #1152]
 6980              		.loc 1 4751 27
 6981 0070 7B68     		ldr	r3, [r7, #4]
 6982 0072 1A60     		str	r2, [r3]
 6983              	.L434:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6984              		.loc 1 4758 20
 6985 0074 104B     		ldr	r3, .L438
 6986 0076 1B68     		ldr	r3, [r3]
 6987 0078 93F88434 		ldrb	r3, [r3, #1156]
 6988 007c DBB2     		uxtb	r3, r3
 6989              		.loc 1 4758 6
 6990 007e 022B     		cmp	r3, #2
 6991 0080 02D0     		beq	.L435
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6992              		.loc 1 4761 13
 6993 0082 0023     		movs	r3, #0
 6994 0084 7B61     		str	r3, [r7, #20]
 6995 0086 0AE0     		b	.L436
ARM GAS  /tmp/ccfq1u8L.s 			page 211


 6996              	.L435:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6997              		.loc 1 4767 35
 6998 0088 0B4B     		ldr	r3, .L438
 6999 008a 1B68     		ldr	r3, [r3]
 7000 008c D3F88014 		ldr	r1, [r3, #1152]
 7001              		.loc 1 4767 38
 7002 0090 BA68     		ldr	r2, [r7, #8]
 7003 0092 D243     		mvns	r2, r2
 7004              		.loc 1 4767 35
 7005 0094 0A40     		ands	r2, r2, r1
 7006 0096 C3F88024 		str	r2, [r3, #1152]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7007              		.loc 1 4768 13
 7008 009a 0123     		movs	r3, #1
 7009 009c 7B61     		str	r3, [r7, #20]
 7010              	.L436:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7011              		.loc 1 4771 16
 7012 009e 064B     		ldr	r3, .L438
 7013 00a0 1B68     		ldr	r3, [r3]
 7014              		.loc 1 4771 32
 7015 00a2 0022     		movs	r2, #0
 7016 00a4 83F88424 		strb	r2, [r3, #1156]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7017              		.loc 1 4773 3
 7018 00a8 FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7019              		.loc 1 4775 10
 7020 00ac 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7021              		.loc 1 4776 2
 7022 00ae 1846     		mov	r0, r3
 7023 00b0 1837     		adds	r7, r7, #24
 7024              	.LCFI284:
 7025              		.cfi_def_cfa_offset 8
 7026 00b2 BD46     		mov	sp, r7
 7027              	.LCFI285:
 7028              		.cfi_def_cfa_register 13
 7029              		@ sp needed
 7030 00b4 80BD     		pop	{r7, pc}
 7031              	.L439:
 7032 00b6 00BF     		.align	2
 7033              	.L438:
 7034 00b8 00000000 		.word	pxCurrentTCB
 7035 00bc 04ED00E0 		.word	-536810236
 7036              		.cfi_endproc
 7037              	.LFE59:
ARM GAS  /tmp/ccfq1u8L.s 			page 212


 7039              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7040              		.align	1
 7041              		.global	xTaskGenericNotify
 7042              		.syntax unified
 7043              		.thumb
 7044              		.thumb_func
 7046              	xTaskGenericNotify:
 7047              	.LFB60:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7048              		.loc 1 4784 2
 7049              		.cfi_startproc
 7050              		@ args = 0, pretend = 0, frame = 40
 7051              		@ frame_needed = 1, uses_anonymous_args = 0
 7052 0000 80B5     		push	{r7, lr}
 7053              	.LCFI286:
 7054              		.cfi_def_cfa_offset 8
 7055              		.cfi_offset 7, -8
 7056              		.cfi_offset 14, -4
 7057 0002 8AB0     		sub	sp, sp, #40
 7058              	.LCFI287:
 7059              		.cfi_def_cfa_offset 48
 7060 0004 00AF     		add	r7, sp, #0
 7061              	.LCFI288:
 7062              		.cfi_def_cfa_register 7
 7063 0006 F860     		str	r0, [r7, #12]
 7064 0008 B960     		str	r1, [r7, #8]
 7065 000a 3B60     		str	r3, [r7]
 7066 000c 1346     		mov	r3, r2
 7067 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7068              		.loc 1 4786 13
 7069 0010 0123     		movs	r3, #1
 7070 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7071              		.loc 1 4789 3
 7072 0014 FB68     		ldr	r3, [r7, #12]
 7073 0016 002B     		cmp	r3, #0
 7074 0018 0AD1     		bne	.L441
 7075              	.LBB216:
 7076              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7077              		.loc 2 195 2
 7078              		.syntax unified
 7079              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7080 001a 4FF05003 			mov r3, #80												
 7081 001e 83F31188 		msr basepri, r3											
 7082 0022 BFF36F8F 		isb														
ARM GAS  /tmp/ccfq1u8L.s 			page 213


 7083 0026 BFF34F8F 		dsb														
 7084              	
 7085              	@ 0 "" 2
 7086              		.thumb
 7087              		.syntax unified
 7088 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7089              		.loc 2 203 1
 7090 002c 00BF     		nop
 7091              	.L442:
 7092              	.LBE217:
 7093              	.LBE216:
 7094              		.loc 1 4789 3 discriminator 1
 7095 002e FEE7     		b	.L442
 7096              	.L441:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7097              		.loc 1 4790 9
 7098 0030 FB68     		ldr	r3, [r7, #12]
 7099 0032 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7100              		.loc 1 4792 3
 7101 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7102              		.loc 1 4794 6
 7103 0038 3B68     		ldr	r3, [r7]
 7104 003a 002B     		cmp	r3, #0
 7105 003c 04D0     		beq	.L443
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7106              		.loc 1 4796 42
 7107 003e 3B6A     		ldr	r3, [r7, #32]
 7108 0040 D3F88024 		ldr	r2, [r3, #1152]
 7109              		.loc 1 4796 35
 7110 0044 3B68     		ldr	r3, [r7]
 7111 0046 1A60     		str	r2, [r3]
 7112              	.L443:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7113              		.loc 1 4799 26
 7114 0048 3B6A     		ldr	r3, [r7, #32]
 7115 004a 93F88434 		ldrb	r3, [r3, #1156]
 7116 004e FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7117              		.loc 1 4801 25
 7118 0050 3B6A     		ldr	r3, [r7, #32]
 7119 0052 0222     		movs	r2, #2
 7120 0054 83F88424 		strb	r2, [r3, #1156]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7121              		.loc 1 4803 4
 7122 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7123 005a 042B     		cmp	r3, #4
 7124 005c 2DD8     		bhi	.L444
ARM GAS  /tmp/ccfq1u8L.s 			page 214


 7125 005e 01A2     		adr	r2, .L446
 7126 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7127              		.p2align 2
 7128              	.L446:
 7129 0064 DD000000 		.word	.L461+1
 7130 0068 79000000 		.word	.L449+1
 7131 006c 8B000000 		.word	.L448+1
 7132 0070 9B000000 		.word	.L447+1
 7133 0074 A5000000 		.word	.L445+1
 7134              		.p2align 1
 7135              	.L449:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7136              		.loc 1 4806 29
 7137 0078 3B6A     		ldr	r3, [r7, #32]
 7138 007a D3F88024 		ldr	r2, [r3, #1152]
 7139 007e BB68     		ldr	r3, [r7, #8]
 7140 0080 1A43     		orrs	r2, r2, r3
 7141 0082 3B6A     		ldr	r3, [r7, #32]
 7142 0084 C3F88024 		str	r2, [r3, #1152]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7143              		.loc 1 4807 6
 7144 0088 2BE0     		b	.L451
 7145              	.L448:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7146              		.loc 1 4810 13
 7147 008a 3B6A     		ldr	r3, [r7, #32]
 7148 008c D3F88034 		ldr	r3, [r3, #1152]
 7149              		.loc 1 4810 32
 7150 0090 5A1C     		adds	r2, r3, #1
 7151 0092 3B6A     		ldr	r3, [r7, #32]
 7152 0094 C3F88024 		str	r2, [r3, #1152]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7153              		.loc 1 4811 6
 7154 0098 23E0     		b	.L451
 7155              	.L447:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7156              		.loc 1 4814 29
 7157 009a 3B6A     		ldr	r3, [r7, #32]
 7158 009c BA68     		ldr	r2, [r7, #8]
 7159 009e C3F88024 		str	r2, [r3, #1152]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7160              		.loc 1 4815 6
 7161 00a2 1EE0     		b	.L451
 7162              	.L445:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7163              		.loc 1 4818 8
 7164 00a4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7165 00a6 022B     		cmp	r3, #2
 7166 00a8 04D0     		beq	.L452
ARM GAS  /tmp/ccfq1u8L.s 			page 215


4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7167              		.loc 1 4820 30
 7168 00aa 3B6A     		ldr	r3, [r7, #32]
 7169 00ac BA68     		ldr	r2, [r7, #8]
 7170 00ae C3F88024 		str	r2, [r3, #1152]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7171              		.loc 1 4827 6
 7172 00b2 16E0     		b	.L451
 7173              	.L452:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7174              		.loc 1 4825 15
 7175 00b4 0023     		movs	r3, #0
 7176 00b6 7B62     		str	r3, [r7, #36]
 7177              		.loc 1 4827 6
 7178 00b8 13E0     		b	.L451
 7179              	.L444:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7180              		.loc 1 4838 6
 7181 00ba 3B6A     		ldr	r3, [r7, #32]
 7182 00bc D3F88034 		ldr	r3, [r3, #1152]
 7183 00c0 B3F1FF3F 		cmp	r3, #-1
 7184 00c4 0CD0     		beq	.L462
 7185              	.LBB218:
 7186              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7187              		.loc 2 195 2
 7188              		.syntax unified
 7189              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7190 00c6 4FF05003 			mov r3, #80												
 7191 00ca 83F31188 		msr basepri, r3											
 7192 00ce BFF36F8F 		isb														
 7193 00d2 BFF34F8F 		dsb														
 7194              	
 7195              	@ 0 "" 2
 7196              		.thumb
 7197              		.syntax unified
 7198 00d6 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7199              		.loc 2 203 1
 7200 00d8 00BF     		nop
ARM GAS  /tmp/ccfq1u8L.s 			page 216


 7201              	.L455:
 7202              	.LBE219:
 7203              	.LBE218:
 7204              		.loc 1 4838 6 discriminator 2
 7205 00da FEE7     		b	.L455
 7206              	.L461:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7207              		.loc 1 4832 6
 7208 00dc 00BF     		nop
 7209 00de 00E0     		b	.L451
 7210              	.L462:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7211              		.loc 1 4840 6
 7212 00e0 00BF     		nop
 7213              	.L451:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7214              		.loc 1 4847 6
 7215 00e2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7216 00e4 012B     		cmp	r3, #1
 7217 00e6 3AD1     		bne	.L456
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7218              		.loc 1 4849 14
 7219 00e8 3B6A     		ldr	r3, [r7, #32]
 7220 00ea 0433     		adds	r3, r3, #4
 7221 00ec 1846     		mov	r0, r3
 7222 00ee FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7223              		.loc 1 4850 5
 7224 00f2 3B6A     		ldr	r3, [r7, #32]
 7225 00f4 DA6A     		ldr	r2, [r3, #44]
 7226 00f6 1D4B     		ldr	r3, .L463
 7227 00f8 1B68     		ldr	r3, [r3]
 7228 00fa 9A42     		cmp	r2, r3
 7229 00fc 03D9     		bls	.L457
 7230              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7231 00fe 3B6A     		ldr	r3, [r7, #32]
 7232 0100 DB6A     		ldr	r3, [r3, #44]
 7233 0102 1A4A     		ldr	r2, .L463
 7234 0104 1360     		str	r3, [r2]
 7235              	.L457:
 7236              		.loc 1 4850 5 discriminator 3
 7237 0106 3B6A     		ldr	r3, [r7, #32]
 7238 0108 DA6A     		ldr	r2, [r3, #44]
 7239 010a 1346     		mov	r3, r2
 7240 010c 9B00     		lsls	r3, r3, #2
 7241 010e 1344     		add	r3, r3, r2
 7242 0110 9B00     		lsls	r3, r3, #2
 7243 0112 174A     		ldr	r2, .L463+4
 7244 0114 1A44     		add	r2, r2, r3
ARM GAS  /tmp/ccfq1u8L.s 			page 217


 7245 0116 3B6A     		ldr	r3, [r7, #32]
 7246 0118 0433     		adds	r3, r3, #4
 7247 011a 1946     		mov	r1, r3
 7248 011c 1046     		mov	r0, r2
 7249 011e FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7250              		.loc 1 4853 5 is_stmt 1 discriminator 3
 7251 0122 3B6A     		ldr	r3, [r7, #32]
 7252 0124 9B6A     		ldr	r3, [r3, #40]
 7253 0126 002B     		cmp	r3, #0
 7254 0128 0AD0     		beq	.L458
 7255              	.LBB220:
 7256              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7257              		.loc 2 195 2
 7258              		.syntax unified
 7259              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7260 012a 4FF05003 			mov r3, #80												
 7261 012e 83F31188 		msr basepri, r3											
 7262 0132 BFF36F8F 		isb														
 7263 0136 BFF34F8F 		dsb														
 7264              	
 7265              	@ 0 "" 2
 7266              		.thumb
 7267              		.syntax unified
 7268 013a 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7269              		.loc 2 203 1
 7270 013c 00BF     		nop
 7271              	.L459:
 7272              	.LBE221:
 7273              	.LBE220:
 7274              		.loc 1 4853 5 discriminator 3
 7275 013e FEE7     		b	.L459
 7276              	.L458:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7277              		.loc 1 4871 14
 7278 0140 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccfq1u8L.s 			page 218


 7279 0142 DA6A     		ldr	r2, [r3, #44]
 7280              		.loc 1 4871 41
 7281 0144 0B4B     		ldr	r3, .L463+8
 7282 0146 1B68     		ldr	r3, [r3]
 7283 0148 DB6A     		ldr	r3, [r3, #44]
 7284              		.loc 1 4871 7
 7285 014a 9A42     		cmp	r2, r3
 7286 014c 07D9     		bls	.L456
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7287              		.loc 1 4875 6
 7288 014e 0A4B     		ldr	r3, .L463+12
 7289 0150 4FF08052 		mov	r2, #268435456
 7290 0154 1A60     		str	r2, [r3]
 7291              		.syntax unified
 7292              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7293 0156 BFF34F8F 		dsb
 7294              	@ 0 "" 2
 7295              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7296 015a BFF36F8F 		isb
 7297              	@ 0 "" 2
 7298              		.thumb
 7299              		.syntax unified
 7300              	.L456:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7301              		.loc 1 4887 3
 7302 015e FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7303              		.loc 1 4889 10
 7304 0162 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7305              		.loc 1 4890 2
 7306 0164 1846     		mov	r0, r3
 7307 0166 2837     		adds	r7, r7, #40
 7308              	.LCFI289:
 7309              		.cfi_def_cfa_offset 8
 7310 0168 BD46     		mov	sp, r7
 7311              	.LCFI290:
 7312              		.cfi_def_cfa_register 13
 7313              		@ sp needed
 7314 016a 80BD     		pop	{r7, pc}
 7315              	.L464:
 7316              		.align	2
ARM GAS  /tmp/ccfq1u8L.s 			page 219


 7317              	.L463:
 7318 016c 00000000 		.word	uxTopReadyPriority
 7319 0170 00000000 		.word	pxReadyTasksLists
 7320 0174 00000000 		.word	pxCurrentTCB
 7321 0178 04ED00E0 		.word	-536810236
 7322              		.cfi_endproc
 7323              	.LFE60:
 7325              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7326              		.align	1
 7327              		.global	xTaskGenericNotifyFromISR
 7328              		.syntax unified
 7329              		.thumb
 7330              		.thumb_func
 7332              	xTaskGenericNotifyFromISR:
 7333              	.LFB61:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7334              		.loc 1 4898 2
 7335              		.cfi_startproc
 7336              		@ args = 4, pretend = 0, frame = 56
 7337              		@ frame_needed = 1, uses_anonymous_args = 0
 7338 0000 80B5     		push	{r7, lr}
 7339              	.LCFI291:
 7340              		.cfi_def_cfa_offset 8
 7341              		.cfi_offset 7, -8
 7342              		.cfi_offset 14, -4
 7343 0002 8EB0     		sub	sp, sp, #56
 7344              	.LCFI292:
 7345              		.cfi_def_cfa_offset 64
 7346 0004 00AF     		add	r7, sp, #0
 7347              	.LCFI293:
 7348              		.cfi_def_cfa_register 7
 7349 0006 F860     		str	r0, [r7, #12]
 7350 0008 B960     		str	r1, [r7, #8]
 7351 000a 3B60     		str	r3, [r7]
 7352 000c 1346     		mov	r3, r2
 7353 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7354              		.loc 1 4901 13
 7355 0010 0123     		movs	r3, #1
 7356 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7357              		.loc 1 4904 3
 7358 0014 FB68     		ldr	r3, [r7, #12]
 7359 0016 002B     		cmp	r3, #0
 7360 0018 0AD1     		bne	.L466
 7361              	.LBB222:
ARM GAS  /tmp/ccfq1u8L.s 			page 220


 7362              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7363              		.loc 2 195 2
 7364              		.syntax unified
 7365              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7366 001a 4FF05003 			mov r3, #80												
 7367 001e 83F31188 		msr basepri, r3											
 7368 0022 BFF36F8F 		isb														
 7369 0026 BFF34F8F 		dsb														
 7370              	
 7371              	@ 0 "" 2
 7372              		.thumb
 7373              		.syntax unified
 7374 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7375              		.loc 2 203 1
 7376 002c 00BF     		nop
 7377              	.L467:
 7378              	.LBE223:
 7379              	.LBE222:
 7380              		.loc 1 4904 3 discriminator 1
 7381 002e FEE7     		b	.L467
 7382              	.L466:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7383              		.loc 1 4922 3
 7384 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7385              		.loc 1 4924 9
 7386 0034 FB68     		ldr	r3, [r7, #12]
 7387 0036 3B63     		str	r3, [r7, #48]
 7388              	.LBB224:
 7389              	.LBB225:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7390              		.loc 2 211 2
 7391              		.syntax unified
 7392              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7393 0038 EFF31182 			mrs r2, basepri											
 7394 003c 4FF05003 		mov r3, #80												
 7395 0040 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccfq1u8L.s 			page 221


 7396 0044 BFF36F8F 		isb														
 7397 0048 BFF34F8F 		dsb														
 7398              	
 7399              	@ 0 "" 2
 7400              		.thumb
 7401              		.syntax unified
 7402 004c 3A62     		str	r2, [r7, #32]
 7403 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7404              		.loc 2 223 9
 7405 0050 3B6A     		ldr	r3, [r7, #32]
 7406              	.LBE225:
 7407              	.LBE224:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7408              		.loc 1 4926 28
 7409 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7410              		.loc 1 4928 6
 7411 0054 3B68     		ldr	r3, [r7]
 7412 0056 002B     		cmp	r3, #0
 7413 0058 04D0     		beq	.L469
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7414              		.loc 1 4930 42
 7415 005a 3B6B     		ldr	r3, [r7, #48]
 7416 005c D3F88024 		ldr	r2, [r3, #1152]
 7417              		.loc 1 4930 35
 7418 0060 3B68     		ldr	r3, [r7]
 7419 0062 1A60     		str	r2, [r3]
 7420              	.L469:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7421              		.loc 1 4933 26
 7422 0064 3B6B     		ldr	r3, [r7, #48]
 7423 0066 93F88434 		ldrb	r3, [r3, #1156]
 7424 006a 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7425              		.loc 1 4934 25
 7426 006e 3B6B     		ldr	r3, [r7, #48]
 7427 0070 0222     		movs	r2, #2
 7428 0072 83F88424 		strb	r2, [r3, #1156]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7429              		.loc 1 4936 4
 7430 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7431 0078 042B     		cmp	r3, #4
 7432 007a 2FD8     		bhi	.L470
 7433 007c 01A2     		adr	r2, .L472
 7434 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7435 0082 00BF     		.p2align 2
 7436              	.L472:
 7437 0084 FF000000 		.word	.L490+1
 7438 0088 99000000 		.word	.L475+1
 7439 008c AB000000 		.word	.L474+1
ARM GAS  /tmp/ccfq1u8L.s 			page 222


 7440 0090 BB000000 		.word	.L473+1
 7441 0094 C5000000 		.word	.L471+1
 7442              		.p2align 1
 7443              	.L475:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7444              		.loc 1 4939 29
 7445 0098 3B6B     		ldr	r3, [r7, #48]
 7446 009a D3F88024 		ldr	r2, [r3, #1152]
 7447 009e BB68     		ldr	r3, [r7, #8]
 7448 00a0 1A43     		orrs	r2, r2, r3
 7449 00a2 3B6B     		ldr	r3, [r7, #48]
 7450 00a4 C3F88024 		str	r2, [r3, #1152]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7451              		.loc 1 4940 6
 7452 00a8 2CE0     		b	.L477
 7453              	.L474:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7454              		.loc 1 4943 13
 7455 00aa 3B6B     		ldr	r3, [r7, #48]
 7456 00ac D3F88034 		ldr	r3, [r3, #1152]
 7457              		.loc 1 4943 32
 7458 00b0 5A1C     		adds	r2, r3, #1
 7459 00b2 3B6B     		ldr	r3, [r7, #48]
 7460 00b4 C3F88024 		str	r2, [r3, #1152]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7461              		.loc 1 4944 6
 7462 00b8 24E0     		b	.L477
 7463              	.L473:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7464              		.loc 1 4947 29
 7465 00ba 3B6B     		ldr	r3, [r7, #48]
 7466 00bc BA68     		ldr	r2, [r7, #8]
 7467 00be C3F88024 		str	r2, [r3, #1152]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7468              		.loc 1 4948 6
 7469 00c2 1FE0     		b	.L477
 7470              	.L471:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7471              		.loc 1 4951 8
 7472 00c4 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7473 00c8 022B     		cmp	r3, #2
 7474 00ca 04D0     		beq	.L478
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7475              		.loc 1 4953 30
 7476 00cc 3B6B     		ldr	r3, [r7, #48]
 7477 00ce BA68     		ldr	r2, [r7, #8]
 7478 00d0 C3F88024 		str	r2, [r3, #1152]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccfq1u8L.s 			page 223


4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7479              		.loc 1 4960 6
 7480 00d4 16E0     		b	.L477
 7481              	.L478:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7482              		.loc 1 4958 15
 7483 00d6 0023     		movs	r3, #0
 7484 00d8 7B63     		str	r3, [r7, #52]
 7485              		.loc 1 4960 6
 7486 00da 13E0     		b	.L477
 7487              	.L470:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7488              		.loc 1 4971 6
 7489 00dc 3B6B     		ldr	r3, [r7, #48]
 7490 00de D3F88034 		ldr	r3, [r3, #1152]
 7491 00e2 B3F1FF3F 		cmp	r3, #-1
 7492 00e6 0CD0     		beq	.L491
 7493              	.LBB226:
 7494              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7495              		.loc 2 195 2
 7496              		.syntax unified
 7497              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7498 00e8 4FF05003 			mov r3, #80												
 7499 00ec 83F31188 		msr basepri, r3											
 7500 00f0 BFF36F8F 		isb														
 7501 00f4 BFF34F8F 		dsb														
 7502              	
 7503              	@ 0 "" 2
 7504              		.thumb
 7505              		.syntax unified
 7506 00f8 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7507              		.loc 2 203 1
 7508 00fa 00BF     		nop
 7509              	.L481:
 7510              	.LBE227:
 7511              	.LBE226:
 7512              		.loc 1 4971 6 discriminator 2
 7513 00fc FEE7     		b	.L481
 7514              	.L490:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccfq1u8L.s 			page 224


 7515              		.loc 1 4965 6
 7516 00fe 00BF     		nop
 7517 0100 00E0     		b	.L477
 7518              	.L491:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7519              		.loc 1 4972 6
 7520 0102 00BF     		nop
 7521              	.L477:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7522              		.loc 1 4979 6
 7523 0104 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7524 0108 012B     		cmp	r3, #1
 7525 010a 46D1     		bne	.L482
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7526              		.loc 1 4982 5
 7527 010c 3B6B     		ldr	r3, [r7, #48]
 7528 010e 9B6A     		ldr	r3, [r3, #40]
 7529 0110 002B     		cmp	r3, #0
 7530 0112 0AD0     		beq	.L483
 7531              	.LBB228:
 7532              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7533              		.loc 2 195 2
 7534              		.syntax unified
 7535              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7536 0114 4FF05003 			mov r3, #80												
 7537 0118 83F31188 		msr basepri, r3											
 7538 011c BFF36F8F 		isb														
 7539 0120 BFF34F8F 		dsb														
 7540              	
 7541              	@ 0 "" 2
 7542              		.thumb
 7543              		.syntax unified
 7544 0124 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7545              		.loc 2 203 1
 7546 0126 00BF     		nop
 7547              	.L484:
 7548              	.LBE229:
 7549              	.LBE228:
 7550              		.loc 1 4982 5 discriminator 3
 7551 0128 FEE7     		b	.L484
 7552              	.L483:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7553              		.loc 1 4984 30
 7554 012a 214B     		ldr	r3, .L492
 7555 012c 1B68     		ldr	r3, [r3]
 7556              		.loc 1 4984 7
ARM GAS  /tmp/ccfq1u8L.s 			page 225


 7557 012e 002B     		cmp	r3, #0
 7558 0130 1DD1     		bne	.L485
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7559              		.loc 1 4986 15
 7560 0132 3B6B     		ldr	r3, [r7, #48]
 7561 0134 0433     		adds	r3, r3, #4
 7562 0136 1846     		mov	r0, r3
 7563 0138 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7564              		.loc 1 4987 6
 7565 013c 3B6B     		ldr	r3, [r7, #48]
 7566 013e DA6A     		ldr	r2, [r3, #44]
 7567 0140 1C4B     		ldr	r3, .L492+4
 7568 0142 1B68     		ldr	r3, [r3]
 7569 0144 9A42     		cmp	r2, r3
 7570 0146 03D9     		bls	.L486
 7571              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7572 0148 3B6B     		ldr	r3, [r7, #48]
 7573 014a DB6A     		ldr	r3, [r3, #44]
 7574 014c 194A     		ldr	r2, .L492+4
 7575 014e 1360     		str	r3, [r2]
 7576              	.L486:
 7577              		.loc 1 4987 6 discriminator 3
 7578 0150 3B6B     		ldr	r3, [r7, #48]
 7579 0152 DA6A     		ldr	r2, [r3, #44]
 7580 0154 1346     		mov	r3, r2
 7581 0156 9B00     		lsls	r3, r3, #2
 7582 0158 1344     		add	r3, r3, r2
 7583 015a 9B00     		lsls	r3, r3, #2
 7584 015c 164A     		ldr	r2, .L492+8
 7585 015e 1A44     		add	r2, r2, r3
 7586 0160 3B6B     		ldr	r3, [r7, #48]
 7587 0162 0433     		adds	r3, r3, #4
 7588 0164 1946     		mov	r1, r3
 7589 0166 1046     		mov	r0, r2
 7590 0168 FFF7FEFF 		bl	vListInsertEnd
 7591 016c 05E0     		b	.L487
 7592              	.L485:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7593              		.loc 1 4993 6 is_stmt 1
 7594 016e 3B6B     		ldr	r3, [r7, #48]
 7595 0170 1833     		adds	r3, r3, #24
 7596 0172 1946     		mov	r1, r3
 7597 0174 1148     		ldr	r0, .L492+12
 7598 0176 FFF7FEFF 		bl	vListInsertEnd
 7599              	.L487:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7600              		.loc 1 4996 14
 7601 017a 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccfq1u8L.s 			page 226


 7602 017c DA6A     		ldr	r2, [r3, #44]
 7603              		.loc 1 4996 41
 7604 017e 104B     		ldr	r3, .L492+16
 7605 0180 1B68     		ldr	r3, [r3]
 7606 0182 DB6A     		ldr	r3, [r3, #44]
 7607              		.loc 1 4996 7
 7608 0184 9A42     		cmp	r2, r3
 7609 0186 08D9     		bls	.L482
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7610              		.loc 1 5000 8
 7611 0188 3B6C     		ldr	r3, [r7, #64]
 7612 018a 002B     		cmp	r3, #0
 7613 018c 02D0     		beq	.L488
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7614              		.loc 1 5002 34
 7615 018e 3B6C     		ldr	r3, [r7, #64]
 7616 0190 0122     		movs	r2, #1
 7617 0192 1A60     		str	r2, [r3]
 7618              	.L488:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7619              		.loc 1 5008 20
 7620 0194 0B4B     		ldr	r3, .L492+20
 7621 0196 0122     		movs	r2, #1
 7622 0198 1A60     		str	r2, [r3]
 7623              	.L482:
 7624 019a FB6A     		ldr	r3, [r7, #44]
 7625 019c 3B61     		str	r3, [r7, #16]
 7626              	.LBB230:
 7627              	.LBB231:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7628              		.loc 2 229 2
 7629 019e 3B69     		ldr	r3, [r7, #16]
 7630              		.syntax unified
 7631              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7632 01a0 83F31188 			msr basepri, r3	
 7633              	@ 0 "" 2
 7634              		.loc 2 233 1
 7635              		.thumb
 7636              		.syntax unified
 7637 01a4 00BF     		nop
 7638              	.LBE231:
 7639              	.LBE230:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfq1u8L.s 			page 227


5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7640              		.loc 1 5018 10
 7641 01a6 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7642              		.loc 1 5019 2
 7643 01a8 1846     		mov	r0, r3
 7644 01aa 3837     		adds	r7, r7, #56
 7645              	.LCFI294:
 7646              		.cfi_def_cfa_offset 8
 7647 01ac BD46     		mov	sp, r7
 7648              	.LCFI295:
 7649              		.cfi_def_cfa_register 13
 7650              		@ sp needed
 7651 01ae 80BD     		pop	{r7, pc}
 7652              	.L493:
 7653              		.align	2
 7654              	.L492:
 7655 01b0 00000000 		.word	uxSchedulerSuspended
 7656 01b4 00000000 		.word	uxTopReadyPriority
 7657 01b8 00000000 		.word	pxReadyTasksLists
 7658 01bc 00000000 		.word	xPendingReadyList
 7659 01c0 00000000 		.word	pxCurrentTCB
 7660 01c4 00000000 		.word	xYieldPending
 7661              		.cfi_endproc
 7662              	.LFE61:
 7664              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7665              		.align	1
 7666              		.global	vTaskNotifyGiveFromISR
 7667              		.syntax unified
 7668              		.thumb
 7669              		.thumb_func
 7671              	vTaskNotifyGiveFromISR:
 7672              	.LFB62:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7673              		.loc 1 5027 2
 7674              		.cfi_startproc
 7675              		@ args = 0, pretend = 0, frame = 40
 7676              		@ frame_needed = 1, uses_anonymous_args = 0
 7677 0000 80B5     		push	{r7, lr}
 7678              	.LCFI296:
 7679              		.cfi_def_cfa_offset 8
 7680              		.cfi_offset 7, -8
 7681              		.cfi_offset 14, -4
 7682 0002 8AB0     		sub	sp, sp, #40
 7683              	.LCFI297:
 7684              		.cfi_def_cfa_offset 48
 7685 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccfq1u8L.s 			page 228


 7686              	.LCFI298:
 7687              		.cfi_def_cfa_register 7
 7688 0006 7860     		str	r0, [r7, #4]
 7689 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7690              		.loc 1 5032 3
 7691 000a 7B68     		ldr	r3, [r7, #4]
 7692 000c 002B     		cmp	r3, #0
 7693 000e 0AD1     		bne	.L495
 7694              	.LBB232:
 7695              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7696              		.loc 2 195 2
 7697              		.syntax unified
 7698              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7699 0010 4FF05003 			mov r3, #80												
 7700 0014 83F31188 		msr basepri, r3											
 7701 0018 BFF36F8F 		isb														
 7702 001c BFF34F8F 		dsb														
 7703              	
 7704              	@ 0 "" 2
 7705              		.thumb
 7706              		.syntax unified
 7707 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7708              		.loc 2 203 1
 7709 0022 00BF     		nop
 7710              	.L496:
 7711              	.LBE233:
 7712              	.LBE232:
 7713              		.loc 1 5032 3 discriminator 1
 7714 0024 FEE7     		b	.L496
 7715              	.L495:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7716              		.loc 1 5050 3
 7717 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  /tmp/ccfq1u8L.s 			page 229


5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7718              		.loc 1 5052 9
 7719 002a 7B68     		ldr	r3, [r7, #4]
 7720 002c 7B62     		str	r3, [r7, #36]
 7721              	.LBB234:
 7722              	.LBB235:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7723              		.loc 2 211 2
 7724              		.syntax unified
 7725              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7726 002e EFF31182 			mrs r2, basepri											
 7727 0032 4FF05003 		mov r3, #80												
 7728 0036 83F31188 		msr basepri, r3											
 7729 003a BFF36F8F 		isb														
 7730 003e BFF34F8F 		dsb														
 7731              	
 7732              	@ 0 "" 2
 7733              		.thumb
 7734              		.syntax unified
 7735 0042 7A61     		str	r2, [r7, #20]
 7736 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7737              		.loc 2 223 9
 7738 0046 7B69     		ldr	r3, [r7, #20]
 7739              	.LBE235:
 7740              	.LBE234:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7741              		.loc 1 5054 28
 7742 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7743              		.loc 1 5056 26
 7744 004a 7B6A     		ldr	r3, [r7, #36]
 7745 004c 93F88434 		ldrb	r3, [r3, #1156]
 7746 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7747              		.loc 1 5057 25
 7748 0052 7B6A     		ldr	r3, [r7, #36]
 7749 0054 0222     		movs	r2, #2
 7750 0056 83F88424 		strb	r2, [r3, #1156]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7751              		.loc 1 5061 11
 7752 005a 7B6A     		ldr	r3, [r7, #36]
 7753 005c D3F88034 		ldr	r3, [r3, #1152]
 7754              		.loc 1 5061 30
 7755 0060 5A1C     		adds	r2, r3, #1
 7756 0062 7B6A     		ldr	r3, [r7, #36]
 7757 0064 C3F88024 		str	r2, [r3, #1152]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
ARM GAS  /tmp/ccfq1u8L.s 			page 230


5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7758              		.loc 1 5067 6
 7759 0068 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7760 006a 012B     		cmp	r3, #1
 7761 006c 46D1     		bne	.L498
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7762              		.loc 1 5070 5
 7763 006e 7B6A     		ldr	r3, [r7, #36]
 7764 0070 9B6A     		ldr	r3, [r3, #40]
 7765 0072 002B     		cmp	r3, #0
 7766 0074 0AD0     		beq	.L499
 7767              	.LBB236:
 7768              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7769              		.loc 2 195 2
 7770              		.syntax unified
 7771              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7772 0076 4FF05003 			mov r3, #80												
 7773 007a 83F31188 		msr basepri, r3											
 7774 007e BFF36F8F 		isb														
 7775 0082 BFF34F8F 		dsb														
 7776              	
 7777              	@ 0 "" 2
 7778              		.thumb
 7779              		.syntax unified
 7780 0086 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7781              		.loc 2 203 1
 7782 0088 00BF     		nop
 7783              	.L500:
 7784              	.LBE237:
 7785              	.LBE236:
 7786              		.loc 1 5070 5 discriminator 2
 7787 008a FEE7     		b	.L500
 7788              	.L499:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7789              		.loc 1 5072 30
 7790 008c 204B     		ldr	r3, .L505
 7791 008e 1B68     		ldr	r3, [r3]
 7792              		.loc 1 5072 7
 7793 0090 002B     		cmp	r3, #0
 7794 0092 1DD1     		bne	.L501
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7795              		.loc 1 5074 15
 7796 0094 7B6A     		ldr	r3, [r7, #36]
 7797 0096 0433     		adds	r3, r3, #4
 7798 0098 1846     		mov	r0, r3
 7799 009a FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7800              		.loc 1 5075 6
 7801 009e 7B6A     		ldr	r3, [r7, #36]
 7802 00a0 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccfq1u8L.s 			page 231


 7803 00a2 1C4B     		ldr	r3, .L505+4
 7804 00a4 1B68     		ldr	r3, [r3]
 7805 00a6 9A42     		cmp	r2, r3
 7806 00a8 03D9     		bls	.L502
 7807              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7808 00aa 7B6A     		ldr	r3, [r7, #36]
 7809 00ac DB6A     		ldr	r3, [r3, #44]
 7810 00ae 194A     		ldr	r2, .L505+4
 7811 00b0 1360     		str	r3, [r2]
 7812              	.L502:
 7813              		.loc 1 5075 6 discriminator 3
 7814 00b2 7B6A     		ldr	r3, [r7, #36]
 7815 00b4 DA6A     		ldr	r2, [r3, #44]
 7816 00b6 1346     		mov	r3, r2
 7817 00b8 9B00     		lsls	r3, r3, #2
 7818 00ba 1344     		add	r3, r3, r2
 7819 00bc 9B00     		lsls	r3, r3, #2
 7820 00be 164A     		ldr	r2, .L505+8
 7821 00c0 1A44     		add	r2, r2, r3
 7822 00c2 7B6A     		ldr	r3, [r7, #36]
 7823 00c4 0433     		adds	r3, r3, #4
 7824 00c6 1946     		mov	r1, r3
 7825 00c8 1046     		mov	r0, r2
 7826 00ca FFF7FEFF 		bl	vListInsertEnd
 7827 00ce 05E0     		b	.L503
 7828              	.L501:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7829              		.loc 1 5081 6 is_stmt 1
 7830 00d0 7B6A     		ldr	r3, [r7, #36]
 7831 00d2 1833     		adds	r3, r3, #24
 7832 00d4 1946     		mov	r1, r3
 7833 00d6 1148     		ldr	r0, .L505+12
 7834 00d8 FFF7FEFF 		bl	vListInsertEnd
 7835              	.L503:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7836              		.loc 1 5084 14
 7837 00dc 7B6A     		ldr	r3, [r7, #36]
 7838 00de DA6A     		ldr	r2, [r3, #44]
 7839              		.loc 1 5084 41
 7840 00e0 0F4B     		ldr	r3, .L505+16
 7841 00e2 1B68     		ldr	r3, [r3]
 7842 00e4 DB6A     		ldr	r3, [r3, #44]
 7843              		.loc 1 5084 7
 7844 00e6 9A42     		cmp	r2, r3
 7845 00e8 08D9     		bls	.L498
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7846              		.loc 1 5088 8
ARM GAS  /tmp/ccfq1u8L.s 			page 232


 7847 00ea 3B68     		ldr	r3, [r7]
 7848 00ec 002B     		cmp	r3, #0
 7849 00ee 02D0     		beq	.L504
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7850              		.loc 1 5090 34
 7851 00f0 3B68     		ldr	r3, [r7]
 7852 00f2 0122     		movs	r2, #1
 7853 00f4 1A60     		str	r2, [r3]
 7854              	.L504:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7855              		.loc 1 5096 20
 7856 00f6 0B4B     		ldr	r3, .L505+20
 7857 00f8 0122     		movs	r2, #1
 7858 00fa 1A60     		str	r2, [r3]
 7859              	.L498:
 7860 00fc 3B6A     		ldr	r3, [r7, #32]
 7861 00fe BB60     		str	r3, [r7, #8]
 7862              	.LBB238:
 7863              	.LBB239:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7864              		.loc 2 229 2
 7865 0100 BB68     		ldr	r3, [r7, #8]
 7866              		.syntax unified
 7867              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7868 0102 83F31188 			msr basepri, r3	
 7869              	@ 0 "" 2
 7870              		.loc 2 233 1
 7871              		.thumb
 7872              		.syntax unified
 7873 0106 00BF     		nop
 7874              	.LBE239:
 7875              	.LBE238:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7876              		.loc 1 5105 2
 7877 0108 00BF     		nop
 7878 010a 2837     		adds	r7, r7, #40
 7879              	.LCFI299:
 7880              		.cfi_def_cfa_offset 8
 7881 010c BD46     		mov	sp, r7
 7882              	.LCFI300:
 7883              		.cfi_def_cfa_register 13
 7884              		@ sp needed
 7885 010e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccfq1u8L.s 			page 233


 7886              	.L506:
 7887              		.align	2
 7888              	.L505:
 7889 0110 00000000 		.word	uxSchedulerSuspended
 7890 0114 00000000 		.word	uxTopReadyPriority
 7891 0118 00000000 		.word	pxReadyTasksLists
 7892 011c 00000000 		.word	xPendingReadyList
 7893 0120 00000000 		.word	pxCurrentTCB
 7894 0124 00000000 		.word	xYieldPending
 7895              		.cfi_endproc
 7896              	.LFE62:
 7898              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7899              		.align	1
 7900              		.global	xTaskNotifyStateClear
 7901              		.syntax unified
 7902              		.thumb
 7903              		.thumb_func
 7905              	xTaskNotifyStateClear:
 7906              	.LFB63:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7907              		.loc 1 5113 2
 7908              		.cfi_startproc
 7909              		@ args = 0, pretend = 0, frame = 16
 7910              		@ frame_needed = 1, uses_anonymous_args = 0
 7911 0000 80B5     		push	{r7, lr}
 7912              	.LCFI301:
 7913              		.cfi_def_cfa_offset 8
 7914              		.cfi_offset 7, -8
 7915              		.cfi_offset 14, -4
 7916 0002 84B0     		sub	sp, sp, #16
 7917              	.LCFI302:
 7918              		.cfi_def_cfa_offset 24
 7919 0004 00AF     		add	r7, sp, #0
 7920              	.LCFI303:
 7921              		.cfi_def_cfa_register 7
 7922 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7923              		.loc 1 5119 11
 7924 0008 7B68     		ldr	r3, [r7, #4]
 7925 000a 002B     		cmp	r3, #0
 7926 000c 02D1     		bne	.L508
 7927              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7928 000e 0E4B     		ldr	r3, .L513
 7929 0010 1B68     		ldr	r3, [r3]
 7930 0012 00E0     		b	.L509
ARM GAS  /tmp/ccfq1u8L.s 			page 234


 7931              	.L508:
 7932              		.loc 1 5119 11 discriminator 2
 7933 0014 7B68     		ldr	r3, [r7, #4]
 7934              	.L509:
 7935              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7936 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7937              		.loc 1 5121 3 discriminator 4
 7938 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7939              		.loc 1 5123 13 discriminator 4
 7940 001c BB68     		ldr	r3, [r7, #8]
 7941 001e 93F88434 		ldrb	r3, [r3, #1156]
 7942 0022 DBB2     		uxtb	r3, r3
 7943              		.loc 1 5123 6 discriminator 4
 7944 0024 022B     		cmp	r3, #2
 7945 0026 06D1     		bne	.L510
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7946              		.loc 1 5125 26
 7947 0028 BB68     		ldr	r3, [r7, #8]
 7948 002a 0022     		movs	r2, #0
 7949 002c 83F88424 		strb	r2, [r3, #1156]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7950              		.loc 1 5126 13
 7951 0030 0123     		movs	r3, #1
 7952 0032 FB60     		str	r3, [r7, #12]
 7953 0034 01E0     		b	.L511
 7954              	.L510:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7955              		.loc 1 5130 13
 7956 0036 0023     		movs	r3, #0
 7957 0038 FB60     		str	r3, [r7, #12]
 7958              	.L511:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7959              		.loc 1 5133 3
 7960 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7961              		.loc 1 5135 10
 7962 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7963              		.loc 1 5136 2
 7964 0040 1846     		mov	r0, r3
 7965 0042 1037     		adds	r7, r7, #16
 7966              	.LCFI304:
 7967              		.cfi_def_cfa_offset 8
 7968 0044 BD46     		mov	sp, r7
 7969              	.LCFI305:
 7970              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccfq1u8L.s 			page 235


 7971              		@ sp needed
 7972 0046 80BD     		pop	{r7, pc}
 7973              	.L514:
 7974              		.align	2
 7975              	.L513:
 7976 0048 00000000 		.word	pxCurrentTCB
 7977              		.cfi_endproc
 7978              	.LFE63:
 7980              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7981              		.align	1
 7982              		.global	ulTaskNotifyValueClear
 7983              		.syntax unified
 7984              		.thumb
 7985              		.thumb_func
 7987              	ulTaskNotifyValueClear:
 7988              	.LFB64:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7989              		.loc 1 5144 2
 7990              		.cfi_startproc
 7991              		@ args = 0, pretend = 0, frame = 16
 7992              		@ frame_needed = 1, uses_anonymous_args = 0
 7993 0000 80B5     		push	{r7, lr}
 7994              	.LCFI306:
 7995              		.cfi_def_cfa_offset 8
 7996              		.cfi_offset 7, -8
 7997              		.cfi_offset 14, -4
 7998 0002 84B0     		sub	sp, sp, #16
 7999              	.LCFI307:
 8000              		.cfi_def_cfa_offset 24
 8001 0004 00AF     		add	r7, sp, #0
 8002              	.LCFI308:
 8003              		.cfi_def_cfa_register 7
 8004 0006 7860     		str	r0, [r7, #4]
 8005 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8006              		.loc 1 5150 11
 8007 000a 7B68     		ldr	r3, [r7, #4]
 8008 000c 002B     		cmp	r3, #0
 8009 000e 02D1     		bne	.L516
 8010              		.loc 1 5150 11 is_stmt 0 discriminator 1
 8011 0010 0D4B     		ldr	r3, .L519
 8012 0012 1B68     		ldr	r3, [r3]
 8013 0014 00E0     		b	.L517
 8014              	.L516:
 8015              		.loc 1 5150 11 discriminator 2
ARM GAS  /tmp/ccfq1u8L.s 			page 236


 8016 0016 7B68     		ldr	r3, [r7, #4]
 8017              	.L517:
 8018              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8019 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8020              		.loc 1 5152 3 discriminator 4
 8021 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8022              		.loc 1 5156 27 discriminator 4
 8023 001e 0A4B     		ldr	r3, .L519
 8024 0020 1B68     		ldr	r3, [r3]
 8025              		.loc 1 5156 13 discriminator 4
 8026 0022 D3F88034 		ldr	r3, [r3, #1152]
 8027 0026 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8028              		.loc 1 5157 27 discriminator 4
 8029 0028 FB68     		ldr	r3, [r7, #12]
 8030 002a D3F88024 		ldr	r2, [r3, #1152]
 8031              		.loc 1 5157 30 discriminator 4
 8032 002e 3B68     		ldr	r3, [r7]
 8033 0030 DB43     		mvns	r3, r3
 8034              		.loc 1 5157 27 discriminator 4
 8035 0032 1A40     		ands	r2, r2, r3
 8036 0034 FB68     		ldr	r3, [r7, #12]
 8037 0036 C3F88024 		str	r2, [r3, #1152]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8038              		.loc 1 5159 3 discriminator 4
 8039 003a FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8040              		.loc 1 5161 10 discriminator 4
 8041 003e BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8042              		.loc 1 5162 2 discriminator 4
 8043 0040 1846     		mov	r0, r3
 8044 0042 1037     		adds	r7, r7, #16
 8045              	.LCFI309:
 8046              		.cfi_def_cfa_offset 8
 8047 0044 BD46     		mov	sp, r7
 8048              	.LCFI310:
 8049              		.cfi_def_cfa_register 13
 8050              		@ sp needed
 8051 0046 80BD     		pop	{r7, pc}
 8052              	.L520:
 8053              		.align	2
 8054              	.L519:
 8055 0048 00000000 		.word	pxCurrentTCB
 8056              		.cfi_endproc
 8057              	.LFE64:
 8059              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8060              		.align	1
 8061              		.syntax unified
ARM GAS  /tmp/ccfq1u8L.s 			page 237


 8062              		.thumb
 8063              		.thumb_func
 8065              	prvAddCurrentTaskToDelayedList:
 8066              	.LFB65:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8067              		.loc 1 5178 1
 8068              		.cfi_startproc
 8069              		@ args = 0, pretend = 0, frame = 16
 8070              		@ frame_needed = 1, uses_anonymous_args = 0
 8071 0000 80B5     		push	{r7, lr}
 8072              	.LCFI311:
 8073              		.cfi_def_cfa_offset 8
 8074              		.cfi_offset 7, -8
 8075              		.cfi_offset 14, -4
 8076 0002 84B0     		sub	sp, sp, #16
 8077              	.LCFI312:
 8078              		.cfi_def_cfa_offset 24
 8079 0004 00AF     		add	r7, sp, #0
 8080              	.LCFI313:
 8081              		.cfi_def_cfa_register 7
 8082 0006 7860     		str	r0, [r7, #4]
 8083 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8084              		.loc 1 5180 18
 8085 000a 214B     		ldr	r3, .L526
 8086 000c 1B68     		ldr	r3, [r3]
 8087 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8088              		.loc 1 5193 35
ARM GAS  /tmp/ccfq1u8L.s 			page 238


 8089 0010 204B     		ldr	r3, .L526+4
 8090 0012 1B68     		ldr	r3, [r3]
 8091              		.loc 1 5193 6
 8092 0014 0433     		adds	r3, r3, #4
 8093 0016 1846     		mov	r0, r3
 8094 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8095              		.loc 1 5206 5
 8096 001c 7B68     		ldr	r3, [r7, #4]
 8097 001e B3F1FF3F 		cmp	r3, #-1
 8098 0022 0AD1     		bne	.L522
 8099              		.loc 1 5206 41 discriminator 1
 8100 0024 3B68     		ldr	r3, [r7]
 8101 0026 002B     		cmp	r3, #0
 8102 0028 07D0     		beq	.L522
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8103              		.loc 1 5211 56
 8104 002a 1A4B     		ldr	r3, .L526+4
 8105 002c 1B68     		ldr	r3, [r3]
 8106              		.loc 1 5211 4
 8107 002e 0433     		adds	r3, r3, #4
 8108 0030 1946     		mov	r1, r3
 8109 0032 1948     		ldr	r0, .L526+8
 8110 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccfq1u8L.s 			page 239


5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccfq1u8L.s 			page 240


5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8111              		.loc 1 5286 1
 8112 0038 26E0     		b	.L525
 8113              	.L522:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8114              		.loc 1 5218 16
 8115 003a FA68     		ldr	r2, [r7, #12]
 8116 003c 7B68     		ldr	r3, [r7, #4]
 8117 003e 1344     		add	r3, r3, r2
 8118 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8119              		.loc 1 5221 4
 8120 0042 144B     		ldr	r3, .L526+4
 8121 0044 1B68     		ldr	r3, [r3]
 8122 0046 BA68     		ldr	r2, [r7, #8]
 8123 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8124              		.loc 1 5223 6
 8125 004a BA68     		ldr	r2, [r7, #8]
 8126 004c FB68     		ldr	r3, [r7, #12]
 8127 004e 9A42     		cmp	r2, r3
 8128 0050 09D2     		bcs	.L524
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8129              		.loc 1 5227 5
 8130 0052 124B     		ldr	r3, .L526+12
 8131 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8132              		.loc 1 5227 60
 8133 0056 0F4B     		ldr	r3, .L526+4
 8134 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8135              		.loc 1 5227 5
 8136 005a 0433     		adds	r3, r3, #4
 8137 005c 1946     		mov	r1, r3
 8138 005e 1046     		mov	r0, r2
 8139 0060 FFF7FEFF 		bl	vListInsert
 8140              		.loc 1 5286 1
 8141 0064 10E0     		b	.L525
 8142              	.L524:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8143              		.loc 1 5233 5
 8144 0066 0E4B     		ldr	r3, .L526+16
 8145 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8146              		.loc 1 5233 52
 8147 006a 0A4B     		ldr	r3, .L526+4
 8148 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8149              		.loc 1 5233 5
 8150 006e 0433     		adds	r3, r3, #4
 8151 0070 1946     		mov	r1, r3
 8152 0072 1046     		mov	r0, r2
 8153 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8154              		.loc 1 5238 21
 8155 0078 0A4B     		ldr	r3, .L526+20
 8156 007a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfq1u8L.s 			page 241


5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8157              		.loc 1 5238 7
 8158 007c BA68     		ldr	r2, [r7, #8]
 8159 007e 9A42     		cmp	r2, r3
 8160 0080 02D2     		bcs	.L525
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8161              		.loc 1 5240 27
 8162 0082 084A     		ldr	r2, .L526+20
 8163 0084 BB68     		ldr	r3, [r7, #8]
 8164 0086 1360     		str	r3, [r2]
 8165              	.L525:
 8166              		.loc 1 5286 1
 8167 0088 00BF     		nop
 8168 008a 1037     		adds	r7, r7, #16
 8169              	.LCFI314:
 8170              		.cfi_def_cfa_offset 8
 8171 008c BD46     		mov	sp, r7
 8172              	.LCFI315:
 8173              		.cfi_def_cfa_register 13
 8174              		@ sp needed
 8175 008e 80BD     		pop	{r7, pc}
 8176              	.L527:
 8177              		.align	2
 8178              	.L526:
 8179 0090 00000000 		.word	xTickCount
 8180 0094 00000000 		.word	pxCurrentTCB
 8181 0098 00000000 		.word	xSuspendedTaskList
 8182 009c 00000000 		.word	pxOverflowDelayedTaskList
 8183 00a0 00000000 		.word	pxDelayedTaskList
 8184 00a4 00000000 		.word	xNextTaskUnblockTime
 8185              		.cfi_endproc
 8186              	.LFE65:
 8188              		.text
 8189              	.Letext0:
 8190              		.file 3 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stdd
 8191              		.file 4 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_ty
 8192              		.file 5 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_types.h"
 8193              		.file 6 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/reent.h"
 8194              		.file 7 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/lock.h"
 8195              		.file 8 "/usr/local/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 8196              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8197              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8198              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8199              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccfq1u8L.s 			page 242


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccfq1u8L.s:24     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccfq1u8L.s:21     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccfq1u8L.s:27     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccfq1u8L.s:30     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccfq1u8L.s:33     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccfq1u8L.s:36     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccfq1u8L.s:39     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccfq1u8L.s:42     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccfq1u8L.s:45     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccfq1u8L.s:48     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccfq1u8L.s:51     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccfq1u8L.s:54     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccfq1u8L.s:57     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccfq1u8L.s:60     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccfq1u8L.s:63     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccfq1u8L.s:66     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccfq1u8L.s:69     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccfq1u8L.s:72     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccfq1u8L.s:75     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccfq1u8L.s:78     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccfq1u8L.s:81     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccfq1u8L.s:84     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccfq1u8L.s:87     .bss.xTickCount:0000000000000000 $d
     /tmp/ccfq1u8L.s:90     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccfq1u8L.s:93     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccfq1u8L.s:96     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccfq1u8L.s:99     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccfq1u8L.s:102    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccfq1u8L.s:105    .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccfq1u8L.s:108    .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccfq1u8L.s:111    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccfq1u8L.s:114    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccfq1u8L.s:117    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccfq1u8L.s:120    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccfq1u8L.s:123    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccfq1u8L.s:126    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccfq1u8L.s:129    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccfq1u8L.s:132    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccfq1u8L.s:135    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccfq1u8L.s:138    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccfq1u8L.s:141    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccfq1u8L.s:144    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccfq1u8L.s:147    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccfq1u8L.s:153    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccfq1u8L.s:438    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccfq1u8L.s:699    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccfq1u8L.s:319    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccfq1u8L.s:325    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccfq1u8L.s:433    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccfq1u8L.s:694    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccfq1u8L.s:5188   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccfq1u8L.s:849    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/ccfq1u8L.s:860    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccfq1u8L.s:866    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccfq1u8L.s:5808   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
ARM GAS  /tmp/ccfq1u8L.s 			page 243


     /tmp/ccfq1u8L.s:5907   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccfq1u8L.s:1025   .text.vTaskDelete:00000000000000c4 $d
     /tmp/ccfq1u8L.s:1037   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccfq1u8L.s:1043   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccfq1u8L.s:2830   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccfq1u8L.s:8065   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccfq1u8L.s:2876   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccfq1u8L.s:1250   .text.vTaskDelayUntil:00000000000000f0 $d
     /tmp/ccfq1u8L.s:1257   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccfq1u8L.s:1263   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccfq1u8L.s:1356   .text.vTaskDelay:0000000000000060 $d
     /tmp/ccfq1u8L.s:1362   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccfq1u8L.s:1368   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccfq1u8L.s:1526   .text.eTaskGetState:00000000000000b8 $d
     /tmp/ccfq1u8L.s:1535   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccfq1u8L.s:1541   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccfq1u8L.s:1596   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccfq1u8L.s:1601   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccfq1u8L.s:1607   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccfq1u8L.s:1698   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccfq1u8L.s:1703   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccfq1u8L.s:1709   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccfq1u8L.s:1939   .text.vTaskPrioritySet:000000000000012c $d
     /tmp/ccfq1u8L.s:1947   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccfq1u8L.s:1953   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccfq1u8L.s:3891   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccfq1u8L.s:2125   .text.vTaskSuspend:00000000000000d4 $d
     /tmp/ccfq1u8L.s:2135   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccfq1u8L.s:2140   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccfq1u8L.s:2233   .text.prvTaskIsTaskSuspended:000000000000005c $d
     /tmp/ccfq1u8L.s:2239   .text.vTaskResume:0000000000000000 $t
     /tmp/ccfq1u8L.s:2245   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccfq1u8L.s:2384   .text.vTaskResume:00000000000000ac $d
     /tmp/ccfq1u8L.s:2392   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccfq1u8L.s:2398   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccfq1u8L.s:2571   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccfq1u8L.s:2580   .rodata:0000000000000000 $d
     /tmp/ccfq1u8L.s:2584   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccfq1u8L.s:2590   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccfq1u8L.s:2747   .text.vTaskStartScheduler:00000000000000c0 $d
     /tmp/ccfq1u8L.s:5132   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccfq1u8L.s:2759   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccfq1u8L.s:2765   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccfq1u8L.s:2819   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccfq1u8L.s:2824   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccfq1u8L.s:2865   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccfq1u8L.s:2870   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccfq1u8L.s:3624   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccfq1u8L.s:3095   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccfq1u8L.s:3108   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccfq1u8L.s:3114   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccfq1u8L.s:3154   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccfq1u8L.s:3159   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccfq1u8L.s:3165   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccfq1u8L.s:3206   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccfq1u8L.s:3211   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccfq1u8L.s:3217   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
ARM GAS  /tmp/ccfq1u8L.s 			page 244


     /tmp/ccfq1u8L.s:3248   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccfq1u8L.s:3253   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccfq1u8L.s:3259   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccfq1u8L.s:3337   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccfq1u8L.s:3342   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccfq1u8L.s:3348   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccfq1u8L.s:5539   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccfq1u8L.s:3521   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/ccfq1u8L.s:3531   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccfq1u8L.s:3537   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccfq1u8L.s:3612   .text.xTaskCatchUpTicks:000000000000004c $d
     /tmp/ccfq1u8L.s:3618   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccfq1u8L.s:3870   .text.xTaskIncrementTick:0000000000000148 $d
     /tmp/ccfq1u8L.s:3885   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccfq1u8L.s:4039   .text.vTaskSwitchContext:00000000000000b0 $d
     /tmp/ccfq1u8L.s:4049   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccfq1u8L.s:4055   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccfq1u8L.s:4125   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccfq1u8L.s:4130   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccfq1u8L.s:4136   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccfq1u8L.s:4240   .text.vTaskPlaceOnUnorderedEventList:0000000000000070 $d
     /tmp/ccfq1u8L.s:4246   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccfq1u8L.s:4252   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccfq1u8L.s:4331   .text.vTaskPlaceOnEventListRestricted:0000000000000054 $d
     /tmp/ccfq1u8L.s:4336   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccfq1u8L.s:4342   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccfq1u8L.s:4482   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccfq1u8L.s:4492   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccfq1u8L.s:4498   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccfq1u8L.s:4642   .text.vTaskRemoveFromUnorderedEventList:00000000000000b0 $d
     /tmp/ccfq1u8L.s:4651   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccfq1u8L.s:4657   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccfq1u8L.s:4728   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccfq1u8L.s:4734   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccfq1u8L.s:4740   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccfq1u8L.s:4785   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccfq1u8L.s:4791   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccfq1u8L.s:4797   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccfq1u8L.s:4962   .text.xTaskCheckForTimeOut:00000000000000bc $d
     /tmp/ccfq1u8L.s:4968   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccfq1u8L.s:4974   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccfq1u8L.s:5006   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccfq1u8L.s:5011   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccfq1u8L.s:5017   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccfq1u8L.s:5072   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccfq1u8L.s:5078   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccfq1u8L.s:5127   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccfq1u8L.s:5283   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccfq1u8L.s:5177   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccfq1u8L.s:5183   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccfq1u8L.s:5266   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccfq1u8L.s:5278   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccfq1u8L.s:5356   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccfq1u8L.s:5363   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccfq1u8L.s:5369   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccfq1u8L.s:5671   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccfq1u8L.s:5529   .text.vTaskGetInfo:00000000000000c8 $d
ARM GAS  /tmp/ccfq1u8L.s 			page 245


     /tmp/ccfq1u8L.s:5534   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccfq1u8L.s:5666   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccfq1u8L.s:5735   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccfq1u8L.s:5741   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccfq1u8L.s:5798   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/ccfq1u8L.s:5803   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccfq1u8L.s:5902   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccfq1u8L.s:5969   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccfq1u8L.s:5975   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccfq1u8L.s:5981   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccfq1u8L.s:6021   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccfq1u8L.s:6026   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccfq1u8L.s:6032   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccfq1u8L.s:6094   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccfq1u8L.s:6100   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccfq1u8L.s:6106   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccfq1u8L.s:6255   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/ccfq1u8L.s:6262   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccfq1u8L.s:6268   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccfq1u8L.s:6436   .text.xTaskPriorityDisinherit:00000000000000d0 $d
     /tmp/ccfq1u8L.s:6443   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccfq1u8L.s:6449   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccfq1u8L.s:6643   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f8 $d
     /tmp/ccfq1u8L.s:6650   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccfq1u8L.s:6656   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccfq1u8L.s:6706   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccfq1u8L.s:6711   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccfq1u8L.s:6717   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccfq1u8L.s:6762   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccfq1u8L.s:6767   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccfq1u8L.s:6773   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccfq1u8L.s:6887   .text.ulTaskNotifyTake:0000000000000090 $d
     /tmp/ccfq1u8L.s:6893   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccfq1u8L.s:6899   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccfq1u8L.s:7034   .text.xTaskNotifyWait:00000000000000b8 $d
     /tmp/ccfq1u8L.s:7040   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccfq1u8L.s:7046   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccfq1u8L.s:7129   .text.xTaskGenericNotify:0000000000000064 $d
     /tmp/ccfq1u8L.s:7134   .text.xTaskGenericNotify:0000000000000078 $t
     /tmp/ccfq1u8L.s:7318   .text.xTaskGenericNotify:000000000000016c $d
     /tmp/ccfq1u8L.s:7326   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccfq1u8L.s:7332   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccfq1u8L.s:7437   .text.xTaskGenericNotifyFromISR:0000000000000084 $d
     /tmp/ccfq1u8L.s:7442   .text.xTaskGenericNotifyFromISR:0000000000000098 $t
     /tmp/ccfq1u8L.s:7655   .text.xTaskGenericNotifyFromISR:00000000000001b0 $d
     /tmp/ccfq1u8L.s:7665   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccfq1u8L.s:7671   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccfq1u8L.s:7889   .text.vTaskNotifyGiveFromISR:0000000000000110 $d
     /tmp/ccfq1u8L.s:7899   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccfq1u8L.s:7905   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccfq1u8L.s:7976   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccfq1u8L.s:7981   .text.ulTaskNotifyValueClear:0000000000000000 $t
     /tmp/ccfq1u8L.s:7987   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
     /tmp/ccfq1u8L.s:8055   .text.ulTaskNotifyValueClear:0000000000000048 $d
     /tmp/ccfq1u8L.s:8060   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccfq1u8L.s:8179   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
ARM GAS  /tmp/ccfq1u8L.s 			page 246


                           .group:0000000000000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.cdefs.h.49.39045112216f6a021dbdffe3bf5accce
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.32.f3865d2d52314d4824cf3681b0053063
                           .group:0000000000000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:0000000000000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:0000000000000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:0000000000000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:0000000000000000 wm4.reent.h.91.b3ea049ebc5486622b61409b78486f84
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a17c2bf78722c1d7b86ba8d45e5b5f29
                           .group:0000000000000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:0000000000000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:0000000000000000 wm4.timers.h.54.4ae1ba250ac92e2885786e6070ecf197
                           .group:0000000000000000 wm4.stack_macros.h.29.6b7843e188f2d273e6836785e6906ca7

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
_impure_ptr
vPortEndScheduler
vListInsert
vListInitialise
_reclaim_reent
