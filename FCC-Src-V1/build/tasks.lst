ARM GAS  /tmp/ccad9K0d.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	1120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  /tmp/ccad9K0d.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  /tmp/ccad9K0d.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB4:
 155              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
ARM GAS  /tmp/ccad9K0d.s 			page 4


  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  /tmp/ccad9K0d.s 			page 5


  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 6


 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
ARM GAS  /tmp/ccad9K0d.s 			page 7


 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  /tmp/ccad9K0d.s 			page 8


 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 9


 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccad9K0d.s 			page 10


 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccad9K0d.s 			page 11


 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccad9K0d.s 			page 12


 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccad9K0d.s 			page 13


 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 156              		.loc 1 588 2
 157              		.cfi_startproc
 158              		@ args = 12, pretend = 0, frame = 40
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160 0000 80B5     		push	{r7, lr}
 161              	.LCFI0:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 7, -8
 164              		.cfi_offset 14, -4
 165 0002 8EB0     		sub	sp, sp, #56
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 64
 168 0004 04AF     		add	r7, sp, #16
 169              	.LCFI2:
 170              		.cfi_def_cfa 7, 48
 171 0006 F860     		str	r0, [r7, #12]
 172 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/ccad9K0d.s 			page 14


 173 000a 7A60     		str	r2, [r7, #4]
 174 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 175              		.loc 1 592 3
 176 000e 7B6B     		ldr	r3, [r7, #52]
 177 0010 002B     		cmp	r3, #0
 178 0012 0AD1     		bne	.L2
 179              	.LBB119:
 180              	.LBB120:
 181              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
ARM GAS  /tmp/ccad9K0d.s 			page 15


  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
ARM GAS  /tmp/ccad9K0d.s 			page 16


 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  /tmp/ccad9K0d.s 			page 17


 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 182              		.loc 2 195 2
 183              		.syntax unified
 184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 185 0014 4FF05003 			mov r3, #80												
 186 0018 83F31188 		msr basepri, r3											
 187 001c BFF36F8F 		isb														
 188 0020 BFF34F8F 		dsb														
 189              	
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/ccad9K0d.s 			page 18


 194              		.loc 2 203 1
 195 0026 00BF     		nop
 196              	.L3:
 197              	.LBE120:
 198              	.LBE119:
 199              		.loc 1 592 3 discriminator 1
 200 0028 FEE7     		b	.L3
 201              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 202              		.loc 1 593 3
 203 002a BB6B     		ldr	r3, [r7, #56]
 204 002c 002B     		cmp	r3, #0
 205 002e 0AD1     		bne	.L4
 206              	.LBB121:
 207              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 208              		.loc 2 195 2
 209              		.syntax unified
 210              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 211 0030 4FF05003 			mov r3, #80												
 212 0034 83F31188 		msr basepri, r3											
 213 0038 BFF36F8F 		isb														
 214 003c BFF34F8F 		dsb														
 215              	
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
 219 0040 FB61     		str	r3, [r7, #28]
 220              		.loc 2 203 1
 221 0042 00BF     		nop
 222              	.L5:
 223              	.LBE122:
 224              	.LBE121:
 225              		.loc 1 593 3 discriminator 2
 226 0044 FEE7     		b	.L5
 227              	.L4:
 228              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 229              		.loc 1 600 20
 230 0046 5C23     		movs	r3, #92
 231 0048 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 232              		.loc 1 601 4
 233 004a 3B69     		ldr	r3, [r7, #16]
 234 004c 5C2B     		cmp	r3, #92
 235 004e 0AD0     		beq	.L6
 236              	.LBB124:
 237              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 238              		.loc 2 195 2
 239              		.syntax unified
ARM GAS  /tmp/ccad9K0d.s 			page 19


 240              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 241 0050 4FF05003 			mov r3, #80												
 242 0054 83F31188 		msr basepri, r3											
 243 0058 BFF36F8F 		isb														
 244 005c BFF34F8F 		dsb														
 245              	
 246              	@ 0 "" 2
 247              		.thumb
 248              		.syntax unified
 249 0060 BB61     		str	r3, [r7, #24]
 250              		.loc 2 203 1
 251 0062 00BF     		nop
 252              	.L7:
 253              	.LBE125:
 254              	.LBE124:
 255              		.loc 1 601 4 discriminator 3
 256 0064 FEE7     		b	.L7
 257              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 258              		.loc 1 602 4
 259 0066 3B69     		ldr	r3, [r7, #16]
 260              	.LBE123:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 261              		.loc 1 607 5
 262 0068 BB6B     		ldr	r3, [r7, #56]
 263 006a 002B     		cmp	r3, #0
 264 006c 1ED0     		beq	.L8
 265              		.loc 1 607 32 discriminator 1
 266 006e 7B6B     		ldr	r3, [r7, #52]
 267 0070 002B     		cmp	r3, #0
 268 0072 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 269              		.loc 1 611 13
 270 0074 BB6B     		ldr	r3, [r7, #56]
 271 0076 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 272              		.loc 1 612 22
 273 0078 7B6A     		ldr	r3, [r7, #36]
 274 007a 7A6B     		ldr	r2, [r7, #52]
 275 007c 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 276              		.loc 1 618 37
 277 007e 7B6A     		ldr	r3, [r7, #36]
 278 0080 0222     		movs	r2, #2
 279 0082 83F85920 		strb	r2, [r3, #89]
ARM GAS  /tmp/ccad9K0d.s 			page 20


 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 280              		.loc 1 622 4
 281 0086 0023     		movs	r3, #0
 282 0088 0393     		str	r3, [sp, #12]
 283 008a 7B6A     		ldr	r3, [r7, #36]
 284 008c 0293     		str	r3, [sp, #8]
 285 008e 07F11403 		add	r3, r7, #20
 286 0092 0193     		str	r3, [sp, #4]
 287 0094 3B6B     		ldr	r3, [r7, #48]
 288 0096 0093     		str	r3, [sp]
 289 0098 3B68     		ldr	r3, [r7]
 290 009a 7A68     		ldr	r2, [r7, #4]
 291 009c B968     		ldr	r1, [r7, #8]
 292 009e F868     		ldr	r0, [r7, #12]
 293 00a0 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 294              		.loc 1 623 4
 295 00a4 786A     		ldr	r0, [r7, #36]
 296 00a6 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 297 00aa 01E0     		b	.L9
 298              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 299              		.loc 1 627 12
 300 00ac 0023     		movs	r3, #0
 301 00ae 7B61     		str	r3, [r7, #20]
 302              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 303              		.loc 1 630 10
 304 00b0 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 631 2
 306 00b2 1846     		mov	r0, r3
 307 00b4 2837     		adds	r7, r7, #40
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310 00b6 BD46     		mov	sp, r7
 311              	.LCFI4:
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 00b8 80BD     		pop	{r7, pc}
 315              		.cfi_endproc
 316              	.LFE4:
 318              		.section	.text.xTaskCreate,"ax",%progbits
 319              		.align	1
 320              		.global	xTaskCreate
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	xTaskCreate:
ARM GAS  /tmp/ccad9K0d.s 			page 21


 326              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  /tmp/ccad9K0d.s 			page 22


 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 327              		.loc 1 739 2
 328              		.cfi_startproc
 329              		@ args = 8, pretend = 0, frame = 32
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccad9K0d.s 			page 23


 332              	.LCFI5:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 8CB0     		sub	sp, sp, #48
 337              	.LCFI6:
 338              		.cfi_def_cfa_offset 56
 339 0004 04AF     		add	r7, sp, #16
 340              	.LCFI7:
 341              		.cfi_def_cfa 7, 40
 342 0006 F860     		str	r0, [r7, #12]
 343 0008 B960     		str	r1, [r7, #8]
 344 000a 3B60     		str	r3, [r7]
 345 000c 1346     		mov	r3, r2	@ movhi
 346 000e FB80     		strh	r3, [r7, #6]	@ movhi
 347              	.LBB126:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 348              		.loc 1 773 32
 349 0010 FB88     		ldrh	r3, [r7, #6]
 350              		.loc 1 773 14
 351 0012 9B00     		lsls	r3, r3, #2
 352 0014 1846     		mov	r0, r3
 353 0016 FFF7FEFF 		bl	pvPortMalloc
 354 001a 7861     		str	r0, [r7, #20]
ARM GAS  /tmp/ccad9K0d.s 			page 24


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 355              		.loc 1 775 6
 356 001c 7B69     		ldr	r3, [r7, #20]
 357 001e 002B     		cmp	r3, #0
 358 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 359              		.loc 1 778 28
 360 0022 5C20     		movs	r0, #92
 361 0024 FFF7FEFF 		bl	pvPortMalloc
 362 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 363              		.loc 1 780 7
 364 002a FB69     		ldr	r3, [r7, #28]
 365 002c 002B     		cmp	r3, #0
 366 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 367              		.loc 1 783 24
 368 0030 FB69     		ldr	r3, [r7, #28]
 369 0032 7A69     		ldr	r2, [r7, #20]
 370 0034 1A63     		str	r2, [r3, #48]
 371 0036 05E0     		b	.L14
 372              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 373              		.loc 1 789 6
 374 0038 7869     		ldr	r0, [r7, #20]
 375 003a FFF7FEFF 		bl	vPortFree
 376 003e 01E0     		b	.L14
 377              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 378              		.loc 1 794 14
 379 0040 0023     		movs	r3, #0
 380 0042 FB61     		str	r3, [r7, #28]
 381              	.L14:
 382              	.LBE126:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 383              		.loc 1 799 5
 384 0044 FB69     		ldr	r3, [r7, #28]
 385 0046 002B     		cmp	r3, #0
ARM GAS  /tmp/ccad9K0d.s 			page 25


 386 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 387              		.loc 1 805 37
 388 004a FB69     		ldr	r3, [r7, #28]
 389 004c 0022     		movs	r2, #0
 390 004e 83F85920 		strb	r2, [r3, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 391              		.loc 1 809 4
 392 0052 FA88     		ldrh	r2, [r7, #6]
 393 0054 0023     		movs	r3, #0
 394 0056 0393     		str	r3, [sp, #12]
 395 0058 FB69     		ldr	r3, [r7, #28]
 396 005a 0293     		str	r3, [sp, #8]
 397 005c FB6A     		ldr	r3, [r7, #44]
 398 005e 0193     		str	r3, [sp, #4]
 399 0060 BB6A     		ldr	r3, [r7, #40]
 400 0062 0093     		str	r3, [sp]
 401 0064 3B68     		ldr	r3, [r7]
 402 0066 B968     		ldr	r1, [r7, #8]
 403 0068 F868     		ldr	r0, [r7, #12]
 404 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 405              		.loc 1 810 4
 406 006e F869     		ldr	r0, [r7, #28]
 407 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 408              		.loc 1 811 12
 409 0074 0123     		movs	r3, #1
 410 0076 BB61     		str	r3, [r7, #24]
 411 0078 02E0     		b	.L16
 412              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 413              		.loc 1 815 12
 414 007a 4FF0FF33 		mov	r3, #-1
 415 007e BB61     		str	r3, [r7, #24]
 416              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 417              		.loc 1 818 10
 418 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 419              		.loc 1 819 2
 420 0082 1846     		mov	r0, r3
 421 0084 2037     		adds	r7, r7, #32
 422              	.LCFI8:
ARM GAS  /tmp/ccad9K0d.s 			page 26


 423              		.cfi_def_cfa_offset 8
 424 0086 BD46     		mov	sp, r7
 425              	.LCFI9:
 426              		.cfi_def_cfa_register 13
 427              		@ sp needed
 428 0088 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	prvInitialiseNewTask:
 439              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 440              		.loc 1 832 1
 441              		.cfi_startproc
 442              		@ args = 16, pretend = 0, frame = 32
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI10:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 88B0     		sub	sp, sp, #32
 450              	.LCFI11:
 451              		.cfi_def_cfa_offset 40
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI12:
 454              		.cfi_def_cfa_register 7
 455 0006 F860     		str	r0, [r7, #12]
 456 0008 B960     		str	r1, [r7, #8]
 457 000a 7A60     		str	r2, [r7, #4]
 458 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 27


 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 459              		.loc 1 854 28
 460 000e 3B6B     		ldr	r3, [r7, #48]
 461 0010 186B     		ldr	r0, [r3, #48]
 462              		.loc 1 854 12
 463 0012 7B68     		ldr	r3, [r7, #4]
 464 0014 9B00     		lsls	r3, r3, #2
 465 0016 1A46     		mov	r2, r3
 466 0018 A521     		movs	r1, #165
 467 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 468              		.loc 1 864 29
 469 001e 3B6B     		ldr	r3, [r7, #48]
 470 0020 1A6B     		ldr	r2, [r3, #48]
 471              		.loc 1 864 38
 472 0022 7B68     		ldr	r3, [r7, #4]
 473 0024 03F18043 		add	r3, r3, #1073741824
 474 0028 013B     		subs	r3, r3, #1
 475 002a 9B00     		lsls	r3, r3, #2
 476              		.loc 1 864 16
 477 002c 1344     		add	r3, r3, r2
 478 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 479              		.loc 1 865 40
 480 0030 BB69     		ldr	r3, [r7, #24]
 481              		.loc 1 865 81
 482 0032 23F00703 		bic	r3, r3, #7
 483              		.loc 1 865 16
 484 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 485              		.loc 1 868 3
 486 0038 BB69     		ldr	r3, [r7, #24]
 487 003a 03F00703 		and	r3, r3, #7
 488 003e 002B     		cmp	r3, #0
 489 0040 0AD0     		beq	.L19
ARM GAS  /tmp/ccad9K0d.s 			page 28


 490              	.LBB127:
 491              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 492              		.loc 2 195 2
 493              		.syntax unified
 494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 495 0042 4FF05003 			mov r3, #80												
 496 0046 83F31188 		msr basepri, r3											
 497 004a BFF36F8F 		isb														
 498 004e BFF34F8F 		dsb														
 499              	
 500              	@ 0 "" 2
 501              		.thumb
 502              		.syntax unified
 503 0052 7B61     		str	r3, [r7, #20]
 504              		.loc 2 203 1
 505 0054 00BF     		nop
 506              	.L20:
 507              	.LBE128:
 508              	.LBE127:
 509              		.loc 1 868 3 discriminator 1
 510 0056 FEE7     		b	.L20
 511              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 512              		.loc 1 892 4
 513 0058 BB68     		ldr	r3, [r7, #8]
 514 005a 002B     		cmp	r3, #0
 515 005c 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 516              		.loc 1 894 10
 517 005e 0023     		movs	r3, #0
 518 0060 FB61     		str	r3, [r7, #28]
 519              		.loc 1 894 3
ARM GAS  /tmp/ccad9K0d.s 			page 29


 520 0062 12E0     		b	.L22
 521              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 522              		.loc 1 896 38
 523 0064 BA68     		ldr	r2, [r7, #8]
 524 0066 FB69     		ldr	r3, [r7, #28]
 525 0068 1344     		add	r3, r3, r2
 526 006a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 527              		.loc 1 896 30
 528 006c 3A6B     		ldr	r2, [r7, #48]
 529 006e FB69     		ldr	r3, [r7, #28]
 530 0070 1344     		add	r3, r3, r2
 531 0072 3433     		adds	r3, r3, #52
 532 0074 0A46     		mov	r2, r1
 533 0076 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 534              		.loc 1 901 14
 535 0078 BA68     		ldr	r2, [r7, #8]
 536 007a FB69     		ldr	r3, [r7, #28]
 537 007c 1344     		add	r3, r3, r2
 538 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 539              		.loc 1 901 6
 540 0080 002B     		cmp	r3, #0
 541 0082 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 542              		.loc 1 894 77 discriminator 2
 543 0084 FB69     		ldr	r3, [r7, #28]
 544 0086 0133     		adds	r3, r3, #1
 545 0088 FB61     		str	r3, [r7, #28]
 546              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 547              		.loc 1 894 3 discriminator 1
 548 008a FB69     		ldr	r3, [r7, #28]
 549 008c 0F2B     		cmp	r3, #15
 550 008e E9D9     		bls	.L25
 551 0090 00E0     		b	.L24
 552              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 553              		.loc 1 903 5
 554 0092 00BF     		nop
 555              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
ARM GAS  /tmp/ccad9K0d.s 			page 30


 556              		.loc 1 913 55
 557 0094 3B6B     		ldr	r3, [r7, #48]
 558 0096 0022     		movs	r2, #0
 559 0098 83F84320 		strb	r2, [r3, #67]
 560 009c 03E0     		b	.L26
 561              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 562              		.loc 1 919 29
 563 009e 3B6B     		ldr	r3, [r7, #48]
 564 00a0 0022     		movs	r2, #0
 565 00a2 83F83420 		strb	r2, [r3, #52]
 566              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 567              		.loc 1 924 4
 568 00a6 BB6A     		ldr	r3, [r7, #40]
 569 00a8 372B     		cmp	r3, #55
 570 00aa 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 571              		.loc 1 926 14
 572 00ac 3723     		movs	r3, #55
 573 00ae BB62     		str	r3, [r7, #40]
 574              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 575              		.loc 1 933 23
 576 00b0 3B6B     		ldr	r3, [r7, #48]
 577 00b2 BA6A     		ldr	r2, [r7, #40]
 578 00b4 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 579              		.loc 1 936 28
 580 00b6 3B6B     		ldr	r3, [r7, #48]
 581 00b8 BA6A     		ldr	r2, [r7, #40]
 582 00ba DA64     		str	r2, [r3, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 583              		.loc 1 937 27
 584 00bc 3B6B     		ldr	r3, [r7, #48]
 585 00be 0022     		movs	r2, #0
 586 00c0 1A65     		str	r2, [r3, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
ARM GAS  /tmp/ccad9K0d.s 			page 31


 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 587              		.loc 1 941 2
 588 00c2 3B6B     		ldr	r3, [r7, #48]
 589 00c4 0433     		adds	r3, r3, #4
 590 00c6 1846     		mov	r0, r3
 591 00c8 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 592              		.loc 1 942 2
 593 00cc 3B6B     		ldr	r3, [r7, #48]
 594 00ce 1833     		adds	r3, r3, #24
 595 00d0 1846     		mov	r0, r3
 596 00d2 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 597              		.loc 1 946 2
 598 00d6 3B6B     		ldr	r3, [r7, #48]
 599 00d8 3A6B     		ldr	r2, [r7, #48]
 600 00da 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 601              		.loc 1 949 2
 602 00dc BB6A     		ldr	r3, [r7, #40]
 603 00de C3F13802 		rsb	r2, r3, #56
 604 00e2 3B6B     		ldr	r3, [r7, #48]
 605 00e4 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 606              		.loc 1 950 2
 607 00e6 3B6B     		ldr	r3, [r7, #48]
 608 00e8 3A6B     		ldr	r2, [r7, #48]
 609 00ea 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccad9K0d.s 			page 32


 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 610              		.loc 1 992 29
 611 00ec 3B6B     		ldr	r3, [r7, #48]
 612 00ee 0022     		movs	r2, #0
 613 00f0 5A65     		str	r2, [r3, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 614              		.loc 1 993 27
 615 00f2 3B6B     		ldr	r3, [r7, #48]
 616 00f4 0022     		movs	r2, #0
 617 00f6 83F85820 		strb	r2, [r3, #88]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccad9K0d.s 			page 33


1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 618              		.loc 1 1058 29
 619 00fa 3A68     		ldr	r2, [r7]
 620 00fc F968     		ldr	r1, [r7, #12]
 621 00fe B869     		ldr	r0, [r7, #24]
 622 0100 FFF7FEFF 		bl	pxPortInitialiseStack
 623 0104 0246     		mov	r2, r0
 624              		.loc 1 1058 27
 625 0106 3B6B     		ldr	r3, [r7, #48]
 626 0108 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 627              		.loc 1 1064 4
 628 010a FB6A     		ldr	r3, [r7, #44]
 629 010c 002B     		cmp	r3, #0
 630 010e 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
ARM GAS  /tmp/ccad9K0d.s 			page 34


1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 631              		.loc 1 1068 18
 632 0110 FB6A     		ldr	r3, [r7, #44]
 633 0112 3A6B     		ldr	r2, [r7, #48]
 634 0114 1A60     		str	r2, [r3]
 635              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 636              		.loc 1 1074 1
 637 0116 00BF     		nop
 638 0118 2037     		adds	r7, r7, #32
 639              	.LCFI13:
 640              		.cfi_def_cfa_offset 8
 641 011a BD46     		mov	sp, r7
 642              	.LCFI14:
 643              		.cfi_def_cfa_register 13
 644              		@ sp needed
 645 011c 80BD     		pop	{r7, pc}
 646              		.cfi_endproc
 647              	.LFE6:
 649              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 650              		.align	1
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 655              	prvAddNewTaskToReadyList:
 656              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 657              		.loc 1 1078 1
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 8
 660              		@ frame_needed = 1, uses_anonymous_args = 0
 661 0000 80B5     		push	{r7, lr}
 662              	.LCFI15:
 663              		.cfi_def_cfa_offset 8
 664              		.cfi_offset 7, -8
 665              		.cfi_offset 14, -4
 666 0002 82B0     		sub	sp, sp, #8
 667              	.LCFI16:
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              	.LCFI17:
 671              		.cfi_def_cfa_register 7
 672 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 673              		.loc 1 1081 2
 674 0008 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccad9K0d.s 			page 35


1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 675              		.loc 1 1083 25
 676 000c 2D4B     		ldr	r3, .L37
 677 000e 1B68     		ldr	r3, [r3]
 678 0010 0133     		adds	r3, r3, #1
 679 0012 2C4A     		ldr	r2, .L37
 680 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 681              		.loc 1 1084 20
 682 0016 2C4B     		ldr	r3, .L37+4
 683 0018 1B68     		ldr	r3, [r3]
 684              		.loc 1 1084 5
 685 001a 002B     		cmp	r3, #0
 686 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 687              		.loc 1 1088 17
 688 001e 2A4A     		ldr	r2, .L37+4
 689 0020 7B68     		ldr	r3, [r7, #4]
 690 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 691              		.loc 1 1090 31
 692 0024 274B     		ldr	r3, .L37
 693 0026 1B68     		ldr	r3, [r3]
 694              		.loc 1 1090 6
 695 0028 012B     		cmp	r3, #1
 696 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 697              		.loc 1 1095 5
 698 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 699 0030 0DE0     		b	.L33
 700              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 701              		.loc 1 1107 26
 702 0032 264B     		ldr	r3, .L37+8
 703 0034 1B68     		ldr	r3, [r3]
 704              		.loc 1 1107 6
 705 0036 002B     		cmp	r3, #0
ARM GAS  /tmp/ccad9K0d.s 			page 36


 706 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 707              		.loc 1 1109 21
 708 003a 234B     		ldr	r3, .L37+4
 709 003c 1B68     		ldr	r3, [r3]
 710 003e DA6A     		ldr	r2, [r3, #44]
 711              		.loc 1 1109 45
 712 0040 7B68     		ldr	r3, [r7, #4]
 713 0042 DB6A     		ldr	r3, [r3, #44]
 714              		.loc 1 1109 7
 715 0044 9A42     		cmp	r2, r3
 716 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 717              		.loc 1 1111 19
 718 0048 1F4A     		ldr	r2, .L37+4
 719 004a 7B68     		ldr	r3, [r7, #4]
 720 004c 1360     		str	r3, [r2]
 721              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 722              		.loc 1 1124 15
 723 004e 204B     		ldr	r3, .L37+12
 724 0050 1B68     		ldr	r3, [r3]
 725 0052 0133     		adds	r3, r3, #1
 726 0054 1E4A     		ldr	r2, .L37+12
 727 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 728              		.loc 1 1129 26
 729 0058 1D4B     		ldr	r3, .L37+12
 730 005a 1A68     		ldr	r2, [r3]
 731 005c 7B68     		ldr	r3, [r7, #4]
 732 005e 5A64     		str	r2, [r3, #68]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 733              		.loc 1 1134 3
 734 0060 7B68     		ldr	r3, [r7, #4]
 735 0062 DA6A     		ldr	r2, [r3, #44]
ARM GAS  /tmp/ccad9K0d.s 			page 37


 736 0064 1B4B     		ldr	r3, .L37+16
 737 0066 1B68     		ldr	r3, [r3]
 738 0068 9A42     		cmp	r2, r3
 739 006a 03D9     		bls	.L34
 740              		.loc 1 1134 3 is_stmt 0 discriminator 1
 741 006c 7B68     		ldr	r3, [r7, #4]
 742 006e DB6A     		ldr	r3, [r3, #44]
 743 0070 184A     		ldr	r2, .L37+16
 744 0072 1360     		str	r3, [r2]
 745              	.L34:
 746              		.loc 1 1134 3 discriminator 3
 747 0074 7B68     		ldr	r3, [r7, #4]
 748 0076 DA6A     		ldr	r2, [r3, #44]
 749 0078 1346     		mov	r3, r2
 750 007a 9B00     		lsls	r3, r3, #2
 751 007c 1344     		add	r3, r3, r2
 752 007e 9B00     		lsls	r3, r3, #2
 753 0080 154A     		ldr	r2, .L37+20
 754 0082 1A44     		add	r2, r2, r3
 755 0084 7B68     		ldr	r3, [r7, #4]
 756 0086 0433     		adds	r3, r3, #4
 757 0088 1946     		mov	r1, r3
 758 008a 1046     		mov	r0, r2
 759 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 760              		.loc 1 1138 2 is_stmt 1 discriminator 3
 761 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 762              		.loc 1 1140 24 discriminator 3
 763 0094 0D4B     		ldr	r3, .L37+8
 764 0096 1B68     		ldr	r3, [r3]
 765              		.loc 1 1140 4 discriminator 3
 766 0098 002B     		cmp	r3, #0
 767 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 768              		.loc 1 1144 19
 769 009c 0A4B     		ldr	r3, .L37+4
 770 009e 1B68     		ldr	r3, [r3]
 771 00a0 DA6A     		ldr	r2, [r3, #44]
 772              		.loc 1 1144 42
 773 00a2 7B68     		ldr	r3, [r7, #4]
 774 00a4 DB6A     		ldr	r3, [r3, #44]
 775              		.loc 1 1144 5
 776 00a6 9A42     		cmp	r2, r3
 777 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 778              		.loc 1 1146 4
 779 00aa 0C4B     		ldr	r3, .L37+24
 780 00ac 4FF08052 		mov	r2, #268435456
ARM GAS  /tmp/ccad9K0d.s 			page 38


 781 00b0 1A60     		str	r2, [r3]
 782              		.syntax unified
 783              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 784 00b2 BFF34F8F 		dsb
 785              	@ 0 "" 2
 786              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 787 00b6 BFF36F8F 		isb
 788              	@ 0 "" 2
 789              		.thumb
 790              		.syntax unified
 791              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 792              		.loc 1 1157 1
 793 00ba 00BF     		nop
 794 00bc 0837     		adds	r7, r7, #8
 795              	.LCFI18:
 796              		.cfi_def_cfa_offset 8
 797 00be BD46     		mov	sp, r7
 798              	.LCFI19:
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 00c0 80BD     		pop	{r7, pc}
 802              	.L38:
 803 00c2 00BF     		.align	2
 804              	.L37:
 805 00c4 00000000 		.word	uxCurrentNumberOfTasks
 806 00c8 00000000 		.word	pxCurrentTCB
 807 00cc 00000000 		.word	xSchedulerRunning
 808 00d0 00000000 		.word	uxTaskNumber
 809 00d4 00000000 		.word	uxTopReadyPriority
 810 00d8 00000000 		.word	pxReadyTasksLists
 811 00dc 04ED00E0 		.word	-536810236
 812              		.cfi_endproc
 813              	.LFE7:
 815              		.section	.text.vTaskDelete,"ax",%progbits
 816              		.align	1
 817              		.global	vTaskDelete
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 822              	vTaskDelete:
 823              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
ARM GAS  /tmp/ccad9K0d.s 			page 39


1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 824              		.loc 1 1163 2
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828 0000 80B5     		push	{r7, lr}
 829              	.LCFI20:
 830              		.cfi_def_cfa_offset 8
 831              		.cfi_offset 7, -8
 832              		.cfi_offset 14, -4
 833 0002 84B0     		sub	sp, sp, #16
 834              	.LCFI21:
 835              		.cfi_def_cfa_offset 24
 836 0004 00AF     		add	r7, sp, #0
 837              	.LCFI22:
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 840              		.loc 1 1166 3
 841 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 842              		.loc 1 1170 12
 843 000c 7B68     		ldr	r3, [r7, #4]
 844 000e 002B     		cmp	r3, #0
 845 0010 02D1     		bne	.L40
 846              		.loc 1 1170 12 is_stmt 0 discriminator 1
 847 0012 2C4B     		ldr	r3, .L49
 848 0014 1B68     		ldr	r3, [r3]
 849 0016 00E0     		b	.L41
 850              	.L40:
 851              		.loc 1 1170 12 discriminator 2
 852 0018 7B68     		ldr	r3, [r7, #4]
 853              	.L41:
 854              		.loc 1 1170 10 is_stmt 1 discriminator 4
 855 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 856              		.loc 1 1173 8 discriminator 4
 857 001c FB68     		ldr	r3, [r7, #12]
 858 001e 0433     		adds	r3, r3, #4
 859 0020 1846     		mov	r0, r3
 860 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
ARM GAS  /tmp/ccad9K0d.s 			page 40


1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 861              		.loc 1 1183 8 discriminator 4
 862 0026 FB68     		ldr	r3, [r7, #12]
 863 0028 9B6A     		ldr	r3, [r3, #40]
 864              		.loc 1 1183 6 discriminator 4
 865 002a 002B     		cmp	r3, #0
 866 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 867              		.loc 1 1185 14
 868 002e FB68     		ldr	r3, [r7, #12]
 869 0030 1833     		adds	r3, r3, #24
 870 0032 1846     		mov	r0, r3
 871 0034 FFF7FEFF 		bl	uxListRemove
 872              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 873              		.loc 1 1196 16
 874 0038 234B     		ldr	r3, .L49+4
 875 003a 1B68     		ldr	r3, [r3]
 876 003c 0133     		adds	r3, r3, #1
 877 003e 224A     		ldr	r2, .L49+4
 878 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 879              		.loc 1 1198 14
 880 0042 204B     		ldr	r3, .L49
 881 0044 1B68     		ldr	r3, [r3]
 882              		.loc 1 1198 6
 883 0046 FA68     		ldr	r2, [r7, #12]
 884 0048 9A42     		cmp	r2, r3
 885 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 886              		.loc 1 1205 5
 887 004c FB68     		ldr	r3, [r7, #12]
 888 004e 0433     		adds	r3, r3, #4
 889 0050 1946     		mov	r1, r3
 890 0052 1E48     		ldr	r0, .L49+8
 891 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
ARM GAS  /tmp/ccad9K0d.s 			page 41


1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 892              		.loc 1 1210 5
 893 0058 1D4B     		ldr	r3, .L49+12
 894 005a 1B68     		ldr	r3, [r3]
 895 005c 0133     		adds	r3, r3, #1
 896 005e 1C4A     		ldr	r2, .L49+12
 897 0060 1360     		str	r3, [r2]
 898 0062 09E0     		b	.L44
 899              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 900              		.loc 1 1225 5
 901 0064 1B4B     		ldr	r3, .L49+16
 902 0066 1B68     		ldr	r3, [r3]
 903 0068 013B     		subs	r3, r3, #1
 904 006a 1A4A     		ldr	r2, .L49+16
 905 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 906              		.loc 1 1227 5
 907 006e F868     		ldr	r0, [r7, #12]
 908 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 909              		.loc 1 1231 5
 910 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 911              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 912              		.loc 1 1234 3
 913 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 914              		.loc 1 1238 25
 915 007c 164B     		ldr	r3, .L49+20
 916 007e 1B68     		ldr	r3, [r3]
 917              		.loc 1 1238 5
 918 0080 002B     		cmp	r3, #0
ARM GAS  /tmp/ccad9K0d.s 			page 42


 919 0082 1BD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 920              		.loc 1 1240 14
 921 0084 0F4B     		ldr	r3, .L49
 922 0086 1B68     		ldr	r3, [r3]
 923              		.loc 1 1240 6
 924 0088 FA68     		ldr	r2, [r7, #12]
 925 008a 9A42     		cmp	r2, r3
 926 008c 16D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 927              		.loc 1 1242 5
 928 008e 134B     		ldr	r3, .L49+24
 929 0090 1B68     		ldr	r3, [r3]
 930 0092 002B     		cmp	r3, #0
 931 0094 0AD0     		beq	.L46
 932              	.LBB129:
 933              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 934              		.loc 2 195 2
 935              		.syntax unified
 936              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 937 0096 4FF05003 			mov r3, #80												
 938 009a 83F31188 		msr basepri, r3											
 939 009e BFF36F8F 		isb														
 940 00a2 BFF34F8F 		dsb														
 941              	
 942              	@ 0 "" 2
 943              		.thumb
 944              		.syntax unified
 945 00a6 BB60     		str	r3, [r7, #8]
 946              		.loc 2 203 1
 947 00a8 00BF     		nop
 948              	.L47:
 949              	.LBE130:
 950              	.LBE129:
 951              		.loc 1 1242 5 discriminator 1
 952 00aa FEE7     		b	.L47
 953              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 954              		.loc 1 1243 5
 955 00ac 0C4B     		ldr	r3, .L49+28
 956 00ae 4FF08052 		mov	r2, #268435456
 957 00b2 1A60     		str	r2, [r3]
 958              		.syntax unified
 959              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 960 00b4 BFF34F8F 		dsb
 961              	@ 0 "" 2
 962              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 963 00b8 BFF36F8F 		isb
 964              	@ 0 "" 2
 965              		.thumb
 966              		.syntax unified
 967              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccad9K0d.s 			page 43


1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968              		.loc 1 1250 2
 969 00bc 00BF     		nop
 970 00be 1037     		adds	r7, r7, #16
 971              	.LCFI23:
 972              		.cfi_def_cfa_offset 8
 973 00c0 BD46     		mov	sp, r7
 974              	.LCFI24:
 975              		.cfi_def_cfa_register 13
 976              		@ sp needed
 977 00c2 80BD     		pop	{r7, pc}
 978              	.L50:
 979              		.align	2
 980              	.L49:
 981 00c4 00000000 		.word	pxCurrentTCB
 982 00c8 00000000 		.word	uxTaskNumber
 983 00cc 00000000 		.word	xTasksWaitingTermination
 984 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 985 00d4 00000000 		.word	uxCurrentNumberOfTasks
 986 00d8 00000000 		.word	xSchedulerRunning
 987 00dc 00000000 		.word	uxSchedulerSuspended
 988 00e0 04ED00E0 		.word	-536810236
 989              		.cfi_endproc
 990              	.LFE8:
 992              		.section	.text.vTaskDelayUntil,"ax",%progbits
 993              		.align	1
 994              		.global	vTaskDelayUntil
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 999              	vTaskDelayUntil:
 1000              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1001              		.loc 1 1258 2
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 40
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005 0000 80B5     		push	{r7, lr}
 1006              	.LCFI25:
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 8AB0     		sub	sp, sp, #40
 1011              	.LCFI26:
 1012              		.cfi_def_cfa_offset 48
 1013 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccad9K0d.s 			page 44


 1014              	.LCFI27:
 1015              		.cfi_def_cfa_register 7
 1016 0006 7860     		str	r0, [r7, #4]
 1017 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1018              		.loc 1 1260 30
 1019 000a 0023     		movs	r3, #0
 1020 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1021              		.loc 1 1262 3
 1022 000e 7B68     		ldr	r3, [r7, #4]
 1023 0010 002B     		cmp	r3, #0
 1024 0012 0AD1     		bne	.L52
 1025              	.LBB131:
 1026              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1027              		.loc 2 195 2
 1028              		.syntax unified
 1029              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1030 0014 4FF05003 			mov r3, #80												
 1031 0018 83F31188 		msr basepri, r3											
 1032 001c BFF36F8F 		isb														
 1033 0020 BFF34F8F 		dsb														
 1034              	
 1035              	@ 0 "" 2
 1036              		.thumb
 1037              		.syntax unified
 1038 0024 7B61     		str	r3, [r7, #20]
 1039              		.loc 2 203 1
 1040 0026 00BF     		nop
 1041              	.L53:
 1042              	.LBE132:
 1043              	.LBE131:
 1044              		.loc 1 1262 3 discriminator 1
 1045 0028 FEE7     		b	.L53
 1046              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1047              		.loc 1 1263 3
 1048 002a 3B68     		ldr	r3, [r7]
 1049 002c 002B     		cmp	r3, #0
 1050 002e 0AD1     		bne	.L54
 1051              	.LBB133:
 1052              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1053              		.loc 2 195 2
 1054              		.syntax unified
 1055              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1056 0030 4FF05003 			mov r3, #80												
 1057 0034 83F31188 		msr basepri, r3											
 1058 0038 BFF36F8F 		isb														
 1059 003c BFF34F8F 		dsb														
 1060              	
 1061              	@ 0 "" 2
 1062              		.thumb
 1063              		.syntax unified
ARM GAS  /tmp/ccad9K0d.s 			page 45


 1064 0040 3B61     		str	r3, [r7, #16]
 1065              		.loc 2 203 1
 1066 0042 00BF     		nop
 1067              	.L55:
 1068              	.LBE134:
 1069              	.LBE133:
 1070              		.loc 1 1263 3 discriminator 2
 1071 0044 FEE7     		b	.L55
 1072              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1073              		.loc 1 1264 3
 1074 0046 2A4B     		ldr	r3, .L64
 1075 0048 1B68     		ldr	r3, [r3]
 1076 004a 002B     		cmp	r3, #0
 1077 004c 0AD0     		beq	.L56
 1078              	.LBB135:
 1079              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1080              		.loc 2 195 2
 1081              		.syntax unified
 1082              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1083 004e 4FF05003 			mov r3, #80												
 1084 0052 83F31188 		msr basepri, r3											
 1085 0056 BFF36F8F 		isb														
 1086 005a BFF34F8F 		dsb														
 1087              	
 1088              	@ 0 "" 2
 1089              		.thumb
 1090              		.syntax unified
 1091 005e FB60     		str	r3, [r7, #12]
 1092              		.loc 2 203 1
 1093 0060 00BF     		nop
 1094              	.L57:
 1095              	.LBE136:
 1096              	.LBE135:
 1097              		.loc 1 1264 3 discriminator 3
 1098 0062 FEE7     		b	.L57
 1099              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1100              		.loc 1 1266 3
 1101 0064 FFF7FEFF 		bl	vTaskSuspendAll
 1102              	.LBB137:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1103              		.loc 1 1270 21
 1104 0068 224B     		ldr	r3, .L64+4
 1105 006a 1B68     		ldr	r3, [r3]
 1106 006c 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1107              		.loc 1 1273 18
 1108 006e 7B68     		ldr	r3, [r7, #4]
 1109 0070 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccad9K0d.s 			page 46


 1110              		.loc 1 1273 16
 1111 0072 3A68     		ldr	r2, [r7]
 1112 0074 1344     		add	r3, r3, r2
 1113 0076 FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1114              		.loc 1 1275 26
 1115 0078 7B68     		ldr	r3, [r7, #4]
 1116 007a 1B68     		ldr	r3, [r3]
 1117              		.loc 1 1275 6
 1118 007c 3A6A     		ldr	r2, [r7, #32]
 1119 007e 9A42     		cmp	r2, r3
 1120 0080 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1121              		.loc 1 1282 25
 1122 0082 7B68     		ldr	r3, [r7, #4]
 1123 0084 1B68     		ldr	r3, [r3]
 1124              		.loc 1 1282 7
 1125 0086 FA69     		ldr	r2, [r7, #28]
 1126 0088 9A42     		cmp	r2, r3
 1127 008a 11D2     		bcs	.L59
 1128              		.loc 1 1282 47 discriminator 1
 1129 008c FA69     		ldr	r2, [r7, #28]
 1130 008e 3B6A     		ldr	r3, [r7, #32]
 1131 0090 9A42     		cmp	r2, r3
 1132 0092 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1133              		.loc 1 1284 19
 1134 0094 0123     		movs	r3, #1
 1135 0096 7B62     		str	r3, [r7, #36]
 1136 0098 0AE0     		b	.L59
 1137              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1138              		.loc 1 1296 25
 1139 009a 7B68     		ldr	r3, [r7, #4]
 1140 009c 1B68     		ldr	r3, [r3]
 1141              		.loc 1 1296 7
 1142 009e FA69     		ldr	r2, [r7, #28]
 1143 00a0 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccad9K0d.s 			page 47


 1144 00a2 03D3     		bcc	.L60
 1145              		.loc 1 1296 47 discriminator 1
 1146 00a4 FA69     		ldr	r2, [r7, #28]
 1147 00a6 3B6A     		ldr	r3, [r7, #32]
 1148 00a8 9A42     		cmp	r2, r3
 1149 00aa 01D9     		bls	.L59
 1150              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1151              		.loc 1 1298 19
 1152 00ac 0123     		movs	r3, #1
 1153 00ae 7B62     		str	r3, [r7, #36]
 1154              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1155              		.loc 1 1307 24
 1156 00b0 7B68     		ldr	r3, [r7, #4]
 1157 00b2 FA69     		ldr	r2, [r7, #28]
 1158 00b4 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1159              		.loc 1 1309 6
 1160 00b6 7B6A     		ldr	r3, [r7, #36]
 1161 00b8 002B     		cmp	r3, #0
 1162 00ba 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1163              		.loc 1 1315 5
 1164 00bc FA69     		ldr	r2, [r7, #28]
 1165 00be 3B6A     		ldr	r3, [r7, #32]
 1166 00c0 D31A     		subs	r3, r2, r3
 1167 00c2 0021     		movs	r1, #0
 1168 00c4 1846     		mov	r0, r3
 1169 00c6 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1170              	.L61:
 1171              	.LBE137:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1172              		.loc 1 1322 21
 1173 00ca FFF7FEFF 		bl	xTaskResumeAll
 1174 00ce B861     		str	r0, [r7, #24]
ARM GAS  /tmp/ccad9K0d.s 			page 48


1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1175              		.loc 1 1326 5
 1176 00d0 BB69     		ldr	r3, [r7, #24]
 1177 00d2 002B     		cmp	r3, #0
 1178 00d4 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1179              		.loc 1 1328 4
 1180 00d6 084B     		ldr	r3, .L64+8
 1181 00d8 4FF08052 		mov	r2, #268435456
 1182 00dc 1A60     		str	r2, [r3]
 1183              		.syntax unified
 1184              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1185 00de BFF34F8F 		dsb
 1186              	@ 0 "" 2
 1187              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1188 00e2 BFF36F8F 		isb
 1189              	@ 0 "" 2
 1190              		.thumb
 1191              		.syntax unified
 1192              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1193              		.loc 1 1334 2
 1194 00e6 00BF     		nop
 1195 00e8 2837     		adds	r7, r7, #40
 1196              	.LCFI28:
 1197              		.cfi_def_cfa_offset 8
 1198 00ea BD46     		mov	sp, r7
 1199              	.LCFI29:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 00ec 80BD     		pop	{r7, pc}
 1203              	.L65:
 1204 00ee 00BF     		.align	2
 1205              	.L64:
 1206 00f0 00000000 		.word	uxSchedulerSuspended
 1207 00f4 00000000 		.word	xTickCount
 1208 00f8 04ED00E0 		.word	-536810236
 1209              		.cfi_endproc
 1210              	.LFE9:
 1212              		.section	.text.vTaskDelay,"ax",%progbits
 1213              		.align	1
 1214              		.global	vTaskDelay
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1219              	vTaskDelay:
 1220              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 49


1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1221              		.loc 1 1342 2
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 16
 1224              		@ frame_needed = 1, uses_anonymous_args = 0
 1225 0000 80B5     		push	{r7, lr}
 1226              	.LCFI30:
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 7, -8
 1229              		.cfi_offset 14, -4
 1230 0002 84B0     		sub	sp, sp, #16
 1231              	.LCFI31:
 1232              		.cfi_def_cfa_offset 24
 1233 0004 00AF     		add	r7, sp, #0
 1234              	.LCFI32:
 1235              		.cfi_def_cfa_register 7
 1236 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1237              		.loc 1 1343 13
 1238 0008 0023     		movs	r3, #0
 1239 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1240              		.loc 1 1346 5
 1241 000c 7B68     		ldr	r3, [r7, #4]
 1242 000e 002B     		cmp	r3, #0
 1243 0010 17D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1244              		.loc 1 1348 4
 1245 0012 134B     		ldr	r3, .L72
 1246 0014 1B68     		ldr	r3, [r3]
 1247 0016 002B     		cmp	r3, #0
 1248 0018 0AD0     		beq	.L68
 1249              	.LBB138:
 1250              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1251              		.loc 2 195 2
 1252              		.syntax unified
 1253              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1254 001a 4FF05003 			mov r3, #80												
 1255 001e 83F31188 		msr basepri, r3											
 1256 0022 BFF36F8F 		isb														
 1257 0026 BFF34F8F 		dsb														
 1258              	
 1259              	@ 0 "" 2
 1260              		.thumb
 1261              		.syntax unified
 1262 002a BB60     		str	r3, [r7, #8]
 1263              		.loc 2 203 1
ARM GAS  /tmp/ccad9K0d.s 			page 50


 1264 002c 00BF     		nop
 1265              	.L69:
 1266              	.LBE139:
 1267              	.LBE138:
 1268              		.loc 1 1348 4 discriminator 1
 1269 002e FEE7     		b	.L69
 1270              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1271              		.loc 1 1349 4
 1272 0030 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1273              		.loc 1 1360 5
 1274 0034 0021     		movs	r1, #0
 1275 0036 7868     		ldr	r0, [r7, #4]
 1276 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1277              		.loc 1 1362 22
 1278 003c FFF7FEFF 		bl	xTaskResumeAll
 1279 0040 F860     		str	r0, [r7, #12]
 1280              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1281              		.loc 1 1371 5
 1282 0042 FB68     		ldr	r3, [r7, #12]
 1283 0044 002B     		cmp	r3, #0
 1284 0046 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1285              		.loc 1 1373 4
 1286 0048 064B     		ldr	r3, .L72+4
 1287 004a 4FF08052 		mov	r2, #268435456
 1288 004e 1A60     		str	r2, [r3]
 1289              		.syntax unified
 1290              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1291 0050 BFF34F8F 		dsb
 1292              	@ 0 "" 2
 1293              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1294 0054 BFF36F8F 		isb
 1295              	@ 0 "" 2
ARM GAS  /tmp/ccad9K0d.s 			page 51


 1296              		.thumb
 1297              		.syntax unified
 1298              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1299              		.loc 1 1379 2
 1300 0058 00BF     		nop
 1301 005a 1037     		adds	r7, r7, #16
 1302              	.LCFI33:
 1303              		.cfi_def_cfa_offset 8
 1304 005c BD46     		mov	sp, r7
 1305              	.LCFI34:
 1306              		.cfi_def_cfa_register 13
 1307              		@ sp needed
 1308 005e 80BD     		pop	{r7, pc}
 1309              	.L73:
 1310              		.align	2
 1311              	.L72:
 1312 0060 00000000 		.word	uxSchedulerSuspended
 1313 0064 04ED00E0 		.word	-536810236
 1314              		.cfi_endproc
 1315              	.LFE10:
 1317              		.section	.text.eTaskGetState,"ax",%progbits
 1318              		.align	1
 1319              		.global	eTaskGetState
 1320              		.syntax unified
 1321              		.thumb
 1322              		.thumb_func
 1324              	eTaskGetState:
 1325              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1326              		.loc 1 1387 2
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 32
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330 0000 80B5     		push	{r7, lr}
 1331              	.LCFI35:
 1332              		.cfi_def_cfa_offset 8
 1333              		.cfi_offset 7, -8
 1334              		.cfi_offset 14, -4
 1335 0002 88B0     		sub	sp, sp, #32
 1336              	.LCFI36:
 1337              		.cfi_def_cfa_offset 40
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI37:
 1340              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccad9K0d.s 			page 52


 1341 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1342              		.loc 1 1390 22
 1343 0008 7B68     		ldr	r3, [r7, #4]
 1344 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1345              		.loc 1 1392 3
 1346 000c BB69     		ldr	r3, [r7, #24]
 1347 000e 002B     		cmp	r3, #0
 1348 0010 0AD1     		bne	.L75
 1349              	.LBB140:
 1350              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1351              		.loc 2 195 2
 1352              		.syntax unified
 1353              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1354 0012 4FF05003 			mov r3, #80												
 1355 0016 83F31188 		msr basepri, r3											
 1356 001a BFF36F8F 		isb														
 1357 001e BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              		.thumb
 1361              		.syntax unified
 1362 0022 BB60     		str	r3, [r7, #8]
 1363              		.loc 2 203 1
 1364 0024 00BF     		nop
 1365              	.L76:
 1366              	.LBE141:
 1367              	.LBE140:
 1368              		.loc 1 1392 3 discriminator 1
 1369 0026 FEE7     		b	.L76
 1370              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1371              		.loc 1 1394 13
 1372 0028 234B     		ldr	r3, .L87
 1373 002a 1B68     		ldr	r3, [r3]
 1374              		.loc 1 1394 5
 1375 002c BA69     		ldr	r2, [r7, #24]
 1376 002e 9A42     		cmp	r2, r3
 1377 0030 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1378              		.loc 1 1397 12
 1379 0032 0023     		movs	r3, #0
 1380 0034 FB77     		strb	r3, [r7, #31]
 1381 0036 3AE0     		b	.L78
 1382              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccad9K0d.s 			page 53


 1383              		.loc 1 1401 4
 1384 0038 FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1385              		.loc 1 1403 17
 1386 003c BB69     		ldr	r3, [r7, #24]
 1387 003e 5B69     		ldr	r3, [r3, #20]
 1388 0040 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1389              		.loc 1 1404 19
 1390 0042 1E4B     		ldr	r3, .L87+4
 1391 0044 1B68     		ldr	r3, [r3]
 1392 0046 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1393              		.loc 1 1405 29
 1394 0048 1D4B     		ldr	r3, .L87+8
 1395 004a 1B68     		ldr	r3, [r3]
 1396 004c FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1397              		.loc 1 1407 4
 1398 004e FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1399              		.loc 1 1409 6
 1400 0052 7A69     		ldr	r2, [r7, #20]
 1401 0054 3B69     		ldr	r3, [r7, #16]
 1402 0056 9A42     		cmp	r2, r3
 1403 0058 03D0     		beq	.L79
 1404              		.loc 1 1409 41 discriminator 1
 1405 005a 7A69     		ldr	r2, [r7, #20]
 1406 005c FB68     		ldr	r3, [r7, #12]
 1407 005e 9A42     		cmp	r2, r3
 1408 0060 02D1     		bne	.L80
 1409              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1410              		.loc 1 1413 13
 1411 0062 0223     		movs	r3, #2
 1412 0064 FB77     		strb	r3, [r7, #31]
 1413 0066 22E0     		b	.L78
 1414              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1415              		.loc 1 1417 12
 1416 0068 7B69     		ldr	r3, [r7, #20]
 1417 006a 164A     		ldr	r2, .L87+12
 1418 006c 9342     		cmp	r3, r2
 1419 006e 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
ARM GAS  /tmp/ccad9K0d.s 			page 54


1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1420              		.loc 1 1422 10
 1421 0070 BB69     		ldr	r3, [r7, #24]
 1422 0072 9B6A     		ldr	r3, [r3, #40]
 1423              		.loc 1 1422 8
 1424 0074 002B     		cmp	r3, #0
 1425 0076 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1426              		.loc 1 1430 17
 1427 0078 BB69     		ldr	r3, [r7, #24]
 1428 007a 93F85830 		ldrb	r3, [r3, #88]
 1429 007e DBB2     		uxtb	r3, r3
 1430              		.loc 1 1430 10
 1431 0080 012B     		cmp	r3, #1
 1432 0082 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1433              		.loc 1 1432 17
 1434 0084 0223     		movs	r3, #2
 1435 0086 FB77     		strb	r3, [r7, #31]
 1436 0088 11E0     		b	.L78
 1437              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1438              		.loc 1 1436 17
 1439 008a 0323     		movs	r3, #3
 1440 008c FB77     		strb	r3, [r7, #31]
 1441 008e 0EE0     		b	.L78
 1442              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1443              		.loc 1 1447 15
 1444 0090 0223     		movs	r3, #2
 1445 0092 FB77     		strb	r3, [r7, #31]
 1446 0094 0BE0     		b	.L78
 1447              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  /tmp/ccad9K0d.s 			page 55


1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1448              		.loc 1 1453 12
 1449 0096 7B69     		ldr	r3, [r7, #20]
 1450 0098 0B4A     		ldr	r2, .L87+16
 1451 009a 9342     		cmp	r3, r2
 1452 009c 02D0     		beq	.L84
 1453              		.loc 1 1453 59 discriminator 1
 1454 009e 7B69     		ldr	r3, [r7, #20]
 1455 00a0 002B     		cmp	r3, #0
 1456 00a2 02D1     		bne	.L85
 1457              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1458              		.loc 1 1458 14
 1459 00a4 0423     		movs	r3, #4
 1460 00a6 FB77     		strb	r3, [r7, #31]
 1461 00a8 01E0     		b	.L78
 1462              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1463              		.loc 1 1466 13
 1464 00aa 0123     		movs	r3, #1
 1465 00ac FB77     		strb	r3, [r7, #31]
 1466              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1467              		.loc 1 1470 10
 1468 00ae FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1469              		.loc 1 1471 2
 1470 00b0 1846     		mov	r0, r3
 1471 00b2 2037     		adds	r7, r7, #32
 1472              	.LCFI38:
 1473              		.cfi_def_cfa_offset 8
 1474 00b4 BD46     		mov	sp, r7
 1475              	.LCFI39:
 1476              		.cfi_def_cfa_register 13
 1477              		@ sp needed
 1478 00b6 80BD     		pop	{r7, pc}
 1479              	.L88:
 1480              		.align	2
 1481              	.L87:
 1482 00b8 00000000 		.word	pxCurrentTCB
 1483 00bc 00000000 		.word	pxDelayedTaskList
ARM GAS  /tmp/ccad9K0d.s 			page 56


 1484 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1485 00c4 00000000 		.word	xSuspendedTaskList
 1486 00c8 00000000 		.word	xTasksWaitingTermination
 1487              		.cfi_endproc
 1488              	.LFE11:
 1490              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1491              		.align	1
 1492              		.global	uxTaskPriorityGet
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1497              	uxTaskPriorityGet:
 1498              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1499              		.loc 1 1479 2
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 16
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503 0000 80B5     		push	{r7, lr}
 1504              	.LCFI40:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 84B0     		sub	sp, sp, #16
 1509              	.LCFI41:
 1510              		.cfi_def_cfa_offset 24
 1511 0004 00AF     		add	r7, sp, #0
 1512              	.LCFI42:
 1513              		.cfi_def_cfa_register 7
 1514 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1515              		.loc 1 1483 3
 1516 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1517              		.loc 1 1487 12
 1518 000c 7B68     		ldr	r3, [r7, #4]
 1519 000e 002B     		cmp	r3, #0
 1520 0010 02D1     		bne	.L90
 1521              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1522 0012 074B     		ldr	r3, .L93
 1523 0014 1B68     		ldr	r3, [r3]
 1524 0016 00E0     		b	.L91
 1525              	.L90:
 1526              		.loc 1 1487 12 discriminator 2
ARM GAS  /tmp/ccad9K0d.s 			page 57


 1527 0018 7B68     		ldr	r3, [r7, #4]
 1528              	.L91:
 1529              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1530 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1531              		.loc 1 1488 13 discriminator 4
 1532 001c FB68     		ldr	r3, [r7, #12]
 1533 001e DB6A     		ldr	r3, [r3, #44]
 1534 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1535              		.loc 1 1490 3 discriminator 4
 1536 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1537              		.loc 1 1492 10 discriminator 4
 1538 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1539              		.loc 1 1493 2 discriminator 4
 1540 0028 1846     		mov	r0, r3
 1541 002a 1037     		adds	r7, r7, #16
 1542              	.LCFI43:
 1543              		.cfi_def_cfa_offset 8
 1544 002c BD46     		mov	sp, r7
 1545              	.LCFI44:
 1546              		.cfi_def_cfa_register 13
 1547              		@ sp needed
 1548 002e 80BD     		pop	{r7, pc}
 1549              	.L94:
 1550              		.align	2
 1551              	.L93:
 1552 0030 00000000 		.word	pxCurrentTCB
 1553              		.cfi_endproc
 1554              	.LFE12:
 1556              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1557              		.align	1
 1558              		.global	uxTaskPriorityGetFromISR
 1559              		.syntax unified
 1560              		.thumb
 1561              		.thumb_func
 1563              	uxTaskPriorityGetFromISR:
 1564              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1565              		.loc 1 1501 2
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 32
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 80B5     		push	{r7, lr}
 1570              	.LCFI45:
 1571              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccad9K0d.s 			page 58


 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 88B0     		sub	sp, sp, #32
 1575              	.LCFI46:
 1576              		.cfi_def_cfa_offset 40
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI47:
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1581              		.loc 1 1521 3
 1582 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1583              	.LBB142:
 1584              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1585              		.loc 2 211 2
 1586              		.syntax unified
 1587              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1588 000c EFF31182 			mrs r2, basepri											
 1589 0010 4FF05003 		mov r3, #80												
 1590 0014 83F31188 		msr basepri, r3											
 1591 0018 BFF36F8F 		isb														
 1592 001c BFF34F8F 		dsb														
 1593              	
 1594              	@ 0 "" 2
 1595              		.thumb
 1596              		.syntax unified
 1597 0020 3A61     		str	r2, [r7, #16]
 1598 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
ARM GAS  /tmp/ccad9K0d.s 			page 59


 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1599              		.loc 2 223 9
 1600 0024 3B69     		ldr	r3, [r7, #16]
 1601              	.LBE143:
 1602              	.LBE142:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1603              		.loc 1 1523 27
 1604 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1605              		.loc 1 1527 12
 1606 0028 7B68     		ldr	r3, [r7, #4]
 1607 002a 002B     		cmp	r3, #0
 1608 002c 02D1     		bne	.L97
 1609              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1610 002e 094B     		ldr	r3, .L100
 1611 0030 1B68     		ldr	r3, [r3]
 1612 0032 00E0     		b	.L98
 1613              	.L97:
 1614              		.loc 1 1527 12 discriminator 2
 1615 0034 7B68     		ldr	r3, [r7, #4]
 1616              	.L98:
 1617              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1618 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1619              		.loc 1 1528 13 discriminator 4
 1620 0038 BB69     		ldr	r3, [r7, #24]
 1621 003a DB6A     		ldr	r3, [r3, #44]
 1622 003c 7B61     		str	r3, [r7, #20]
 1623 003e FB69     		ldr	r3, [r7, #28]
 1624 0040 BB60     		str	r3, [r7, #8]
 1625              	.LBB144:
 1626              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1627              		.loc 2 229 2 discriminator 4
 1628 0042 BB68     		ldr	r3, [r7, #8]
 1629              		.syntax unified
 1630              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1631 0044 83F31188 			msr basepri, r3	
 1632              	@ 0 "" 2
ARM GAS  /tmp/ccad9K0d.s 			page 60


 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1633              		.loc 2 233 1 discriminator 4
 1634              		.thumb
 1635              		.syntax unified
 1636 0048 00BF     		nop
 1637              	.LBE145:
 1638              	.LBE144:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1639              		.loc 1 1532 10 discriminator 4
 1640 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1641              		.loc 1 1533 2 discriminator 4
 1642 004c 1846     		mov	r0, r3
 1643 004e 2037     		adds	r7, r7, #32
 1644              	.LCFI48:
 1645              		.cfi_def_cfa_offset 8
 1646 0050 BD46     		mov	sp, r7
 1647              	.LCFI49:
 1648              		.cfi_def_cfa_register 13
 1649              		@ sp needed
 1650 0052 80BD     		pop	{r7, pc}
 1651              	.L101:
 1652              		.align	2
 1653              	.L100:
 1654 0054 00000000 		.word	pxCurrentTCB
 1655              		.cfi_endproc
 1656              	.LFE13:
 1658              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1659              		.align	1
 1660              		.global	vTaskPrioritySet
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1665              	vTaskPrioritySet:
 1666              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1667              		.loc 1 1541 2
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 32
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
 1671 0000 80B5     		push	{r7, lr}
 1672              	.LCFI50:
 1673              		.cfi_def_cfa_offset 8
 1674              		.cfi_offset 7, -8
ARM GAS  /tmp/ccad9K0d.s 			page 61


 1675              		.cfi_offset 14, -4
 1676 0002 88B0     		sub	sp, sp, #32
 1677              	.LCFI51:
 1678              		.cfi_def_cfa_offset 40
 1679 0004 00AF     		add	r7, sp, #0
 1680              	.LCFI52:
 1681              		.cfi_def_cfa_register 7
 1682 0006 7860     		str	r0, [r7, #4]
 1683 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1684              		.loc 1 1544 13
 1685 000a 0023     		movs	r3, #0
 1686 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1687              		.loc 1 1546 3
 1688 000e 3B68     		ldr	r3, [r7]
 1689 0010 372B     		cmp	r3, #55
 1690 0012 0AD9     		bls	.L103
 1691              	.LBB146:
 1692              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1693              		.loc 2 195 2
 1694              		.syntax unified
 1695              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1696 0014 4FF05003 			mov r3, #80												
 1697 0018 83F31188 		msr basepri, r3											
 1698 001c BFF36F8F 		isb														
 1699 0020 BFF34F8F 		dsb														
 1700              	
 1701              	@ 0 "" 2
 1702              		.thumb
 1703              		.syntax unified
 1704 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1705              		.loc 2 203 1
 1706 0026 00BF     		nop
 1707              	.L104:
 1708              	.LBE147:
 1709              	.LBE146:
 1710              		.loc 1 1546 3 discriminator 1
 1711 0028 FEE7     		b	.L104
 1712              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1713              		.loc 1 1549 5
 1714 002a 3B68     		ldr	r3, [r7]
 1715 002c 372B     		cmp	r3, #55
 1716 002e 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1717              		.loc 1 1551 18
 1718 0030 3723     		movs	r3, #55
 1719 0032 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccad9K0d.s 			page 62


 1720              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1721              		.loc 1 1558 3
 1722 0034 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1723              		.loc 1 1562 12
 1724 0038 7B68     		ldr	r3, [r7, #4]
 1725 003a 002B     		cmp	r3, #0
 1726 003c 02D1     		bne	.L106
 1727              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1728 003e 3B4B     		ldr	r3, .L115
 1729 0040 1B68     		ldr	r3, [r3]
 1730 0042 00E0     		b	.L107
 1731              	.L106:
 1732              		.loc 1 1562 12 discriminator 2
 1733 0044 7B68     		ldr	r3, [r7, #4]
 1734              	.L107:
 1735              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1736 0046 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1737              		.loc 1 1568 27 discriminator 4
 1738 0048 BB69     		ldr	r3, [r7, #24]
 1739 004a DB6C     		ldr	r3, [r3, #76]
 1740 004c 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1741              		.loc 1 1576 6 discriminator 4
 1742 004e 7A69     		ldr	r2, [r7, #20]
 1743 0050 3B68     		ldr	r3, [r7]
 1744 0052 9A42     		cmp	r2, r3
 1745 0054 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1746              		.loc 1 1580 7
 1747 0056 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccad9K0d.s 			page 63


 1748 0058 7B69     		ldr	r3, [r7, #20]
 1749 005a 9A42     		cmp	r2, r3
 1750 005c 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1751              		.loc 1 1582 16
 1752 005e 334B     		ldr	r3, .L115
 1753 0060 1B68     		ldr	r3, [r3]
 1754              		.loc 1 1582 8
 1755 0062 BA69     		ldr	r2, [r7, #24]
 1756 0064 9A42     		cmp	r2, r3
 1757 0066 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1758              		.loc 1 1587 40
 1759 0068 304B     		ldr	r3, .L115
 1760 006a 1B68     		ldr	r3, [r3]
 1761 006c DB6A     		ldr	r3, [r3, #44]
 1762              		.loc 1 1587 9
 1763 006e 3A68     		ldr	r2, [r7]
 1764 0070 9A42     		cmp	r2, r3
 1765 0072 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1766              		.loc 1 1589 23
 1767 0074 0123     		movs	r3, #1
 1768 0076 FB61     		str	r3, [r7, #28]
 1769 0078 06E0     		b	.L110
 1770              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1771              		.loc 1 1603 20
 1772 007a 2C4B     		ldr	r3, .L115
 1773 007c 1B68     		ldr	r3, [r3]
 1774              		.loc 1 1603 12
 1775 007e BA69     		ldr	r2, [r7, #24]
 1776 0080 9A42     		cmp	r2, r3
 1777 0082 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
ARM GAS  /tmp/ccad9K0d.s 			page 64


1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1778              		.loc 1 1608 21
 1779 0084 0123     		movs	r3, #1
 1780 0086 FB61     		str	r3, [r7, #28]
 1781              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1782              		.loc 1 1620 27
 1783 0088 BB69     		ldr	r3, [r7, #24]
 1784 008a DB6A     		ldr	r3, [r3, #44]
 1785 008c 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1786              		.loc 1 1626 15
 1787 008e BB69     		ldr	r3, [r7, #24]
 1788 0090 DA6C     		ldr	r2, [r3, #76]
 1789              		.loc 1 1626 40
 1790 0092 BB69     		ldr	r3, [r7, #24]
 1791 0094 DB6A     		ldr	r3, [r3, #44]
 1792              		.loc 1 1626 8
 1793 0096 9A42     		cmp	r2, r3
 1794 0098 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1795              		.loc 1 1628 25
 1796 009a BB69     		ldr	r3, [r7, #24]
 1797 009c 3A68     		ldr	r2, [r7]
 1798 009e DA62     		str	r2, [r3, #44]
 1799              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1800              		.loc 1 1636 28
 1801 00a0 BB69     		ldr	r3, [r7, #24]
 1802 00a2 3A68     		ldr	r2, [r7]
 1803 00a4 DA64     		str	r2, [r3, #76]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
ARM GAS  /tmp/ccad9K0d.s 			page 65


1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1804              		.loc 1 1646 11
 1805 00a6 BB69     		ldr	r3, [r7, #24]
 1806 00a8 9B69     		ldr	r3, [r3, #24]
 1807              		.loc 1 1646 7
 1808 00aa 002B     		cmp	r3, #0
 1809 00ac 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1810              		.loc 1 1648 6
 1811 00ae 3B68     		ldr	r3, [r7]
 1812 00b0 C3F13802 		rsb	r2, r3, #56
 1813 00b4 BB69     		ldr	r3, [r7, #24]
 1814 00b6 9A61     		str	r2, [r3, #24]
 1815              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1816              		.loc 1 1659 9
 1817 00b8 BB69     		ldr	r3, [r7, #24]
 1818 00ba 5969     		ldr	r1, [r3, #20]
 1819 00bc 3A69     		ldr	r2, [r7, #16]
 1820 00be 1346     		mov	r3, r2
 1821 00c0 9B00     		lsls	r3, r3, #2
 1822 00c2 1344     		add	r3, r3, r2
 1823 00c4 9B00     		lsls	r3, r3, #2
 1824 00c6 1A4A     		ldr	r2, .L115+4
 1825 00c8 1344     		add	r3, r3, r2
 1826              		.loc 1 1659 7
 1827 00ca 9942     		cmp	r1, r3
 1828 00cc 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1829              		.loc 1 1664 10
 1830 00ce BB69     		ldr	r3, [r7, #24]
 1831 00d0 0433     		adds	r3, r3, #4
 1832 00d2 1846     		mov	r0, r3
 1833 00d4 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccad9K0d.s 			page 66


1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1834              		.loc 1 1675 6
 1835 00d8 BB69     		ldr	r3, [r7, #24]
 1836 00da DA6A     		ldr	r2, [r3, #44]
 1837 00dc 154B     		ldr	r3, .L115+8
 1838 00de 1B68     		ldr	r3, [r3]
 1839 00e0 9A42     		cmp	r2, r3
 1840 00e2 03D9     		bls	.L114
 1841              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1842 00e4 BB69     		ldr	r3, [r7, #24]
 1843 00e6 DB6A     		ldr	r3, [r3, #44]
 1844 00e8 124A     		ldr	r2, .L115+8
 1845 00ea 1360     		str	r3, [r2]
 1846              	.L114:
 1847              		.loc 1 1675 6 discriminator 3
 1848 00ec BB69     		ldr	r3, [r7, #24]
 1849 00ee DA6A     		ldr	r2, [r3, #44]
 1850 00f0 1346     		mov	r3, r2
 1851 00f2 9B00     		lsls	r3, r3, #2
 1852 00f4 1344     		add	r3, r3, r2
 1853 00f6 9B00     		lsls	r3, r3, #2
 1854 00f8 0D4A     		ldr	r2, .L115+4
 1855 00fa 1A44     		add	r2, r2, r3
 1856 00fc BB69     		ldr	r3, [r7, #24]
 1857 00fe 0433     		adds	r3, r3, #4
 1858 0100 1946     		mov	r1, r3
 1859 0102 1046     		mov	r0, r2
 1860 0104 FFF7FEFF 		bl	vListInsertEnd
 1861              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1862              		.loc 1 1682 7 is_stmt 1
 1863 0108 FB69     		ldr	r3, [r7, #28]
 1864 010a 002B     		cmp	r3, #0
 1865 010c 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1866              		.loc 1 1684 6
 1867 010e 0A4B     		ldr	r3, .L115+12
 1868 0110 4FF08052 		mov	r2, #268435456
 1869 0114 1A60     		str	r2, [r3]
 1870              		.syntax unified
 1871              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccad9K0d.s 			page 67


 1872 0116 BFF34F8F 		dsb
 1873              	@ 0 "" 2
 1874              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1875 011a BFF36F8F 		isb
 1876              	@ 0 "" 2
 1877              		.thumb
 1878              		.syntax unified
 1879              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1880              		.loc 1 1696 3
 1881 011e FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1882              		.loc 1 1697 2
 1883 0122 00BF     		nop
 1884 0124 2037     		adds	r7, r7, #32
 1885              	.LCFI53:
 1886              		.cfi_def_cfa_offset 8
 1887 0126 BD46     		mov	sp, r7
 1888              	.LCFI54:
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 0128 80BD     		pop	{r7, pc}
 1892              	.L116:
 1893 012a 00BF     		.align	2
 1894              	.L115:
 1895 012c 00000000 		.word	pxCurrentTCB
 1896 0130 00000000 		.word	pxReadyTasksLists
 1897 0134 00000000 		.word	uxTopReadyPriority
 1898 0138 04ED00E0 		.word	-536810236
 1899              		.cfi_endproc
 1900              	.LFE14:
 1902              		.section	.text.vTaskSuspend,"ax",%progbits
 1903              		.align	1
 1904              		.global	vTaskSuspend
 1905              		.syntax unified
 1906              		.thumb
 1907              		.thumb_func
 1909              	vTaskSuspend:
 1910              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
ARM GAS  /tmp/ccad9K0d.s 			page 68


1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1911              		.loc 1 1705 2
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 16
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 80B5     		push	{r7, lr}
 1916              	.LCFI55:
 1917              		.cfi_def_cfa_offset 8
 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 84B0     		sub	sp, sp, #16
 1921              	.LCFI56:
 1922              		.cfi_def_cfa_offset 24
 1923 0004 00AF     		add	r7, sp, #0
 1924              	.LCFI57:
 1925              		.cfi_def_cfa_register 7
 1926 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1927              		.loc 1 1708 3
 1928 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1929              		.loc 1 1712 12
 1930 000c 7B68     		ldr	r3, [r7, #4]
 1931 000e 002B     		cmp	r3, #0
 1932 0010 02D1     		bne	.L118
 1933              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1934 0012 304B     		ldr	r3, .L129
 1935 0014 1B68     		ldr	r3, [r3]
 1936 0016 00E0     		b	.L119
 1937              	.L118:
 1938              		.loc 1 1712 12 discriminator 2
 1939 0018 7B68     		ldr	r3, [r7, #4]
 1940              	.L119:
 1941              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1942 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1943              		.loc 1 1718 8 discriminator 4
 1944 001c FB68     		ldr	r3, [r7, #12]
 1945 001e 0433     		adds	r3, r3, #4
 1946 0020 1846     		mov	r0, r3
 1947 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccad9K0d.s 			page 69


1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1948              		.loc 1 1728 8 discriminator 4
 1949 0026 FB68     		ldr	r3, [r7, #12]
 1950 0028 9B6A     		ldr	r3, [r3, #40]
 1951              		.loc 1 1728 6 discriminator 4
 1952 002a 002B     		cmp	r3, #0
 1953 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1954              		.loc 1 1730 14
 1955 002e FB68     		ldr	r3, [r7, #12]
 1956 0030 1833     		adds	r3, r3, #24
 1957 0032 1846     		mov	r0, r3
 1958 0034 FFF7FEFF 		bl	uxListRemove
 1959              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1960              		.loc 1 1737 4
 1961 0038 FB68     		ldr	r3, [r7, #12]
 1962 003a 0433     		adds	r3, r3, #4
 1963 003c 1946     		mov	r1, r3
 1964 003e 2648     		ldr	r0, .L129+4
 1965 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1966              		.loc 1 1741 14
 1967 0044 FB68     		ldr	r3, [r7, #12]
 1968 0046 93F85830 		ldrb	r3, [r3, #88]
 1969 004a DBB2     		uxtb	r3, r3
 1970              		.loc 1 1741 7
 1971 004c 012B     		cmp	r3, #1
 1972 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1973              		.loc 1 1745 27
 1974 0050 FB68     		ldr	r3, [r7, #12]
 1975 0052 0022     		movs	r2, #0
 1976 0054 83F85820 		strb	r2, [r3, #88]
 1977              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1978              		.loc 1 1750 3
ARM GAS  /tmp/ccad9K0d.s 			page 70


 1979 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1980              		.loc 1 1752 25
 1981 005c 1F4B     		ldr	r3, .L129+8
 1982 005e 1B68     		ldr	r3, [r3]
 1983              		.loc 1 1752 5
 1984 0060 002B     		cmp	r3, #0
 1985 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1986              		.loc 1 1756 4
 1987 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1988              		.loc 1 1758 5
 1989 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1990              		.loc 1 1760 4
 1991 006c FFF7FEFF 		bl	vPortExitCritical
 1992              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1993              		.loc 1 1767 13
 1994 0070 184B     		ldr	r3, .L129
 1995 0072 1B68     		ldr	r3, [r3]
 1996              		.loc 1 1767 5
 1997 0074 FA68     		ldr	r2, [r7, #12]
 1998 0076 9A42     		cmp	r2, r3
 1999 0078 27D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2000              		.loc 1 1769 26
 2001 007a 184B     		ldr	r3, .L129+8
 2002 007c 1B68     		ldr	r3, [r3]
 2003              		.loc 1 1769 6
 2004 007e 002B     		cmp	r3, #0
 2005 0080 17D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2006              		.loc 1 1772 5
 2007 0082 174B     		ldr	r3, .L129+12
 2008 0084 1B68     		ldr	r3, [r3]
 2009 0086 002B     		cmp	r3, #0
 2010 0088 0AD0     		beq	.L125
 2011              	.LBB148:
 2012              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccad9K0d.s 			page 71


 2013              		.loc 2 195 2
 2014              		.syntax unified
 2015              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2016 008a 4FF05003 			mov r3, #80												
 2017 008e 83F31188 		msr basepri, r3											
 2018 0092 BFF36F8F 		isb														
 2019 0096 BFF34F8F 		dsb														
 2020              	
 2021              	@ 0 "" 2
 2022              		.thumb
 2023              		.syntax unified
 2024 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2025              		.loc 2 203 1
 2026 009c 00BF     		nop
 2027              	.L126:
 2028              	.LBE149:
 2029              	.LBE148:
 2030              		.loc 1 1772 5 discriminator 1
 2031 009e FEE7     		b	.L126
 2032              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2033              		.loc 1 1773 5
 2034 00a0 104B     		ldr	r3, .L129+16
 2035 00a2 4FF08052 		mov	r2, #268435456
 2036 00a6 1A60     		str	r2, [r3]
 2037              		.syntax unified
 2038              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2039 00a8 BFF34F8F 		dsb
 2040              	@ 0 "" 2
 2041              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2042 00ac BFF36F8F 		isb
 2043              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 72


1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2044              		.loc 1 1798 2
 2045              		.thumb
 2046              		.syntax unified
 2047 00b0 0BE0     		b	.L128
 2048              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2049              		.loc 1 1780 9
 2050 00b2 094B     		ldr	r3, .L129+4
 2051 00b4 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2052              		.loc 1 1780 56
 2053 00b6 0C4B     		ldr	r3, .L129+20
 2054 00b8 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2055              		.loc 1 1780 7
 2056 00ba 9A42     		cmp	r2, r3
 2057 00bc 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2058              		.loc 1 1786 19
 2059 00be 054B     		ldr	r3, .L129
 2060 00c0 0022     		movs	r2, #0
 2061 00c2 1A60     		str	r2, [r3]
 2062              		.loc 1 1798 2
 2063 00c4 01E0     		b	.L128
 2064              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2065              		.loc 1 1790 6
 2066 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 2067              	.L128:
 2068              		.loc 1 1798 2
 2069 00ca 00BF     		nop
 2070 00cc 1037     		adds	r7, r7, #16
 2071              	.LCFI58:
 2072              		.cfi_def_cfa_offset 8
 2073 00ce BD46     		mov	sp, r7
 2074              	.LCFI59:
 2075              		.cfi_def_cfa_register 13
 2076              		@ sp needed
 2077 00d0 80BD     		pop	{r7, pc}
 2078              	.L130:
 2079 00d2 00BF     		.align	2
 2080              	.L129:
 2081 00d4 00000000 		.word	pxCurrentTCB
 2082 00d8 00000000 		.word	xSuspendedTaskList
 2083 00dc 00000000 		.word	xSchedulerRunning
 2084 00e0 00000000 		.word	uxSchedulerSuspended
 2085 00e4 04ED00E0 		.word	-536810236
 2086 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2087              		.cfi_endproc
 2088              	.LFE15:
 2090              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2091              		.align	1
 2092              		.syntax unified
 2093              		.thumb
 2094              		.thumb_func
 2096              	prvTaskIsTaskSuspended:
ARM GAS  /tmp/ccad9K0d.s 			page 73


 2097              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2098              		.loc 1 1806 2
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 24
 2101              		@ frame_needed = 1, uses_anonymous_args = 0
 2102              		@ link register save eliminated.
 2103 0000 80B4     		push	{r7}
 2104              	.LCFI60:
 2105              		.cfi_def_cfa_offset 4
 2106              		.cfi_offset 7, -4
 2107 0002 87B0     		sub	sp, sp, #28
 2108              	.LCFI61:
 2109              		.cfi_def_cfa_offset 32
 2110 0004 00AF     		add	r7, sp, #0
 2111              	.LCFI62:
 2112              		.cfi_def_cfa_register 7
 2113 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2114              		.loc 1 1807 13
 2115 0008 0023     		movs	r3, #0
 2116 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2117              		.loc 1 1808 22
 2118 000c 7B68     		ldr	r3, [r7, #4]
 2119 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2120              		.loc 1 1814 3
 2121 0010 7B68     		ldr	r3, [r7, #4]
 2122 0012 002B     		cmp	r3, #0
 2123 0014 0AD1     		bne	.L132
 2124              	.LBB150:
 2125              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2126              		.loc 2 195 2
 2127              		.syntax unified
 2128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2129 0016 4FF05003 			mov r3, #80												
 2130 001a 83F31188 		msr basepri, r3											
 2131 001e BFF36F8F 		isb														
 2132 0022 BFF34F8F 		dsb														
 2133              	
 2134              	@ 0 "" 2
 2135              		.thumb
 2136              		.syntax unified
ARM GAS  /tmp/ccad9K0d.s 			page 74


 2137 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2138              		.loc 2 203 1
 2139 0028 00BF     		nop
 2140              	.L133:
 2141              	.LBE151:
 2142              	.LBE150:
 2143              		.loc 1 1814 3 discriminator 1
 2144 002a FEE7     		b	.L133
 2145              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2146              		.loc 1 1817 7
 2147 002c 3B69     		ldr	r3, [r7, #16]
 2148 002e 5B69     		ldr	r3, [r3, #20]
 2149              		.loc 1 1817 5
 2150 0030 0A4A     		ldr	r2, .L136
 2151 0032 9342     		cmp	r3, r2
 2152 0034 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2153              		.loc 1 1820 8
 2154 0036 3B69     		ldr	r3, [r7, #16]
 2155 0038 9B6A     		ldr	r3, [r3, #40]
 2156              		.loc 1 1820 6
 2157 003a 094A     		ldr	r2, .L136+4
 2158 003c 9342     		cmp	r3, r2
 2159 003e 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2160              		.loc 1 1824 9
 2161 0040 3B69     		ldr	r3, [r7, #16]
 2162 0042 9B6A     		ldr	r3, [r3, #40]
 2163              		.loc 1 1824 7
 2164 0044 002B     		cmp	r3, #0
 2165 0046 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2166              		.loc 1 1826 14
 2167 0048 0123     		movs	r3, #1
 2168 004a 7B61     		str	r3, [r7, #20]
 2169              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 75


1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2170              		.loc 1 1843 10
 2171 004c 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2172              		.loc 1 1844 2
 2173 004e 1846     		mov	r0, r3
 2174 0050 1C37     		adds	r7, r7, #28
 2175              	.LCFI63:
 2176              		.cfi_def_cfa_offset 4
 2177 0052 BD46     		mov	sp, r7
 2178              	.LCFI64:
 2179              		.cfi_def_cfa_register 13
 2180              		@ sp needed
 2181 0054 5DF8047B 		ldr	r7, [sp], #4
 2182              	.LCFI65:
 2183              		.cfi_restore 7
 2184              		.cfi_def_cfa_offset 0
 2185 0058 7047     		bx	lr
 2186              	.L137:
 2187 005a 00BF     		.align	2
 2188              	.L136:
 2189 005c 00000000 		.word	xSuspendedTaskList
 2190 0060 00000000 		.word	xPendingReadyList
 2191              		.cfi_endproc
 2192              	.LFE16:
 2194              		.section	.text.vTaskResume,"ax",%progbits
 2195              		.align	1
 2196              		.global	vTaskResume
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2201              	vTaskResume:
 2202              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2203              		.loc 1 1852 2
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 16
 2206              		@ frame_needed = 1, uses_anonymous_args = 0
 2207 0000 80B5     		push	{r7, lr}
 2208              	.LCFI66:
 2209              		.cfi_def_cfa_offset 8
 2210              		.cfi_offset 7, -8
 2211              		.cfi_offset 14, -4
 2212 0002 84B0     		sub	sp, sp, #16
 2213              	.LCFI67:
ARM GAS  /tmp/ccad9K0d.s 			page 76


 2214              		.cfi_def_cfa_offset 24
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI68:
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2219              		.loc 1 1853 16
 2220 0008 7B68     		ldr	r3, [r7, #4]
 2221 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2222              		.loc 1 1856 3
 2223 000c 7B68     		ldr	r3, [r7, #4]
 2224 000e 002B     		cmp	r3, #0
 2225 0010 0AD1     		bne	.L139
 2226              	.LBB152:
 2227              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2228              		.loc 2 195 2
 2229              		.syntax unified
 2230              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2231 0012 4FF05003 			mov r3, #80												
 2232 0016 83F31188 		msr basepri, r3											
 2233 001a BFF36F8F 		isb														
 2234 001e BFF34F8F 		dsb														
 2235              	
 2236              	@ 0 "" 2
 2237              		.thumb
 2238              		.syntax unified
 2239 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2240              		.loc 2 203 1
 2241 0024 00BF     		nop
 2242              	.L140:
 2243              	.LBE153:
 2244              	.LBE152:
 2245              		.loc 1 1856 3 discriminator 1
 2246 0026 FEE7     		b	.L140
 2247              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2248              		.loc 1 1860 15
 2249 0028 204B     		ldr	r3, .L145
 2250 002a 1B68     		ldr	r3, [r3]
 2251              		.loc 1 1860 5
 2252 002c FA68     		ldr	r2, [r7, #12]
 2253 002e 9A42     		cmp	r2, r3
 2254 0030 38D0     		beq	.L144
 2255              		.loc 1 1860 33 discriminator 1
 2256 0032 FB68     		ldr	r3, [r7, #12]
 2257 0034 002B     		cmp	r3, #0
 2258 0036 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
ARM GAS  /tmp/ccad9K0d.s 			page 77


 2259              		.loc 1 1862 4
 2260 0038 FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2261              		.loc 1 1864 9
 2262 003c F868     		ldr	r0, [r7, #12]
 2263 003e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2264 0042 0346     		mov	r3, r0
 2265              		.loc 1 1864 7
 2266 0044 002B     		cmp	r3, #0
 2267 0046 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2268              		.loc 1 1870 15
 2269 0048 FB68     		ldr	r3, [r7, #12]
 2270 004a 0433     		adds	r3, r3, #4
 2271 004c 1846     		mov	r0, r3
 2272 004e FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2273              		.loc 1 1871 6
 2274 0052 FB68     		ldr	r3, [r7, #12]
 2275 0054 DA6A     		ldr	r2, [r3, #44]
 2276 0056 164B     		ldr	r3, .L145+4
 2277 0058 1B68     		ldr	r3, [r3]
 2278 005a 9A42     		cmp	r2, r3
 2279 005c 03D9     		bls	.L143
 2280              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2281 005e FB68     		ldr	r3, [r7, #12]
 2282 0060 DB6A     		ldr	r3, [r3, #44]
 2283 0062 134A     		ldr	r2, .L145+4
 2284 0064 1360     		str	r3, [r2]
 2285              	.L143:
 2286              		.loc 1 1871 6 discriminator 3
 2287 0066 FB68     		ldr	r3, [r7, #12]
 2288 0068 DA6A     		ldr	r2, [r3, #44]
 2289 006a 1346     		mov	r3, r2
 2290 006c 9B00     		lsls	r3, r3, #2
 2291 006e 1344     		add	r3, r3, r2
 2292 0070 9B00     		lsls	r3, r3, #2
 2293 0072 104A     		ldr	r2, .L145+8
 2294 0074 1A44     		add	r2, r2, r3
 2295 0076 FB68     		ldr	r3, [r7, #12]
 2296 0078 0433     		adds	r3, r3, #4
 2297 007a 1946     		mov	r1, r3
 2298 007c 1046     		mov	r0, r2
 2299 007e FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2300              		.loc 1 1874 15 is_stmt 1 discriminator 3
 2301 0082 FB68     		ldr	r3, [r7, #12]
 2302 0084 DA6A     		ldr	r2, [r3, #44]
 2303              		.loc 1 1874 43 discriminator 3
ARM GAS  /tmp/ccad9K0d.s 			page 78


 2304 0086 094B     		ldr	r3, .L145
 2305 0088 1B68     		ldr	r3, [r3]
 2306 008a DB6A     		ldr	r3, [r3, #44]
 2307              		.loc 1 1874 8 discriminator 3
 2308 008c 9A42     		cmp	r2, r3
 2309 008e 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2310              		.loc 1 1879 7
 2311 0090 094B     		ldr	r3, .L145+12
 2312 0092 4FF08052 		mov	r2, #268435456
 2313 0096 1A60     		str	r2, [r3]
 2314              		.syntax unified
 2315              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2316 0098 BFF34F8F 		dsb
 2317              	@ 0 "" 2
 2318              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2319 009c BFF36F8F 		isb
 2320              	@ 0 "" 2
 2321              		.thumb
 2322              		.syntax unified
 2323              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2324              		.loc 1 1891 4
 2325 00a0 FFF7FEFF 		bl	vPortExitCritical
 2326              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2327              		.loc 1 1897 2
 2328 00a4 00BF     		nop
 2329 00a6 1037     		adds	r7, r7, #16
 2330              	.LCFI69:
 2331              		.cfi_def_cfa_offset 8
 2332 00a8 BD46     		mov	sp, r7
 2333              	.LCFI70:
 2334              		.cfi_def_cfa_register 13
 2335              		@ sp needed
 2336 00aa 80BD     		pop	{r7, pc}
 2337              	.L146:
ARM GAS  /tmp/ccad9K0d.s 			page 79


 2338              		.align	2
 2339              	.L145:
 2340 00ac 00000000 		.word	pxCurrentTCB
 2341 00b0 00000000 		.word	uxTopReadyPriority
 2342 00b4 00000000 		.word	pxReadyTasksLists
 2343 00b8 04ED00E0 		.word	-536810236
 2344              		.cfi_endproc
 2345              	.LFE17:
 2347              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2348              		.align	1
 2349              		.global	xTaskResumeFromISR
 2350              		.syntax unified
 2351              		.thumb
 2352              		.thumb_func
 2354              	xTaskResumeFromISR:
 2355              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2356              		.loc 1 1906 2
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 40
 2359              		@ frame_needed = 1, uses_anonymous_args = 0
 2360 0000 80B5     		push	{r7, lr}
 2361              	.LCFI71:
 2362              		.cfi_def_cfa_offset 8
 2363              		.cfi_offset 7, -8
 2364              		.cfi_offset 14, -4
 2365 0002 8AB0     		sub	sp, sp, #40
 2366              	.LCFI72:
 2367              		.cfi_def_cfa_offset 48
 2368 0004 00AF     		add	r7, sp, #0
 2369              	.LCFI73:
 2370              		.cfi_def_cfa_register 7
 2371 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2372              		.loc 1 1907 13
 2373 0008 0023     		movs	r3, #0
 2374 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2375              		.loc 1 1908 16
 2376 000c 7B68     		ldr	r3, [r7, #4]
 2377 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2378              		.loc 1 1911 3
 2379 0010 7B68     		ldr	r3, [r7, #4]
 2380 0012 002B     		cmp	r3, #0
 2381 0014 0AD1     		bne	.L148
 2382              	.LBB154:
ARM GAS  /tmp/ccad9K0d.s 			page 80


 2383              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2384              		.loc 2 195 2
 2385              		.syntax unified
 2386              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2387 0016 4FF05003 			mov r3, #80												
 2388 001a 83F31188 		msr basepri, r3											
 2389 001e BFF36F8F 		isb														
 2390 0022 BFF34F8F 		dsb														
 2391              	
 2392              	@ 0 "" 2
 2393              		.thumb
 2394              		.syntax unified
 2395 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2396              		.loc 2 203 1
 2397 0028 00BF     		nop
 2398              	.L149:
 2399              	.LBE155:
 2400              	.LBE154:
 2401              		.loc 1 1911 3 discriminator 1
 2402 002a FEE7     		b	.L149
 2403              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2404              		.loc 1 1929 3
 2405 002c FFF7FEFF 		bl	vPortValidateInterruptPriority
 2406              	.LBB156:
 2407              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2408              		.loc 2 211 2
 2409              		.syntax unified
 2410              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2411 0030 EFF31182 			mrs r2, basepri											
 2412 0034 4FF05003 		mov r3, #80												
 2413 0038 83F31188 		msr basepri, r3											
 2414 003c BFF36F8F 		isb														
 2415 0040 BFF34F8F 		dsb														
 2416              	
 2417              	@ 0 "" 2
 2418              		.thumb
ARM GAS  /tmp/ccad9K0d.s 			page 81


 2419              		.syntax unified
 2420 0044 7A61     		str	r2, [r7, #20]
 2421 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2422              		.loc 2 223 9
 2423 0048 7B69     		ldr	r3, [r7, #20]
 2424              	.LBE157:
 2425              	.LBE156:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2426              		.loc 1 1931 28
 2427 004a FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2428              		.loc 1 1933 8
 2429 004c 386A     		ldr	r0, [r7, #32]
 2430 004e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2431 0052 0346     		mov	r3, r0
 2432              		.loc 1 1933 6
 2433 0054 002B     		cmp	r3, #0
 2434 0056 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2435              		.loc 1 1938 30
 2436 0058 1D4B     		ldr	r3, .L156
 2437 005a 1B68     		ldr	r3, [r3]
 2438              		.loc 1 1938 7
 2439 005c 002B     		cmp	r3, #0
 2440 005e 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2441              		.loc 1 1942 15
 2442 0060 3B6A     		ldr	r3, [r7, #32]
 2443 0062 DA6A     		ldr	r2, [r3, #44]
 2444              		.loc 1 1942 43
 2445 0064 1B4B     		ldr	r3, .L156+4
 2446 0066 1B68     		ldr	r3, [r3]
 2447 0068 DB6A     		ldr	r3, [r3, #44]
 2448              		.loc 1 1942 8
 2449 006a 9A42     		cmp	r2, r3
 2450 006c 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2451              		.loc 1 1944 22
 2452 006e 0123     		movs	r3, #1
 2453 0070 7B62     		str	r3, [r7, #36]
 2454              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccad9K0d.s 			page 82


1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2455              		.loc 1 1951 15
 2456 0072 3B6A     		ldr	r3, [r7, #32]
 2457 0074 0433     		adds	r3, r3, #4
 2458 0076 1846     		mov	r0, r3
 2459 0078 FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2460              		.loc 1 1952 6
 2461 007c 3B6A     		ldr	r3, [r7, #32]
 2462 007e DA6A     		ldr	r2, [r3, #44]
 2463 0080 154B     		ldr	r3, .L156+8
 2464 0082 1B68     		ldr	r3, [r3]
 2465 0084 9A42     		cmp	r2, r3
 2466 0086 03D9     		bls	.L154
 2467              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2468 0088 3B6A     		ldr	r3, [r7, #32]
 2469 008a DB6A     		ldr	r3, [r3, #44]
 2470 008c 124A     		ldr	r2, .L156+8
 2471 008e 1360     		str	r3, [r2]
 2472              	.L154:
 2473              		.loc 1 1952 6 discriminator 3
 2474 0090 3B6A     		ldr	r3, [r7, #32]
 2475 0092 DA6A     		ldr	r2, [r3, #44]
 2476 0094 1346     		mov	r3, r2
 2477 0096 9B00     		lsls	r3, r3, #2
 2478 0098 1344     		add	r3, r3, r2
 2479 009a 9B00     		lsls	r3, r3, #2
 2480 009c 0F4A     		ldr	r2, .L156+12
 2481 009e 1A44     		add	r2, r2, r3
 2482 00a0 3B6A     		ldr	r3, [r7, #32]
 2483 00a2 0433     		adds	r3, r3, #4
 2484 00a4 1946     		mov	r1, r3
 2485 00a6 1046     		mov	r0, r2
 2486 00a8 FFF7FEFF 		bl	vListInsertEnd
 2487 00ac 05E0     		b	.L151
 2488              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2489              		.loc 1 1959 6 is_stmt 1
 2490 00ae 3B6A     		ldr	r3, [r7, #32]
 2491 00b0 1833     		adds	r3, r3, #24
 2492 00b2 1946     		mov	r1, r3
 2493 00b4 0A48     		ldr	r0, .L156+16
 2494 00b6 FFF7FEFF 		bl	vListInsertEnd
 2495              	.L151:
 2496 00ba FB69     		ldr	r3, [r7, #28]
 2497 00bc FB60     		str	r3, [r7, #12]
 2498              	.LBB158:
 2499              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2500              		.loc 2 229 2
ARM GAS  /tmp/ccad9K0d.s 			page 83


 2501 00be FB68     		ldr	r3, [r7, #12]
 2502              		.syntax unified
 2503              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2504 00c0 83F31188 			msr basepri, r3	
 2505              	@ 0 "" 2
 2506              		.loc 2 233 1
 2507              		.thumb
 2508              		.syntax unified
 2509 00c4 00BF     		nop
 2510              	.LBE159:
 2511              	.LBE158:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2512              		.loc 1 1969 10
 2513 00c6 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2514              		.loc 1 1970 2
 2515 00c8 1846     		mov	r0, r3
 2516 00ca 2837     		adds	r7, r7, #40
 2517              	.LCFI74:
 2518              		.cfi_def_cfa_offset 8
 2519 00cc BD46     		mov	sp, r7
 2520              	.LCFI75:
 2521              		.cfi_def_cfa_register 13
 2522              		@ sp needed
 2523 00ce 80BD     		pop	{r7, pc}
 2524              	.L157:
 2525              		.align	2
 2526              	.L156:
 2527 00d0 00000000 		.word	uxSchedulerSuspended
 2528 00d4 00000000 		.word	pxCurrentTCB
 2529 00d8 00000000 		.word	uxTopReadyPriority
 2530 00dc 00000000 		.word	pxReadyTasksLists
 2531 00e0 00000000 		.word	xPendingReadyList
 2532              		.cfi_endproc
 2533              	.LFE18:
 2535              		.section	.rodata
 2536              		.align	2
 2537              	.LC0:
 2538 0000 49444C45 		.ascii	"IDLE\000"
 2538      00
 2539              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2540              		.align	1
 2541              		.global	vTaskStartScheduler
 2542              		.syntax unified
 2543              		.thumb
 2544              		.thumb_func
 2546              	vTaskStartScheduler:
 2547              	.LFB19:
ARM GAS  /tmp/ccad9K0d.s 			page 84


1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2548              		.loc 1 1976 1
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 24
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
 2552 0000 80B5     		push	{r7, lr}
 2553              	.LCFI76:
 2554              		.cfi_def_cfa_offset 8
 2555              		.cfi_offset 7, -8
 2556              		.cfi_offset 14, -4
 2557 0002 8AB0     		sub	sp, sp, #40
 2558              	.LCFI77:
 2559              		.cfi_def_cfa_offset 48
 2560 0004 04AF     		add	r7, sp, #16
 2561              	.LCFI78:
 2562              		.cfi_def_cfa 7, 32
 2563              	.LBB160:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2564              		.loc 1 1982 17
 2565 0006 0023     		movs	r3, #0
 2566 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2567              		.loc 1 1983 16
 2568 000a 0023     		movs	r3, #0
 2569 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2570              		.loc 1 1988 3
 2571 000e 3A46     		mov	r2, r7
 2572 0010 391D     		adds	r1, r7, #4
 2573 0012 07F10803 		add	r3, r7, #8
 2574 0016 1846     		mov	r0, r3
 2575 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2576              		.loc 1 1989 21
 2577 001c 3968     		ldr	r1, [r7]
 2578 001e 7B68     		ldr	r3, [r7, #4]
 2579 0020 BA68     		ldr	r2, [r7, #8]
 2580 0022 0292     		str	r2, [sp, #8]
 2581 0024 0193     		str	r3, [sp, #4]
 2582 0026 0023     		movs	r3, #0
 2583 0028 0093     		str	r3, [sp]
 2584 002a 0023     		movs	r3, #0
 2585 002c 0A46     		mov	r2, r1
ARM GAS  /tmp/ccad9K0d.s 			page 85


 2586 002e 2149     		ldr	r1, .L166
 2587 0030 2148     		ldr	r0, .L166+4
 2588 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2589 0036 0346     		mov	r3, r0
 2590              		.loc 1 1989 19
 2591 0038 204A     		ldr	r2, .L166+8
 2592 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2593              		.loc 1 1997 23
 2594 003c 1F4B     		ldr	r3, .L166+8
 2595 003e 1B68     		ldr	r3, [r3]
 2596              		.loc 1 1997 5
 2597 0040 002B     		cmp	r3, #0
 2598 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2599              		.loc 1 1999 12
 2600 0044 0123     		movs	r3, #1
 2601 0046 7B61     		str	r3, [r7, #20]
 2602 0048 01E0     		b	.L160
 2603              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2604              		.loc 1 2003 12
 2605 004a 0023     		movs	r3, #0
 2606 004c 7B61     		str	r3, [r7, #20]
 2607              	.L160:
 2608              	.LBE160:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2609              		.loc 1 2020 5
 2610 004e 7B69     		ldr	r3, [r7, #20]
 2611 0050 012B     		cmp	r3, #1
ARM GAS  /tmp/ccad9K0d.s 			page 86


 2612 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2613              		.loc 1 2022 14
 2614 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2615 0058 7861     		str	r0, [r7, #20]
 2616              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2617              		.loc 1 2031 4
 2618 005a 7B69     		ldr	r3, [r7, #20]
 2619 005c 012B     		cmp	r3, #1
 2620 005e 16D1     		bne	.L162
 2621              	.LBB161:
 2622              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2623              		.loc 2 195 2
 2624              		.syntax unified
 2625              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2626 0060 4FF05003 			mov r3, #80												
 2627 0064 83F31188 		msr basepri, r3											
 2628 0068 BFF36F8F 		isb														
 2629 006c BFF34F8F 		dsb														
 2630              	
 2631              	@ 0 "" 2
 2632              		.thumb
 2633              		.syntax unified
 2634 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2635              		.loc 2 203 1
 2636 0072 00BF     		nop
 2637              	.LBE162:
 2638              	.LBE161:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 87


2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2639              		.loc 1 2059 24
 2640 0074 124B     		ldr	r3, .L166+12
 2641 0076 4FF0FF32 		mov	r2, #-1
 2642 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2643              		.loc 1 2060 21
 2644 007c 114B     		ldr	r3, .L166+16
 2645 007e 0122     		movs	r2, #1
 2646 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2647              		.loc 1 2061 14
 2648 0082 114B     		ldr	r3, .L166+20
 2649 0084 0022     		movs	r2, #0
 2650 0086 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2651              		.loc 1 2075 7
 2652 0088 FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccad9K0d.s 			page 88


2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2653              		.loc 1 2096 1
 2654 008c 0EE0     		b	.L165
 2655              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2656              		.loc 1 2090 3
 2657 008e 7B69     		ldr	r3, [r7, #20]
 2658 0090 B3F1FF3F 		cmp	r3, #-1
 2659 0094 0AD1     		bne	.L165
 2660              	.LBB163:
 2661              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2662              		.loc 2 195 2
 2663              		.syntax unified
 2664              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2665 0096 4FF05003 			mov r3, #80												
 2666 009a 83F31188 		msr basepri, r3											
 2667 009e BFF36F8F 		isb														
 2668 00a2 BFF34F8F 		dsb														
 2669              	
 2670              	@ 0 "" 2
 2671              		.thumb
 2672              		.syntax unified
 2673 00a6 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2674              		.loc 2 203 1
 2675 00a8 00BF     		nop
 2676              	.L164:
 2677              	.LBE164:
 2678              	.LBE163:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2679              		.loc 1 2090 3 discriminator 2
 2680 00aa FEE7     		b	.L164
 2681              	.L165:
 2682              		.loc 1 2096 1
 2683 00ac 00BF     		nop
 2684 00ae 1837     		adds	r7, r7, #24
 2685              	.LCFI79:
 2686              		.cfi_def_cfa_offset 8
 2687 00b0 BD46     		mov	sp, r7
 2688              	.LCFI80:
 2689              		.cfi_def_cfa_register 13
 2690              		@ sp needed
 2691 00b2 80BD     		pop	{r7, pc}
 2692              	.L167:
 2693              		.align	2
 2694              	.L166:
 2695 00b4 00000000 		.word	.LC0
 2696 00b8 00000000 		.word	prvIdleTask
 2697 00bc 00000000 		.word	xIdleTaskHandle
 2698 00c0 00000000 		.word	xNextTaskUnblockTime
 2699 00c4 00000000 		.word	xSchedulerRunning
 2700 00c8 00000000 		.word	xTickCount
ARM GAS  /tmp/ccad9K0d.s 			page 89


 2701              		.cfi_endproc
 2702              	.LFE19:
 2704              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2705              		.align	1
 2706              		.global	vTaskEndScheduler
 2707              		.syntax unified
 2708              		.thumb
 2709              		.thumb_func
 2711              	vTaskEndScheduler:
 2712              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2713              		.loc 1 2100 1
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 8
 2716              		@ frame_needed = 1, uses_anonymous_args = 0
 2717 0000 80B5     		push	{r7, lr}
 2718              	.LCFI81:
 2719              		.cfi_def_cfa_offset 8
 2720              		.cfi_offset 7, -8
 2721              		.cfi_offset 14, -4
 2722 0002 82B0     		sub	sp, sp, #8
 2723              	.LCFI82:
 2724              		.cfi_def_cfa_offset 16
 2725 0004 00AF     		add	r7, sp, #0
 2726              	.LCFI83:
 2727              		.cfi_def_cfa_register 7
 2728              	.LBB165:
 2729              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2730              		.loc 2 195 2
 2731              		.syntax unified
 2732              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2733 0006 4FF05003 			mov r3, #80												
 2734 000a 83F31188 		msr basepri, r3											
 2735 000e BFF36F8F 		isb														
 2736 0012 BFF34F8F 		dsb														
 2737              	
 2738              	@ 0 "" 2
 2739              		.thumb
 2740              		.syntax unified
 2741 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2742              		.loc 2 203 1
 2743 0018 00BF     		nop
 2744              	.LBE166:
 2745              	.LBE165:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2746              		.loc 1 2105 20
 2747 001a 044B     		ldr	r3, .L169
 2748 001c 0022     		movs	r2, #0
ARM GAS  /tmp/ccad9K0d.s 			page 90


 2749 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2750              		.loc 1 2106 2
 2751 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2752              		.loc 1 2107 1
 2753 0024 00BF     		nop
 2754 0026 0837     		adds	r7, r7, #8
 2755              	.LCFI84:
 2756              		.cfi_def_cfa_offset 8
 2757 0028 BD46     		mov	sp, r7
 2758              	.LCFI85:
 2759              		.cfi_def_cfa_register 13
 2760              		@ sp needed
 2761 002a 80BD     		pop	{r7, pc}
 2762              	.L170:
 2763              		.align	2
 2764              	.L169:
 2765 002c 00000000 		.word	xSchedulerRunning
 2766              		.cfi_endproc
 2767              	.LFE20:
 2769              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2770              		.align	1
 2771              		.global	vTaskSuspendAll
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2776              	vTaskSuspendAll:
 2777              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2778              		.loc 1 2111 1
 2779              		.cfi_startproc
 2780              		@ args = 0, pretend = 0, frame = 0
 2781              		@ frame_needed = 1, uses_anonymous_args = 0
 2782              		@ link register save eliminated.
 2783 0000 80B4     		push	{r7}
 2784              	.LCFI86:
 2785              		.cfi_def_cfa_offset 4
 2786              		.cfi_offset 7, -4
 2787 0002 00AF     		add	r7, sp, #0
 2788              	.LCFI87:
 2789              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
ARM GAS  /tmp/ccad9K0d.s 			page 91


 2790              		.loc 1 2123 2
 2791 0004 044B     		ldr	r3, .L172
 2792 0006 1B68     		ldr	r3, [r3]
 2793 0008 0133     		adds	r3, r3, #1
 2794 000a 034A     		ldr	r2, .L172
 2795 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2796              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2797              		.loc 1 2128 1
 2798 000e 00BF     		nop
 2799 0010 BD46     		mov	sp, r7
 2800              	.LCFI88:
 2801              		.cfi_def_cfa_register 13
 2802              		@ sp needed
 2803 0012 5DF8047B 		ldr	r7, [sp], #4
 2804              	.LCFI89:
 2805              		.cfi_restore 7
 2806              		.cfi_def_cfa_offset 0
 2807 0016 7047     		bx	lr
 2808              	.L173:
 2809              		.align	2
 2810              	.L172:
 2811 0018 00000000 		.word	uxSchedulerSuspended
 2812              		.cfi_endproc
 2813              	.LFE21:
 2815              		.section	.text.xTaskResumeAll,"ax",%progbits
 2816              		.align	1
 2817              		.global	xTaskResumeAll
 2818              		.syntax unified
 2819              		.thumb
 2820              		.thumb_func
 2822              	xTaskResumeAll:
 2823              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 92


2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2824              		.loc 1 2195 1
 2825              		.cfi_startproc
 2826              		@ args = 0, pretend = 0, frame = 16
 2827              		@ frame_needed = 1, uses_anonymous_args = 0
 2828 0000 80B5     		push	{r7, lr}
 2829              	.LCFI90:
 2830              		.cfi_def_cfa_offset 8
 2831              		.cfi_offset 7, -8
 2832              		.cfi_offset 14, -4
 2833 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccad9K0d.s 			page 93


 2834              	.LCFI91:
 2835              		.cfi_def_cfa_offset 24
 2836 0004 00AF     		add	r7, sp, #0
 2837              	.LCFI92:
 2838              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2839              		.loc 1 2196 8
 2840 0006 0023     		movs	r3, #0
 2841 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2842              		.loc 1 2197 12
 2843 000a 0023     		movs	r3, #0
 2844 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2845              		.loc 1 2201 2
 2846 000e 424B     		ldr	r3, .L186
 2847 0010 1B68     		ldr	r3, [r3]
 2848 0012 002B     		cmp	r3, #0
 2849 0014 0AD1     		bne	.L175
 2850              	.LBB167:
 2851              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2852              		.loc 2 195 2
 2853              		.syntax unified
 2854              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2855 0016 4FF05003 			mov r3, #80												
 2856 001a 83F31188 		msr basepri, r3											
 2857 001e BFF36F8F 		isb														
 2858 0022 BFF34F8F 		dsb														
 2859              	
 2860              	@ 0 "" 2
 2861              		.thumb
 2862              		.syntax unified
 2863 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2864              		.loc 2 203 1
 2865 0028 00BF     		nop
 2866              	.L176:
 2867              	.LBE168:
 2868              	.LBE167:
 2869              		.loc 1 2201 2 discriminator 1
 2870 002a FEE7     		b	.L176
 2871              	.L175:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2872              		.loc 1 2208 2
 2873 002c FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
ARM GAS  /tmp/ccad9K0d.s 			page 94


 2874              		.loc 1 2210 3
 2875 0030 394B     		ldr	r3, .L186
 2876 0032 1B68     		ldr	r3, [r3]
 2877 0034 013B     		subs	r3, r3, #1
 2878 0036 384A     		ldr	r2, .L186
 2879 0038 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2880              		.loc 1 2212 28
 2881 003a 374B     		ldr	r3, .L186
 2882 003c 1B68     		ldr	r3, [r3]
 2883              		.loc 1 2212 5
 2884 003e 002B     		cmp	r3, #0
 2885 0040 62D1     		bne	.L177
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2886              		.loc 1 2214 31
 2887 0042 364B     		ldr	r3, .L186+4
 2888 0044 1B68     		ldr	r3, [r3]
 2889              		.loc 1 2214 6
 2890 0046 002B     		cmp	r3, #0
 2891 0048 5ED0     		beq	.L177
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2892              		.loc 1 2218 10
 2893 004a 2FE0     		b	.L178
 2894              	.L180:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2895              		.loc 1 2220 14
 2896 004c 344B     		ldr	r3, .L186+8
 2897 004e DB68     		ldr	r3, [r3, #12]
 2898              		.loc 1 2220 12
 2899 0050 DB68     		ldr	r3, [r3, #12]
 2900 0052 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2901              		.loc 1 2221 15
 2902 0054 FB68     		ldr	r3, [r7, #12]
 2903 0056 1833     		adds	r3, r3, #24
 2904 0058 1846     		mov	r0, r3
 2905 005a FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2906              		.loc 1 2222 15
 2907 005e FB68     		ldr	r3, [r7, #12]
 2908 0060 0433     		adds	r3, r3, #4
 2909 0062 1846     		mov	r0, r3
 2910 0064 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2911              		.loc 1 2223 6
 2912 0068 FB68     		ldr	r3, [r7, #12]
 2913 006a DA6A     		ldr	r2, [r3, #44]
 2914 006c 2D4B     		ldr	r3, .L186+12
 2915 006e 1B68     		ldr	r3, [r3]
 2916 0070 9A42     		cmp	r2, r3
 2917 0072 03D9     		bls	.L179
ARM GAS  /tmp/ccad9K0d.s 			page 95


 2918              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2919 0074 FB68     		ldr	r3, [r7, #12]
 2920 0076 DB6A     		ldr	r3, [r3, #44]
 2921 0078 2A4A     		ldr	r2, .L186+12
 2922 007a 1360     		str	r3, [r2]
 2923              	.L179:
 2924              		.loc 1 2223 6 discriminator 3
 2925 007c FB68     		ldr	r3, [r7, #12]
 2926 007e DA6A     		ldr	r2, [r3, #44]
 2927 0080 1346     		mov	r3, r2
 2928 0082 9B00     		lsls	r3, r3, #2
 2929 0084 1344     		add	r3, r3, r2
 2930 0086 9B00     		lsls	r3, r3, #2
 2931 0088 274A     		ldr	r2, .L186+16
 2932 008a 1A44     		add	r2, r2, r3
 2933 008c FB68     		ldr	r3, [r7, #12]
 2934 008e 0433     		adds	r3, r3, #4
 2935 0090 1946     		mov	r1, r3
 2936 0092 1046     		mov	r0, r2
 2937 0094 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2938              		.loc 1 2227 15 is_stmt 1 discriminator 3
 2939 0098 FB68     		ldr	r3, [r7, #12]
 2940 009a DA6A     		ldr	r2, [r3, #44]
 2941              		.loc 1 2227 43 discriminator 3
 2942 009c 234B     		ldr	r3, .L186+20
 2943 009e 1B68     		ldr	r3, [r3]
 2944 00a0 DB6A     		ldr	r3, [r3, #44]
 2945              		.loc 1 2227 8 discriminator 3
 2946 00a2 9A42     		cmp	r2, r3
 2947 00a4 02D3     		bcc	.L178
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2948              		.loc 1 2229 21
 2949 00a6 224B     		ldr	r3, .L186+24
 2950 00a8 0122     		movs	r2, #1
 2951 00aa 1A60     		str	r2, [r3]
 2952              	.L178:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2953              		.loc 1 2218 12
 2954 00ac 1C4B     		ldr	r3, .L186+8
 2955 00ae 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2956              		.loc 1 2218 10
 2957 00b0 002B     		cmp	r3, #0
 2958 00b2 CBD1     		bne	.L180
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  /tmp/ccad9K0d.s 			page 96


 2959              		.loc 1 2237 7
 2960 00b4 FB68     		ldr	r3, [r7, #12]
 2961 00b6 002B     		cmp	r3, #0
 2962 00b8 01D0     		beq	.L181
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2963              		.loc 1 2245 6
 2964 00ba FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2965              	.L181:
 2966              	.LBB169:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2967              		.loc 1 2253 17
 2968 00be 1D4B     		ldr	r3, .L186+28
 2969 00c0 1B68     		ldr	r3, [r3]
 2970 00c2 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2971              		.loc 1 2255 8
 2972 00c4 7B68     		ldr	r3, [r7, #4]
 2973 00c6 002B     		cmp	r3, #0
 2974 00c8 10D0     		beq	.L182
 2975              	.L184:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2976              		.loc 1 2259 12
 2977 00ca FFF7FEFF 		bl	xTaskIncrementTick
 2978 00ce 0346     		mov	r3, r0
 2979              		.loc 1 2259 10
 2980 00d0 002B     		cmp	r3, #0
 2981 00d2 02D0     		beq	.L183
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2982              		.loc 1 2261 23
 2983 00d4 164B     		ldr	r3, .L186+24
 2984 00d6 0122     		movs	r2, #1
 2985 00d8 1A60     		str	r2, [r3]
 2986              	.L183:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  /tmp/ccad9K0d.s 			page 97


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 2987              		.loc 1 2267 8
 2988 00da 7B68     		ldr	r3, [r7, #4]
 2989 00dc 013B     		subs	r3, r3, #1
 2990 00de 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 2991              		.loc 1 2268 7
 2992 00e0 7B68     		ldr	r3, [r7, #4]
 2993 00e2 002B     		cmp	r3, #0
 2994 00e4 F1D1     		bne	.L184
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 2995              		.loc 1 2270 20
 2996 00e6 134B     		ldr	r3, .L186+28
 2997 00e8 0022     		movs	r2, #0
 2998 00ea 1A60     		str	r2, [r3]
 2999              	.L182:
 3000              	.LBE169:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3001              		.loc 1 2278 23
 3002 00ec 104B     		ldr	r3, .L186+24
 3003 00ee 1B68     		ldr	r3, [r3]
 3004              		.loc 1 2278 7
 3005 00f0 002B     		cmp	r3, #0
 3006 00f2 09D0     		beq	.L177
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3007              		.loc 1 2282 23
 3008 00f4 0123     		movs	r3, #1
 3009 00f6 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3010              		.loc 1 2285 6
 3011 00f8 0F4B     		ldr	r3, .L186+32
 3012 00fa 4FF08052 		mov	r2, #268435456
 3013 00fe 1A60     		str	r2, [r3]
 3014              		.syntax unified
 3015              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3016 0100 BFF34F8F 		dsb
 3017              	@ 0 "" 2
 3018              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3019 0104 BFF36F8F 		isb
 3020              	@ 0 "" 2
 3021              		.thumb
 3022              		.syntax unified
 3023              	.L177:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccad9K0d.s 			page 98


2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3024              		.loc 1 2298 2
 3025 0108 FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3026              		.loc 1 2300 9
 3027 010c BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3028              		.loc 1 2301 1
 3029 010e 1846     		mov	r0, r3
 3030 0110 1037     		adds	r7, r7, #16
 3031              	.LCFI93:
 3032              		.cfi_def_cfa_offset 8
 3033 0112 BD46     		mov	sp, r7
 3034              	.LCFI94:
 3035              		.cfi_def_cfa_register 13
 3036              		@ sp needed
 3037 0114 80BD     		pop	{r7, pc}
 3038              	.L187:
 3039 0116 00BF     		.align	2
 3040              	.L186:
 3041 0118 00000000 		.word	uxSchedulerSuspended
 3042 011c 00000000 		.word	uxCurrentNumberOfTasks
 3043 0120 00000000 		.word	xPendingReadyList
 3044 0124 00000000 		.word	uxTopReadyPriority
 3045 0128 00000000 		.word	pxReadyTasksLists
 3046 012c 00000000 		.word	pxCurrentTCB
 3047 0130 00000000 		.word	xYieldPending
 3048 0134 00000000 		.word	xPendedTicks
 3049 0138 04ED00E0 		.word	-536810236
 3050              		.cfi_endproc
 3051              	.LFE22:
 3053              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3054              		.align	1
 3055              		.global	xTaskGetTickCount
 3056              		.syntax unified
 3057              		.thumb
 3058              		.thumb_func
 3060              	xTaskGetTickCount:
 3061              	.LFB23:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3062              		.loc 1 2305 1
 3063              		.cfi_startproc
ARM GAS  /tmp/ccad9K0d.s 			page 99


 3064              		@ args = 0, pretend = 0, frame = 8
 3065              		@ frame_needed = 1, uses_anonymous_args = 0
 3066              		@ link register save eliminated.
 3067 0000 80B4     		push	{r7}
 3068              	.LCFI95:
 3069              		.cfi_def_cfa_offset 4
 3070              		.cfi_offset 7, -4
 3071 0002 83B0     		sub	sp, sp, #12
 3072              	.LCFI96:
 3073              		.cfi_def_cfa_offset 16
 3074 0004 00AF     		add	r7, sp, #0
 3075              	.LCFI97:
 3076              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3077              		.loc 1 2311 10
 3078 0006 054B     		ldr	r3, .L190
 3079 0008 1B68     		ldr	r3, [r3]
 3080 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3081              		.loc 1 2315 9
 3082 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3083              		.loc 1 2316 1
 3084 000e 1846     		mov	r0, r3
 3085 0010 0C37     		adds	r7, r7, #12
 3086              	.LCFI98:
 3087              		.cfi_def_cfa_offset 4
 3088 0012 BD46     		mov	sp, r7
 3089              	.LCFI99:
 3090              		.cfi_def_cfa_register 13
 3091              		@ sp needed
 3092 0014 5DF8047B 		ldr	r7, [sp], #4
 3093              	.LCFI100:
 3094              		.cfi_restore 7
 3095              		.cfi_def_cfa_offset 0
 3096 0018 7047     		bx	lr
 3097              	.L191:
 3098 001a 00BF     		.align	2
 3099              	.L190:
 3100 001c 00000000 		.word	xTickCount
 3101              		.cfi_endproc
 3102              	.LFE23:
 3104              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3105              		.align	1
 3106              		.global	xTaskGetTickCountFromISR
 3107              		.syntax unified
 3108              		.thumb
 3109              		.thumb_func
 3111              	xTaskGetTickCountFromISR:
ARM GAS  /tmp/ccad9K0d.s 			page 100


 3112              	.LFB24:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3113              		.loc 1 2320 1
 3114              		.cfi_startproc
 3115              		@ args = 0, pretend = 0, frame = 8
 3116              		@ frame_needed = 1, uses_anonymous_args = 0
 3117 0000 80B5     		push	{r7, lr}
 3118              	.LCFI101:
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 7, -8
 3121              		.cfi_offset 14, -4
 3122 0002 82B0     		sub	sp, sp, #8
 3123              	.LCFI102:
 3124              		.cfi_def_cfa_offset 16
 3125 0004 00AF     		add	r7, sp, #0
 3126              	.LCFI103:
 3127              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3128              		.loc 1 2338 2
 3129 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3130              		.loc 1 2340 25
 3131 000a 0023     		movs	r3, #0
 3132 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3133              		.loc 1 2342 11
 3134 000e 044B     		ldr	r3, .L194
 3135 0010 1B68     		ldr	r3, [r3]
 3136 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3137              		.loc 1 2346 9
 3138 0014 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccad9K0d.s 			page 101


2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3139              		.loc 1 2347 1
 3140 0016 1846     		mov	r0, r3
 3141 0018 0837     		adds	r7, r7, #8
 3142              	.LCFI104:
 3143              		.cfi_def_cfa_offset 8
 3144 001a BD46     		mov	sp, r7
 3145              	.LCFI105:
 3146              		.cfi_def_cfa_register 13
 3147              		@ sp needed
 3148 001c 80BD     		pop	{r7, pc}
 3149              	.L195:
 3150 001e 00BF     		.align	2
 3151              	.L194:
 3152 0020 00000000 		.word	xTickCount
 3153              		.cfi_endproc
 3154              	.LFE24:
 3156              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3157              		.align	1
 3158              		.global	uxTaskGetNumberOfTasks
 3159              		.syntax unified
 3160              		.thumb
 3161              		.thumb_func
 3163              	uxTaskGetNumberOfTasks:
 3164              	.LFB25:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3165              		.loc 1 2351 1
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 1, uses_anonymous_args = 0
 3169              		@ link register save eliminated.
 3170 0000 80B4     		push	{r7}
 3171              	.LCFI106:
 3172              		.cfi_def_cfa_offset 4
 3173              		.cfi_offset 7, -4
 3174 0002 00AF     		add	r7, sp, #0
 3175              	.LCFI107:
 3176              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3177              		.loc 1 2354 9
 3178 0004 034B     		ldr	r3, .L198
 3179 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3180              		.loc 1 2355 1
 3181 0008 1846     		mov	r0, r3
 3182 000a BD46     		mov	sp, r7
 3183              	.LCFI108:
 3184              		.cfi_def_cfa_register 13
 3185              		@ sp needed
 3186 000c 5DF8047B 		ldr	r7, [sp], #4
 3187              	.LCFI109:
 3188              		.cfi_restore 7
ARM GAS  /tmp/ccad9K0d.s 			page 102


 3189              		.cfi_def_cfa_offset 0
 3190 0010 7047     		bx	lr
 3191              	.L199:
 3192 0012 00BF     		.align	2
 3193              	.L198:
 3194 0014 00000000 		.word	uxCurrentNumberOfTasks
 3195              		.cfi_endproc
 3196              	.LFE25:
 3198              		.section	.text.pcTaskGetName,"ax",%progbits
 3199              		.align	1
 3200              		.global	pcTaskGetName
 3201              		.syntax unified
 3202              		.thumb
 3203              		.thumb_func
 3205              	pcTaskGetName:
 3206              	.LFB26:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3207              		.loc 1 2359 1
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 16
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211              		@ link register save eliminated.
 3212 0000 80B4     		push	{r7}
 3213              	.LCFI110:
 3214              		.cfi_def_cfa_offset 4
 3215              		.cfi_offset 7, -4
 3216 0002 85B0     		sub	sp, sp, #20
 3217              	.LCFI111:
 3218              		.cfi_def_cfa_offset 24
 3219 0004 00AF     		add	r7, sp, #0
 3220              	.LCFI112:
 3221              		.cfi_def_cfa_register 7
 3222 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3223              		.loc 1 2364 10
 3224 0008 7B68     		ldr	r3, [r7, #4]
 3225 000a 002B     		cmp	r3, #0
 3226 000c 02D1     		bne	.L201
 3227              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3228 000e 0D4B     		ldr	r3, .L206
 3229 0010 1B68     		ldr	r3, [r3]
 3230 0012 00E0     		b	.L202
 3231              	.L201:
 3232              		.loc 1 2364 10 discriminator 2
 3233 0014 7B68     		ldr	r3, [r7, #4]
 3234              	.L202:
 3235              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3236 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3237              		.loc 1 2365 2 discriminator 4
ARM GAS  /tmp/ccad9K0d.s 			page 103


 3238 0018 FB68     		ldr	r3, [r7, #12]
 3239 001a 002B     		cmp	r3, #0
 3240 001c 0AD1     		bne	.L203
 3241              	.LBB170:
 3242              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3243              		.loc 2 195 2
 3244              		.syntax unified
 3245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3246 001e 4FF05003 			mov r3, #80												
 3247 0022 83F31188 		msr basepri, r3											
 3248 0026 BFF36F8F 		isb														
 3249 002a BFF34F8F 		dsb														
 3250              	
 3251              	@ 0 "" 2
 3252              		.thumb
 3253              		.syntax unified
 3254 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3255              		.loc 2 203 1
 3256 0030 00BF     		nop
 3257              	.L204:
 3258              	.LBE171:
 3259              	.LBE170:
 3260              		.loc 1 2365 2 discriminator 1
 3261 0032 FEE7     		b	.L204
 3262              	.L203:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3263              		.loc 1 2366 9
 3264 0034 FB68     		ldr	r3, [r7, #12]
 3265 0036 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3266              		.loc 1 2367 1
 3267 0038 1846     		mov	r0, r3
 3268 003a 1437     		adds	r7, r7, #20
 3269              	.LCFI113:
 3270              		.cfi_def_cfa_offset 4
 3271 003c BD46     		mov	sp, r7
 3272              	.LCFI114:
 3273              		.cfi_def_cfa_register 13
 3274              		@ sp needed
 3275 003e 5DF8047B 		ldr	r7, [sp], #4
 3276              	.LCFI115:
 3277              		.cfi_restore 7
 3278              		.cfi_def_cfa_offset 0
 3279 0042 7047     		bx	lr
 3280              	.L207:
 3281              		.align	2
 3282              	.L206:
 3283 0044 00000000 		.word	pxCurrentTCB
 3284              		.cfi_endproc
 3285              	.LFE26:
 3287              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3288              		.align	1
 3289              		.global	uxTaskGetSystemState
 3290              		.syntax unified
 3291              		.thumb
ARM GAS  /tmp/ccad9K0d.s 			page 104


 3292              		.thumb_func
 3294              	uxTaskGetSystemState:
 3295              	.LFB27:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
ARM GAS  /tmp/ccad9K0d.s 			page 105


2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccad9K0d.s 			page 106


2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3296              		.loc 1 2506 2
 3297              		.cfi_startproc
 3298              		@ args = 0, pretend = 0, frame = 24
 3299              		@ frame_needed = 1, uses_anonymous_args = 0
 3300 0000 80B5     		push	{r7, lr}
 3301              	.LCFI116:
 3302              		.cfi_def_cfa_offset 8
 3303              		.cfi_offset 7, -8
 3304              		.cfi_offset 14, -4
 3305 0002 86B0     		sub	sp, sp, #24
 3306              	.LCFI117:
 3307              		.cfi_def_cfa_offset 32
 3308 0004 00AF     		add	r7, sp, #0
 3309              	.LCFI118:
 3310              		.cfi_def_cfa_register 7
 3311 0006 F860     		str	r0, [r7, #12]
 3312 0008 B960     		str	r1, [r7, #8]
 3313 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3314              		.loc 1 2507 14
 3315 000c 0023     		movs	r3, #0
 3316 000e 7B61     		str	r3, [r7, #20]
 3317              		.loc 1 2507 26
 3318 0010 3823     		movs	r3, #56
 3319 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3320              		.loc 1 2509 3
 3321 0014 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccad9K0d.s 			page 107


2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3322              		.loc 1 2512 20
 3323 0018 3A4B     		ldr	r3, .L212
 3324 001a 1B68     		ldr	r3, [r3]
 3325              		.loc 1 2512 6
 3326 001c BA68     		ldr	r2, [r7, #8]
 3327 001e 9A42     		cmp	r2, r3
 3328 0020 68D3     		bcc	.L209
 3329              	.L210:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3330              		.loc 1 2518 13 discriminator 1
 3331 0022 3B69     		ldr	r3, [r7, #16]
 3332 0024 013B     		subs	r3, r3, #1
 3333 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3334              		.loc 1 2519 66 discriminator 1
 3335 0028 7A69     		ldr	r2, [r7, #20]
 3336 002a 1346     		mov	r3, r2
 3337 002c DB00     		lsls	r3, r3, #3
 3338 002e 1344     		add	r3, r3, r2
 3339 0030 9B00     		lsls	r3, r3, #2
 3340 0032 1A46     		mov	r2, r3
 3341              		.loc 1 2519 16 discriminator 1
 3342 0034 FB68     		ldr	r3, [r7, #12]
 3343 0036 9818     		adds	r0, r3, r2
 3344 0038 3A69     		ldr	r2, [r7, #16]
 3345 003a 1346     		mov	r3, r2
 3346 003c 9B00     		lsls	r3, r3, #2
 3347 003e 1344     		add	r3, r3, r2
 3348 0040 9B00     		lsls	r3, r3, #2
 3349 0042 314A     		ldr	r2, .L212+4
 3350 0044 1344     		add	r3, r3, r2
 3351 0046 0122     		movs	r2, #1
 3352 0048 1946     		mov	r1, r3
 3353 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3354 004e 0246     		mov	r2, r0
 3355              		.loc 1 2519 13 discriminator 1
 3356 0050 7B69     		ldr	r3, [r7, #20]
 3357 0052 1344     		add	r3, r3, r2
 3358 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3359              		.loc 1 2521 5 discriminator 1
 3360 0056 3B69     		ldr	r3, [r7, #16]
 3361 0058 002B     		cmp	r3, #0
 3362 005a E2D1     		bne	.L210
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
ARM GAS  /tmp/ccad9K0d.s 			page 108


 3363              		.loc 1 2525 65
 3364 005c 7A69     		ldr	r2, [r7, #20]
 3365 005e 1346     		mov	r3, r2
 3366 0060 DB00     		lsls	r3, r3, #3
 3367 0062 1344     		add	r3, r3, r2
 3368 0064 9B00     		lsls	r3, r3, #2
 3369 0066 1A46     		mov	r2, r3
 3370              		.loc 1 2525 15
 3371 0068 FB68     		ldr	r3, [r7, #12]
 3372 006a 1344     		add	r3, r3, r2
 3373 006c 274A     		ldr	r2, .L212+8
 3374 006e 1168     		ldr	r1, [r2]
 3375 0070 0222     		movs	r2, #2
 3376 0072 1846     		mov	r0, r3
 3377 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3378 0078 0246     		mov	r2, r0
 3379              		.loc 1 2525 12
 3380 007a 7B69     		ldr	r3, [r7, #20]
 3381 007c 1344     		add	r3, r3, r2
 3382 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3383              		.loc 1 2526 65
 3384 0080 7A69     		ldr	r2, [r7, #20]
 3385 0082 1346     		mov	r3, r2
 3386 0084 DB00     		lsls	r3, r3, #3
 3387 0086 1344     		add	r3, r3, r2
 3388 0088 9B00     		lsls	r3, r3, #2
 3389 008a 1A46     		mov	r2, r3
 3390              		.loc 1 2526 15
 3391 008c FB68     		ldr	r3, [r7, #12]
 3392 008e 1344     		add	r3, r3, r2
 3393 0090 1F4A     		ldr	r2, .L212+12
 3394 0092 1168     		ldr	r1, [r2]
 3395 0094 0222     		movs	r2, #2
 3396 0096 1846     		mov	r0, r3
 3397 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3398 009c 0246     		mov	r2, r0
 3399              		.loc 1 2526 12
 3400 009e 7B69     		ldr	r3, [r7, #20]
 3401 00a0 1344     		add	r3, r3, r2
 3402 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3403              		.loc 1 2532 66
 3404 00a4 7A69     		ldr	r2, [r7, #20]
 3405 00a6 1346     		mov	r3, r2
 3406 00a8 DB00     		lsls	r3, r3, #3
 3407 00aa 1344     		add	r3, r3, r2
 3408 00ac 9B00     		lsls	r3, r3, #2
 3409 00ae 1A46     		mov	r2, r3
 3410              		.loc 1 2532 16
 3411 00b0 FB68     		ldr	r3, [r7, #12]
 3412 00b2 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccad9K0d.s 			page 109


 3413 00b4 0422     		movs	r2, #4
 3414 00b6 1749     		ldr	r1, .L212+16
 3415 00b8 1846     		mov	r0, r3
 3416 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3417 00be 0246     		mov	r2, r0
 3418              		.loc 1 2532 13
 3419 00c0 7B69     		ldr	r3, [r7, #20]
 3420 00c2 1344     		add	r3, r3, r2
 3421 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3422              		.loc 1 2540 66
 3423 00c6 7A69     		ldr	r2, [r7, #20]
 3424 00c8 1346     		mov	r3, r2
 3425 00ca DB00     		lsls	r3, r3, #3
 3426 00cc 1344     		add	r3, r3, r2
 3427 00ce 9B00     		lsls	r3, r3, #2
 3428 00d0 1A46     		mov	r2, r3
 3429              		.loc 1 2540 16
 3430 00d2 FB68     		ldr	r3, [r7, #12]
 3431 00d4 1344     		add	r3, r3, r2
 3432 00d6 0322     		movs	r2, #3
 3433 00d8 0F49     		ldr	r1, .L212+20
 3434 00da 1846     		mov	r0, r3
 3435 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3436 00e0 0246     		mov	r2, r0
 3437              		.loc 1 2540 13
 3438 00e2 7B69     		ldr	r3, [r7, #20]
 3439 00e4 1344     		add	r3, r3, r2
 3440 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3441              		.loc 1 2557 8
 3442 00e8 7B68     		ldr	r3, [r7, #4]
 3443 00ea 002B     		cmp	r3, #0
 3444 00ec 02D0     		beq	.L209
ARM GAS  /tmp/ccad9K0d.s 			page 110


2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3445              		.loc 1 2559 24
 3446 00ee 7B68     		ldr	r3, [r7, #4]
 3447 00f0 0022     		movs	r2, #0
 3448 00f2 1A60     		str	r2, [r3]
 3449              	.L209:
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3450              		.loc 1 2569 12
 3451 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3452              		.loc 1 2571 10
 3453 00f8 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3454              		.loc 1 2572 2
 3455 00fa 1846     		mov	r0, r3
 3456 00fc 1837     		adds	r7, r7, #24
 3457              	.LCFI119:
 3458              		.cfi_def_cfa_offset 8
 3459 00fe BD46     		mov	sp, r7
 3460              	.LCFI120:
 3461              		.cfi_def_cfa_register 13
 3462              		@ sp needed
 3463 0100 80BD     		pop	{r7, pc}
 3464              	.L213:
 3465 0102 00BF     		.align	2
 3466              	.L212:
 3467 0104 00000000 		.word	uxCurrentNumberOfTasks
 3468 0108 00000000 		.word	pxReadyTasksLists
 3469 010c 00000000 		.word	pxDelayedTaskList
 3470 0110 00000000 		.word	pxOverflowDelayedTaskList
 3471 0114 00000000 		.word	xTasksWaitingTermination
 3472 0118 00000000 		.word	xSuspendedTaskList
 3473              		.cfi_endproc
 3474              	.LFE27:
 3476              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3477              		.align	1
 3478              		.global	xTaskCatchUpTicks
 3479              		.syntax unified
 3480              		.thumb
 3481              		.thumb_func
 3483              	xTaskCatchUpTicks:
 3484              	.LFB28:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 111


2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3485              		.loc 1 2610 1
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 16
 3488              		@ frame_needed = 1, uses_anonymous_args = 0
 3489 0000 80B5     		push	{r7, lr}
 3490              	.LCFI121:
 3491              		.cfi_def_cfa_offset 8
 3492              		.cfi_offset 7, -8
 3493              		.cfi_offset 14, -4
 3494 0002 84B0     		sub	sp, sp, #16
 3495              	.LCFI122:
 3496              		.cfi_def_cfa_offset 24
 3497 0004 00AF     		add	r7, sp, #0
 3498              	.LCFI123:
 3499              		.cfi_def_cfa_register 7
 3500 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3501              		.loc 1 2611 12
 3502 0008 0023     		movs	r3, #0
 3503 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
ARM GAS  /tmp/ccad9K0d.s 			page 112


2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3504              		.loc 1 2615 2
 3505 000c 0F4B     		ldr	r3, .L218
 3506 000e 1B68     		ldr	r3, [r3]
 3507 0010 002B     		cmp	r3, #0
 3508 0012 0AD0     		beq	.L215
 3509              	.LBB172:
 3510              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3511              		.loc 2 195 2
 3512              		.syntax unified
 3513              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3514 0014 4FF05003 			mov r3, #80												
 3515 0018 83F31188 		msr basepri, r3											
 3516 001c BFF36F8F 		isb														
 3517 0020 BFF34F8F 		dsb														
 3518              	
 3519              	@ 0 "" 2
 3520              		.thumb
 3521              		.syntax unified
 3522 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3523              		.loc 2 203 1
 3524 0026 00BF     		nop
 3525              	.L216:
 3526              	.LBE173:
 3527              	.LBE172:
 3528              		.loc 1 2615 2 discriminator 1
 3529 0028 FEE7     		b	.L216
 3530              	.L215:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3531              		.loc 1 2619 2
 3532 002a FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3533              		.loc 1 2620 15
 3534 002e 084B     		ldr	r3, .L218+4
 3535 0030 1A68     		ldr	r2, [r3]
 3536 0032 7B68     		ldr	r3, [r7, #4]
 3537 0034 1344     		add	r3, r3, r2
 3538 0036 064A     		ldr	r2, .L218+4
 3539 0038 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3540              		.loc 1 2621 19
 3541 003a FFF7FEFF 		bl	xTaskResumeAll
 3542 003e F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3543              		.loc 1 2623 9
 3544 0040 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3545              		.loc 1 2624 1
 3546 0042 1846     		mov	r0, r3
 3547 0044 1037     		adds	r7, r7, #16
 3548              	.LCFI124:
ARM GAS  /tmp/ccad9K0d.s 			page 113


 3549              		.cfi_def_cfa_offset 8
 3550 0046 BD46     		mov	sp, r7
 3551              	.LCFI125:
 3552              		.cfi_def_cfa_register 13
 3553              		@ sp needed
 3554 0048 80BD     		pop	{r7, pc}
 3555              	.L219:
 3556 004a 00BF     		.align	2
 3557              	.L218:
 3558 004c 00000000 		.word	uxSchedulerSuspended
 3559 0050 00000000 		.word	xPendedTicks
 3560              		.cfi_endproc
 3561              	.LFE28:
 3563              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3564              		.align	1
 3565              		.global	xTaskIncrementTick
 3566              		.syntax unified
 3567              		.thumb
 3568              		.thumb_func
 3570              	xTaskIncrementTick:
 3571              	.LFB29:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
ARM GAS  /tmp/ccad9K0d.s 			page 114


2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3572              		.loc 1 2708 1
 3573              		.cfi_startproc
 3574              		@ args = 0, pretend = 0, frame = 24
 3575              		@ frame_needed = 1, uses_anonymous_args = 0
 3576 0000 80B5     		push	{r7, lr}
 3577              	.LCFI126:
 3578              		.cfi_def_cfa_offset 8
 3579              		.cfi_offset 7, -8
 3580              		.cfi_offset 14, -4
ARM GAS  /tmp/ccad9K0d.s 			page 115


 3581 0002 86B0     		sub	sp, sp, #24
 3582              	.LCFI127:
 3583              		.cfi_def_cfa_offset 32
 3584 0004 00AF     		add	r7, sp, #0
 3585              	.LCFI128:
 3586              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3587              		.loc 1 2711 12
 3588 0006 0023     		movs	r3, #0
 3589 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3590              		.loc 1 2717 27
 3591 000a 4F4B     		ldr	r3, .L235
 3592 000c 1B68     		ldr	r3, [r3]
 3593              		.loc 1 2717 4
 3594 000e 002B     		cmp	r3, #0
 3595 0010 40F08F80 		bne	.L221
 3596              	.LBB174:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3597              		.loc 1 2721 49
 3598 0014 4D4B     		ldr	r3, .L235+4
 3599 0016 1B68     		ldr	r3, [r3]
 3600              		.loc 1 2721 20
 3601 0018 0133     		adds	r3, r3, #1
 3602 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3603              		.loc 1 2725 14
 3604 001c 4B4A     		ldr	r2, .L235+4
 3605 001e 3B69     		ldr	r3, [r7, #16]
 3606 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3607              		.loc 1 2727 5
 3608 0022 3B69     		ldr	r3, [r7, #16]
 3609 0024 002B     		cmp	r3, #0
 3610 0026 20D1     		bne	.L222
 3611              	.LBB175:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3612              		.loc 1 2729 4
 3613 0028 494B     		ldr	r3, .L235+8
 3614 002a 1B68     		ldr	r3, [r3]
 3615 002c 1B68     		ldr	r3, [r3]
 3616 002e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccad9K0d.s 			page 116


 3617 0030 0AD0     		beq	.L223
 3618              	.LBB176:
 3619              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3620              		.loc 2 195 2
 3621              		.syntax unified
 3622              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3623 0032 4FF05003 			mov r3, #80												
 3624 0036 83F31188 		msr basepri, r3											
 3625 003a BFF36F8F 		isb														
 3626 003e BFF34F8F 		dsb														
 3627              	
 3628              	@ 0 "" 2
 3629              		.thumb
 3630              		.syntax unified
 3631 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3632              		.loc 2 203 1
 3633 0044 00BF     		nop
 3634              	.L224:
 3635              	.LBE177:
 3636              	.LBE176:
 3637              		.loc 1 2729 4 discriminator 1
 3638 0046 FEE7     		b	.L224
 3639              	.L223:
 3640              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3641 0048 414B     		ldr	r3, .L235+8
 3642 004a 1B68     		ldr	r3, [r3]
 3643 004c FB60     		str	r3, [r7, #12]
 3644 004e 414B     		ldr	r3, .L235+12
 3645 0050 1B68     		ldr	r3, [r3]
 3646 0052 3F4A     		ldr	r2, .L235+8
 3647 0054 1360     		str	r3, [r2]
 3648 0056 3F4A     		ldr	r2, .L235+12
 3649 0058 FB68     		ldr	r3, [r7, #12]
 3650 005a 1360     		str	r3, [r2]
 3651 005c 3E4B     		ldr	r3, .L235+16
 3652 005e 1B68     		ldr	r3, [r3]
 3653 0060 0133     		adds	r3, r3, #1
 3654 0062 3D4A     		ldr	r2, .L235+16
 3655 0064 1360     		str	r3, [r2]
 3656 0066 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3657              	.L222:
 3658              	.LBE175:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3659              		.loc 1 2740 23 is_stmt 1
 3660 006a 3C4B     		ldr	r3, .L235+20
ARM GAS  /tmp/ccad9K0d.s 			page 117


 3661 006c 1B68     		ldr	r3, [r3]
 3662              		.loc 1 2740 5
 3663 006e 3A69     		ldr	r2, [r7, #16]
 3664 0070 9A42     		cmp	r2, r3
 3665 0072 49D3     		bcc	.L225
 3666              	.L231:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3667              		.loc 1 2744 9
 3668 0074 364B     		ldr	r3, .L235+8
 3669 0076 1B68     		ldr	r3, [r3]
 3670 0078 1B68     		ldr	r3, [r3]
 3671              		.loc 1 2744 7
 3672 007a 002B     		cmp	r3, #0
 3673 007c 04D1     		bne	.L226
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3674              		.loc 1 2751 27
 3675 007e 374B     		ldr	r3, .L235+20
 3676 0080 4FF0FF32 		mov	r2, #-1
 3677 0084 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3678              		.loc 1 2752 6
 3679 0086 3FE0     		b	.L225
 3680              	.L226:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3681              		.loc 1 2760 14
 3682 0088 314B     		ldr	r3, .L235+8
 3683 008a 1B68     		ldr	r3, [r3]
 3684 008c DB68     		ldr	r3, [r3, #12]
 3685              		.loc 1 2760 12
 3686 008e DB68     		ldr	r3, [r3, #12]
 3687 0090 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3688              		.loc 1 2761 17
 3689 0092 BB68     		ldr	r3, [r7, #8]
 3690 0094 5B68     		ldr	r3, [r3, #4]
 3691 0096 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3692              		.loc 1 2763 8
 3693 0098 3A69     		ldr	r2, [r7, #16]
 3694 009a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccad9K0d.s 			page 118


 3695 009c 9A42     		cmp	r2, r3
 3696 009e 03D2     		bcs	.L227
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3697              		.loc 1 2770 28
 3698 00a0 2E4A     		ldr	r2, .L235+20
 3699 00a2 7B68     		ldr	r3, [r7, #4]
 3700 00a4 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3701              		.loc 1 2771 7
 3702 00a6 2FE0     		b	.L225
 3703              	.L227:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3704              		.loc 1 2779 15
 3705 00a8 BB68     		ldr	r3, [r7, #8]
 3706 00aa 0433     		adds	r3, r3, #4
 3707 00ac 1846     		mov	r0, r3
 3708 00ae FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3709              		.loc 1 2783 10
 3710 00b2 BB68     		ldr	r3, [r7, #8]
 3711 00b4 9B6A     		ldr	r3, [r3, #40]
 3712              		.loc 1 2783 8
 3713 00b6 002B     		cmp	r3, #0
 3714 00b8 04D0     		beq	.L228
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3715              		.loc 1 2785 16
 3716 00ba BB68     		ldr	r3, [r7, #8]
 3717 00bc 1833     		adds	r3, r3, #24
 3718 00be 1846     		mov	r0, r3
 3719 00c0 FFF7FEFF 		bl	uxListRemove
 3720              	.L228:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccad9K0d.s 			page 119


 3721              		.loc 1 2794 6
 3722 00c4 BB68     		ldr	r3, [r7, #8]
 3723 00c6 DA6A     		ldr	r2, [r3, #44]
 3724 00c8 254B     		ldr	r3, .L235+24
 3725 00ca 1B68     		ldr	r3, [r3]
 3726 00cc 9A42     		cmp	r2, r3
 3727 00ce 03D9     		bls	.L229
 3728              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3729 00d0 BB68     		ldr	r3, [r7, #8]
 3730 00d2 DB6A     		ldr	r3, [r3, #44]
 3731 00d4 224A     		ldr	r2, .L235+24
 3732 00d6 1360     		str	r3, [r2]
 3733              	.L229:
 3734              		.loc 1 2794 6 discriminator 3
 3735 00d8 BB68     		ldr	r3, [r7, #8]
 3736 00da DA6A     		ldr	r2, [r3, #44]
 3737 00dc 1346     		mov	r3, r2
 3738 00de 9B00     		lsls	r3, r3, #2
 3739 00e0 1344     		add	r3, r3, r2
 3740 00e2 9B00     		lsls	r3, r3, #2
 3741 00e4 1F4A     		ldr	r2, .L235+28
 3742 00e6 1A44     		add	r2, r2, r3
 3743 00e8 BB68     		ldr	r3, [r7, #8]
 3744 00ea 0433     		adds	r3, r3, #4
 3745 00ec 1946     		mov	r1, r3
 3746 00ee 1046     		mov	r0, r2
 3747 00f0 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3748              		.loc 1 2804 16 is_stmt 1 discriminator 3
 3749 00f4 BB68     		ldr	r3, [r7, #8]
 3750 00f6 DA6A     		ldr	r2, [r3, #44]
 3751              		.loc 1 2804 44 discriminator 3
 3752 00f8 1B4B     		ldr	r3, .L235+32
 3753 00fa 1B68     		ldr	r3, [r3]
 3754 00fc DB6A     		ldr	r3, [r3, #44]
 3755              		.loc 1 2804 9 discriminator 3
 3756 00fe 9A42     		cmp	r2, r3
 3757 0100 B8D3     		bcc	.L231
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3758              		.loc 1 2806 24
 3759 0102 0123     		movs	r3, #1
 3760 0104 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3761              		.loc 1 2744 7
 3762 0106 B5E7     		b	.L231
 3763              	.L225:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccad9K0d.s 			page 120


2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3764              		.loc 1 2823 8
 3765 0108 174B     		ldr	r3, .L235+32
 3766 010a 1B68     		ldr	r3, [r3]
 3767 010c DA6A     		ldr	r2, [r3, #44]
 3768 010e 1549     		ldr	r1, .L235+28
 3769 0110 1346     		mov	r3, r2
 3770 0112 9B00     		lsls	r3, r3, #2
 3771 0114 1344     		add	r3, r3, r2
 3772 0116 9B00     		lsls	r3, r3, #2
 3773 0118 0B44     		add	r3, r3, r1
 3774 011a 1B68     		ldr	r3, [r3]
 3775              		.loc 1 2823 6
 3776 011c 012B     		cmp	r3, #1
 3777 011e 01D9     		bls	.L232
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3778              		.loc 1 2825 21
 3779 0120 0123     		movs	r3, #1
 3780 0122 7B61     		str	r3, [r7, #20]
 3781              	.L232:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 121


2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3782              		.loc 1 2851 22
 3783 0124 114B     		ldr	r3, .L235+36
 3784 0126 1B68     		ldr	r3, [r3]
 3785              		.loc 1 2851 6
 3786 0128 002B     		cmp	r3, #0
 3787 012a 07D0     		beq	.L233
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3788              		.loc 1 2853 21
 3789 012c 0123     		movs	r3, #1
 3790 012e 7B61     		str	r3, [r7, #20]
 3791 0130 04E0     		b	.L233
 3792              	.L221:
 3793              	.LBE174:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3794              		.loc 1 2864 3
 3795 0132 0F4B     		ldr	r3, .L235+40
 3796 0134 1B68     		ldr	r3, [r3]
 3797 0136 0133     		adds	r3, r3, #1
 3798 0138 0D4A     		ldr	r2, .L235+40
 3799 013a 1360     		str	r3, [r2]
 3800              	.L233:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3801              		.loc 1 2875 9
 3802 013c 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3803              		.loc 1 2876 1
 3804 013e 1846     		mov	r0, r3
 3805 0140 1837     		adds	r7, r7, #24
 3806              	.LCFI129:
 3807              		.cfi_def_cfa_offset 8
 3808 0142 BD46     		mov	sp, r7
ARM GAS  /tmp/ccad9K0d.s 			page 122


 3809              	.LCFI130:
 3810              		.cfi_def_cfa_register 13
 3811              		@ sp needed
 3812 0144 80BD     		pop	{r7, pc}
 3813              	.L236:
 3814 0146 00BF     		.align	2
 3815              	.L235:
 3816 0148 00000000 		.word	uxSchedulerSuspended
 3817 014c 00000000 		.word	xTickCount
 3818 0150 00000000 		.word	pxDelayedTaskList
 3819 0154 00000000 		.word	pxOverflowDelayedTaskList
 3820 0158 00000000 		.word	xNumOfOverflows
 3821 015c 00000000 		.word	xNextTaskUnblockTime
 3822 0160 00000000 		.word	uxTopReadyPriority
 3823 0164 00000000 		.word	pxReadyTasksLists
 3824 0168 00000000 		.word	pxCurrentTCB
 3825 016c 00000000 		.word	xYieldPending
 3826 0170 00000000 		.word	xPendedTicks
 3827              		.cfi_endproc
 3828              	.LFE29:
 3830              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3831              		.align	1
 3832              		.global	vTaskSwitchContext
 3833              		.syntax unified
 3834              		.thumb
 3835              		.thumb_func
 3837              	vTaskSwitchContext:
 3838              	.LFB30:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccad9K0d.s 			page 123


2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/ccad9K0d.s 			page 124


2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3839              		.loc 1 2990 1
 3840              		.cfi_startproc
 3841              		@ args = 0, pretend = 0, frame = 16
 3842              		@ frame_needed = 1, uses_anonymous_args = 0
 3843              		@ link register save eliminated.
 3844 0000 80B4     		push	{r7}
 3845              	.LCFI131:
 3846              		.cfi_def_cfa_offset 4
 3847              		.cfi_offset 7, -4
 3848 0002 85B0     		sub	sp, sp, #20
 3849              	.LCFI132:
 3850              		.cfi_def_cfa_offset 24
 3851 0004 00AF     		add	r7, sp, #0
 3852              	.LCFI133:
 3853              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3854              		.loc 1 2991 27
 3855 0006 284B     		ldr	r3, .L246
 3856 0008 1B68     		ldr	r3, [r3]
 3857              		.loc 1 2991 4
 3858 000a 002B     		cmp	r3, #0
 3859 000c 03D0     		beq	.L238
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3860              		.loc 1 2995 17
 3861 000e 274B     		ldr	r3, .L246+4
 3862 0010 0122     		movs	r2, #1
ARM GAS  /tmp/ccad9K0d.s 			page 125


 3863 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/ccad9K0d.s 			page 126


3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3864              		.loc 1 3061 1
 3865 0014 41E0     		b	.L245
 3866              	.L238:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3867              		.loc 1 2999 17
 3868 0016 254B     		ldr	r3, .L246+4
 3869 0018 0022     		movs	r2, #0
 3870 001a 1A60     		str	r2, [r3]
 3871              	.LBB178:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3872              		.loc 1 3041 3
 3873 001c 244B     		ldr	r3, .L246+8
 3874 001e 1B68     		ldr	r3, [r3]
 3875 0020 FB60     		str	r3, [r7, #12]
 3876 0022 10E0     		b	.L240
 3877              	.L243:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3878              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3879 0024 FB68     		ldr	r3, [r7, #12]
 3880 0026 002B     		cmp	r3, #0
 3881 0028 0AD1     		bne	.L241
 3882              	.LBB179:
 3883              	.LBB180:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3884              		.loc 2 195 2 is_stmt 1
 3885              		.syntax unified
 3886              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3887 002a 4FF05003 			mov r3, #80												
 3888 002e 83F31188 		msr basepri, r3											
 3889 0032 BFF36F8F 		isb														
 3890 0036 BFF34F8F 		dsb														
 3891              	
 3892              	@ 0 "" 2
 3893              		.thumb
 3894              		.syntax unified
 3895 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3896              		.loc 2 203 1
 3897 003c 00BF     		nop
 3898              	.L242:
 3899              	.LBE180:
 3900              	.LBE179:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3901              		.loc 1 3041 3 discriminator 1
 3902 003e FEE7     		b	.L242
 3903              	.L241:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
ARM GAS  /tmp/ccad9K0d.s 			page 127


 3904              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3905 0040 FB68     		ldr	r3, [r7, #12]
 3906 0042 013B     		subs	r3, r3, #1
 3907 0044 FB60     		str	r3, [r7, #12]
 3908              	.L240:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3909              		.loc 1 3041 3 discriminator 4
 3910 0046 1B49     		ldr	r1, .L246+12
 3911 0048 FA68     		ldr	r2, [r7, #12]
 3912 004a 1346     		mov	r3, r2
 3913 004c 9B00     		lsls	r3, r3, #2
 3914 004e 1344     		add	r3, r3, r2
 3915 0050 9B00     		lsls	r3, r3, #2
 3916 0052 0B44     		add	r3, r3, r1
 3917 0054 1B68     		ldr	r3, [r3]
 3918 0056 002B     		cmp	r3, #0
 3919 0058 E4D0     		beq	.L243
 3920              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3921              		.loc 1 3041 3 discriminator 6
 3922 005a FA68     		ldr	r2, [r7, #12]
 3923 005c 1346     		mov	r3, r2
 3924 005e 9B00     		lsls	r3, r3, #2
 3925 0060 1344     		add	r3, r3, r2
 3926 0062 9B00     		lsls	r3, r3, #2
 3927 0064 134A     		ldr	r2, .L246+12
 3928 0066 1344     		add	r3, r3, r2
 3929 0068 BB60     		str	r3, [r7, #8]
 3930 006a BB68     		ldr	r3, [r7, #8]
 3931 006c 5B68     		ldr	r3, [r3, #4]
 3932 006e 5A68     		ldr	r2, [r3, #4]
 3933 0070 BB68     		ldr	r3, [r7, #8]
 3934 0072 5A60     		str	r2, [r3, #4]
 3935 0074 BB68     		ldr	r3, [r7, #8]
 3936 0076 5A68     		ldr	r2, [r3, #4]
 3937 0078 BB68     		ldr	r3, [r7, #8]
 3938 007a 0833     		adds	r3, r3, #8
 3939 007c 9A42     		cmp	r2, r3
 3940 007e 04D1     		bne	.L244
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3941              		.loc 1 3041 3 discriminator 7
 3942 0080 BB68     		ldr	r3, [r7, #8]
 3943 0082 5B68     		ldr	r3, [r3, #4]
 3944 0084 5A68     		ldr	r2, [r3, #4]
 3945 0086 BB68     		ldr	r3, [r7, #8]
 3946 0088 5A60     		str	r2, [r3, #4]
 3947              	.L244:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3948              		.loc 1 3041 3 discriminator 9
 3949 008a BB68     		ldr	r3, [r7, #8]
 3950 008c 5B68     		ldr	r3, [r3, #4]
 3951 008e DB68     		ldr	r3, [r3, #12]
 3952 0090 094A     		ldr	r2, .L246+16
 3953 0092 1360     		str	r3, [r2]
 3954              	.LBE181:
 3955 0094 064A     		ldr	r2, .L246+8
 3956 0096 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccad9K0d.s 			page 128


 3957 0098 1360     		str	r3, [r2]
 3958              	.L245:
 3959              	.LBE178:
 3960              		.loc 1 3061 1 is_stmt 1
 3961 009a 00BF     		nop
 3962 009c 1437     		adds	r7, r7, #20
 3963              	.LCFI134:
 3964              		.cfi_def_cfa_offset 4
 3965 009e BD46     		mov	sp, r7
 3966              	.LCFI135:
 3967              		.cfi_def_cfa_register 13
 3968              		@ sp needed
 3969 00a0 5DF8047B 		ldr	r7, [sp], #4
 3970              	.LCFI136:
 3971              		.cfi_restore 7
 3972              		.cfi_def_cfa_offset 0
 3973 00a4 7047     		bx	lr
 3974              	.L247:
 3975 00a6 00BF     		.align	2
 3976              	.L246:
 3977 00a8 00000000 		.word	uxSchedulerSuspended
 3978 00ac 00000000 		.word	xYieldPending
 3979 00b0 00000000 		.word	uxTopReadyPriority
 3980 00b4 00000000 		.word	pxReadyTasksLists
 3981 00b8 00000000 		.word	pxCurrentTCB
 3982              		.cfi_endproc
 3983              	.LFE30:
 3985              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3986              		.align	1
 3987              		.global	vTaskPlaceOnEventList
 3988              		.syntax unified
 3989              		.thumb
 3990              		.thumb_func
 3992              	vTaskPlaceOnEventList:
 3993              	.LFB31:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3994              		.loc 1 3065 1
 3995              		.cfi_startproc
 3996              		@ args = 0, pretend = 0, frame = 16
 3997              		@ frame_needed = 1, uses_anonymous_args = 0
 3998 0000 80B5     		push	{r7, lr}
 3999              	.LCFI137:
 4000              		.cfi_def_cfa_offset 8
 4001              		.cfi_offset 7, -8
 4002              		.cfi_offset 14, -4
 4003 0002 84B0     		sub	sp, sp, #16
 4004              	.LCFI138:
 4005              		.cfi_def_cfa_offset 24
 4006 0004 00AF     		add	r7, sp, #0
 4007              	.LCFI139:
 4008              		.cfi_def_cfa_register 7
 4009 0006 7860     		str	r0, [r7, #4]
 4010 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
ARM GAS  /tmp/ccad9K0d.s 			page 129


 4011              		.loc 1 3066 2
 4012 000a 7B68     		ldr	r3, [r7, #4]
 4013 000c 002B     		cmp	r3, #0
 4014 000e 0AD1     		bne	.L249
 4015              	.LBB182:
 4016              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4017              		.loc 2 195 2
 4018              		.syntax unified
 4019              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4020 0010 4FF05003 			mov r3, #80												
 4021 0014 83F31188 		msr basepri, r3											
 4022 0018 BFF36F8F 		isb														
 4023 001c BFF34F8F 		dsb														
 4024              	
 4025              	@ 0 "" 2
 4026              		.thumb
 4027              		.syntax unified
 4028 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4029              		.loc 2 203 1
 4030 0022 00BF     		nop
 4031              	.L250:
 4032              	.LBE183:
 4033              	.LBE182:
 4034              		.loc 1 3066 2 discriminator 1
 4035 0024 FEE7     		b	.L250
 4036              	.L249:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4037              		.loc 1 3075 43
 4038 0026 074B     		ldr	r3, .L251
 4039 0028 1B68     		ldr	r3, [r3]
 4040              		.loc 1 3075 2
 4041 002a 1833     		adds	r3, r3, #24
 4042 002c 1946     		mov	r1, r3
 4043 002e 7868     		ldr	r0, [r7, #4]
 4044 0030 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4045              		.loc 1 3077 2
 4046 0034 0121     		movs	r1, #1
 4047 0036 3868     		ldr	r0, [r7]
 4048 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4049              		.loc 1 3078 1
 4050 003c 00BF     		nop
 4051 003e 1037     		adds	r7, r7, #16
 4052              	.LCFI140:
 4053              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccad9K0d.s 			page 130


 4054 0040 BD46     		mov	sp, r7
 4055              	.LCFI141:
 4056              		.cfi_def_cfa_register 13
 4057              		@ sp needed
 4058 0042 80BD     		pop	{r7, pc}
 4059              	.L252:
 4060              		.align	2
 4061              	.L251:
 4062 0044 00000000 		.word	pxCurrentTCB
 4063              		.cfi_endproc
 4064              	.LFE31:
 4066              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4067              		.align	1
 4068              		.global	vTaskPlaceOnUnorderedEventList
 4069              		.syntax unified
 4070              		.thumb
 4071              		.thumb_func
 4073              	vTaskPlaceOnUnorderedEventList:
 4074              	.LFB32:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4075              		.loc 1 3082 1
 4076              		.cfi_startproc
 4077              		@ args = 0, pretend = 0, frame = 24
 4078              		@ frame_needed = 1, uses_anonymous_args = 0
 4079 0000 80B5     		push	{r7, lr}
 4080              	.LCFI142:
 4081              		.cfi_def_cfa_offset 8
 4082              		.cfi_offset 7, -8
 4083              		.cfi_offset 14, -4
 4084 0002 86B0     		sub	sp, sp, #24
 4085              	.LCFI143:
 4086              		.cfi_def_cfa_offset 32
 4087 0004 00AF     		add	r7, sp, #0
 4088              	.LCFI144:
 4089              		.cfi_def_cfa_register 7
 4090 0006 F860     		str	r0, [r7, #12]
 4091 0008 B960     		str	r1, [r7, #8]
 4092 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4093              		.loc 1 3083 2
 4094 000c FB68     		ldr	r3, [r7, #12]
 4095 000e 002B     		cmp	r3, #0
 4096 0010 0AD1     		bne	.L254
 4097              	.LBB184:
 4098              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4099              		.loc 2 195 2
 4100              		.syntax unified
 4101              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4102 0012 4FF05003 			mov r3, #80												
 4103 0016 83F31188 		msr basepri, r3											
 4104 001a BFF36F8F 		isb														
 4105 001e BFF34F8F 		dsb														
 4106              	
ARM GAS  /tmp/ccad9K0d.s 			page 131


 4107              	@ 0 "" 2
 4108              		.thumb
 4109              		.syntax unified
 4110 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4111              		.loc 2 203 1
 4112 0024 00BF     		nop
 4113              	.L255:
 4114              	.LBE185:
 4115              	.LBE184:
 4116              		.loc 1 3083 2 discriminator 1
 4117 0026 FEE7     		b	.L255
 4118              	.L254:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4119              		.loc 1 3087 2
 4120 0028 114B     		ldr	r3, .L258
 4121 002a 1B68     		ldr	r3, [r3]
 4122 002c 002B     		cmp	r3, #0
 4123 002e 0AD1     		bne	.L256
 4124              	.LBB186:
 4125              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4126              		.loc 2 195 2
 4127              		.syntax unified
 4128              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4129 0030 4FF05003 			mov r3, #80												
 4130 0034 83F31188 		msr basepri, r3											
 4131 0038 BFF36F8F 		isb														
 4132 003c BFF34F8F 		dsb														
 4133              	
 4134              	@ 0 "" 2
 4135              		.thumb
 4136              		.syntax unified
 4137 0040 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4138              		.loc 2 203 1
 4139 0042 00BF     		nop
 4140              	.L257:
 4141              	.LBE187:
 4142              	.LBE186:
 4143              		.loc 1 3087 2 discriminator 2
 4144 0044 FEE7     		b	.L257
 4145              	.L256:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4146              		.loc 1 3092 2
 4147 0046 0B4B     		ldr	r3, .L258+4
 4148 0048 1B68     		ldr	r3, [r3]
 4149 004a BA68     		ldr	r2, [r7, #8]
 4150 004c 42F00042 		orr	r2, r2, #-2147483648
 4151 0050 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccad9K0d.s 			page 132


3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4152              		.loc 1 3099 46
 4153 0052 084B     		ldr	r3, .L258+4
 4154 0054 1B68     		ldr	r3, [r3]
 4155              		.loc 1 3099 2
 4156 0056 1833     		adds	r3, r3, #24
 4157 0058 1946     		mov	r1, r3
 4158 005a F868     		ldr	r0, [r7, #12]
 4159 005c FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4160              		.loc 1 3101 2
 4161 0060 0121     		movs	r1, #1
 4162 0062 7868     		ldr	r0, [r7, #4]
 4163 0064 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4164              		.loc 1 3102 1
 4165 0068 00BF     		nop
 4166 006a 1837     		adds	r7, r7, #24
 4167              	.LCFI145:
 4168              		.cfi_def_cfa_offset 8
 4169 006c BD46     		mov	sp, r7
 4170              	.LCFI146:
 4171              		.cfi_def_cfa_register 13
 4172              		@ sp needed
 4173 006e 80BD     		pop	{r7, pc}
 4174              	.L259:
 4175              		.align	2
 4176              	.L258:
 4177 0070 00000000 		.word	uxSchedulerSuspended
 4178 0074 00000000 		.word	pxCurrentTCB
 4179              		.cfi_endproc
 4180              	.LFE32:
 4182              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4183              		.align	1
 4184              		.global	vTaskPlaceOnEventListRestricted
 4185              		.syntax unified
 4186              		.thumb
 4187              		.thumb_func
 4189              	vTaskPlaceOnEventListRestricted:
 4190              	.LFB33:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4191              		.loc 1 3108 2
 4192              		.cfi_startproc
 4193              		@ args = 0, pretend = 0, frame = 24
 4194              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccad9K0d.s 			page 133


 4195 0000 80B5     		push	{r7, lr}
 4196              	.LCFI147:
 4197              		.cfi_def_cfa_offset 8
 4198              		.cfi_offset 7, -8
 4199              		.cfi_offset 14, -4
 4200 0002 86B0     		sub	sp, sp, #24
 4201              	.LCFI148:
 4202              		.cfi_def_cfa_offset 32
 4203 0004 00AF     		add	r7, sp, #0
 4204              	.LCFI149:
 4205              		.cfi_def_cfa_register 7
 4206 0006 F860     		str	r0, [r7, #12]
 4207 0008 B960     		str	r1, [r7, #8]
 4208 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4209              		.loc 1 3109 3
 4210 000c FB68     		ldr	r3, [r7, #12]
 4211 000e 002B     		cmp	r3, #0
 4212 0010 0AD1     		bne	.L261
 4213              	.LBB188:
 4214              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4215              		.loc 2 195 2
 4216              		.syntax unified
 4217              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4218 0012 4FF05003 			mov r3, #80												
 4219 0016 83F31188 		msr basepri, r3											
 4220 001a BFF36F8F 		isb														
 4221 001e BFF34F8F 		dsb														
 4222              	
 4223              	@ 0 "" 2
 4224              		.thumb
 4225              		.syntax unified
 4226 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4227              		.loc 2 203 1
 4228 0024 00BF     		nop
 4229              	.L262:
 4230              	.LBE189:
 4231              	.LBE188:
 4232              		.loc 1 3109 3 discriminator 1
 4233 0026 FEE7     		b	.L262
 4234              	.L261:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4235              		.loc 1 3121 47
 4236 0028 0A4B     		ldr	r3, .L264
ARM GAS  /tmp/ccad9K0d.s 			page 134


 4237 002a 1B68     		ldr	r3, [r3]
 4238              		.loc 1 3121 3
 4239 002c 1833     		adds	r3, r3, #24
 4240 002e 1946     		mov	r1, r3
 4241 0030 F868     		ldr	r0, [r7, #12]
 4242 0032 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4243              		.loc 1 3126 5
 4244 0036 7B68     		ldr	r3, [r7, #4]
 4245 0038 002B     		cmp	r3, #0
 4246 003a 02D0     		beq	.L263
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4247              		.loc 1 3128 17
 4248 003c 4FF0FF33 		mov	r3, #-1
 4249 0040 BB60     		str	r3, [r7, #8]
 4250              	.L263:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4251              		.loc 1 3132 3
 4252 0042 7968     		ldr	r1, [r7, #4]
 4253 0044 B868     		ldr	r0, [r7, #8]
 4254 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4255              		.loc 1 3133 2
 4256 004a 00BF     		nop
 4257 004c 1837     		adds	r7, r7, #24
 4258              	.LCFI150:
 4259              		.cfi_def_cfa_offset 8
 4260 004e BD46     		mov	sp, r7
 4261              	.LCFI151:
 4262              		.cfi_def_cfa_register 13
 4263              		@ sp needed
 4264 0050 80BD     		pop	{r7, pc}
 4265              	.L265:
 4266 0052 00BF     		.align	2
 4267              	.L264:
 4268 0054 00000000 		.word	pxCurrentTCB
 4269              		.cfi_endproc
 4270              	.LFE33:
 4272              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4273              		.align	1
 4274              		.global	xTaskRemoveFromEventList
 4275              		.syntax unified
 4276              		.thumb
 4277              		.thumb_func
 4279              	xTaskRemoveFromEventList:
 4280              	.LFB34:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccad9K0d.s 			page 135


3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4281              		.loc 1 3139 1
 4282              		.cfi_startproc
 4283              		@ args = 0, pretend = 0, frame = 24
 4284              		@ frame_needed = 1, uses_anonymous_args = 0
 4285 0000 80B5     		push	{r7, lr}
 4286              	.LCFI152:
 4287              		.cfi_def_cfa_offset 8
 4288              		.cfi_offset 7, -8
 4289              		.cfi_offset 14, -4
 4290 0002 86B0     		sub	sp, sp, #24
 4291              	.LCFI153:
 4292              		.cfi_def_cfa_offset 32
 4293 0004 00AF     		add	r7, sp, #0
 4294              	.LCFI154:
 4295              		.cfi_def_cfa_register 7
 4296 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4297              		.loc 1 3156 19
 4298 0008 7B68     		ldr	r3, [r7, #4]
 4299 000a DB68     		ldr	r3, [r3, #12]
 4300              		.loc 1 3156 17
 4301 000c DB68     		ldr	r3, [r3, #12]
 4302 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4303              		.loc 1 3157 2
 4304 0010 3B69     		ldr	r3, [r7, #16]
 4305 0012 002B     		cmp	r3, #0
 4306 0014 0AD1     		bne	.L267
 4307              	.LBB190:
 4308              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4309              		.loc 2 195 2
 4310              		.syntax unified
 4311              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4312 0016 4FF05003 			mov r3, #80												
 4313 001a 83F31188 		msr basepri, r3											
 4314 001e BFF36F8F 		isb														
 4315 0022 BFF34F8F 		dsb														
ARM GAS  /tmp/ccad9K0d.s 			page 136


 4316              	
 4317              	@ 0 "" 2
 4318              		.thumb
 4319              		.syntax unified
 4320 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4321              		.loc 2 203 1
 4322 0028 00BF     		nop
 4323              	.L268:
 4324              	.LBE191:
 4325              	.LBE190:
 4326              		.loc 1 3157 2 discriminator 1
 4327 002a FEE7     		b	.L268
 4328              	.L267:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4329              		.loc 1 3158 11
 4330 002c 3B69     		ldr	r3, [r7, #16]
 4331 002e 1833     		adds	r3, r3, #24
 4332 0030 1846     		mov	r0, r3
 4333 0032 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4334              		.loc 1 3160 27
 4335 0036 1E4B     		ldr	r3, .L275
 4336 0038 1B68     		ldr	r3, [r3]
 4337              		.loc 1 3160 4
 4338 003a 002B     		cmp	r3, #0
 4339 003c 1DD1     		bne	.L269
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4340              		.loc 1 3162 12
 4341 003e 3B69     		ldr	r3, [r7, #16]
 4342 0040 0433     		adds	r3, r3, #4
 4343 0042 1846     		mov	r0, r3
 4344 0044 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4345              		.loc 1 3163 3
 4346 0048 3B69     		ldr	r3, [r7, #16]
 4347 004a DA6A     		ldr	r2, [r3, #44]
 4348 004c 194B     		ldr	r3, .L275+4
 4349 004e 1B68     		ldr	r3, [r3]
 4350 0050 9A42     		cmp	r2, r3
 4351 0052 03D9     		bls	.L270
 4352              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4353 0054 3B69     		ldr	r3, [r7, #16]
 4354 0056 DB6A     		ldr	r3, [r3, #44]
 4355 0058 164A     		ldr	r2, .L275+4
 4356 005a 1360     		str	r3, [r2]
 4357              	.L270:
 4358              		.loc 1 3163 3 discriminator 3
 4359 005c 3B69     		ldr	r3, [r7, #16]
 4360 005e DA6A     		ldr	r2, [r3, #44]
 4361 0060 1346     		mov	r3, r2
 4362 0062 9B00     		lsls	r3, r3, #2
 4363 0064 1344     		add	r3, r3, r2
 4364 0066 9B00     		lsls	r3, r3, #2
 4365 0068 134A     		ldr	r2, .L275+8
ARM GAS  /tmp/ccad9K0d.s 			page 137


 4366 006a 1A44     		add	r2, r2, r3
 4367 006c 3B69     		ldr	r3, [r7, #16]
 4368 006e 0433     		adds	r3, r3, #4
 4369 0070 1946     		mov	r1, r3
 4370 0072 1046     		mov	r0, r2
 4371 0074 FFF7FEFF 		bl	vListInsertEnd
 4372 0078 05E0     		b	.L271
 4373              	.L269:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4374              		.loc 1 3183 3 is_stmt 1
 4375 007a 3B69     		ldr	r3, [r7, #16]
 4376 007c 1833     		adds	r3, r3, #24
 4377 007e 1946     		mov	r1, r3
 4378 0080 0E48     		ldr	r0, .L275+12
 4379 0082 FFF7FEFF 		bl	vListInsertEnd
 4380              	.L271:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4381              		.loc 1 3186 20
 4382 0086 3B69     		ldr	r3, [r7, #16]
 4383 0088 DA6A     		ldr	r2, [r3, #44]
 4384              		.loc 1 3186 47
 4385 008a 0D4B     		ldr	r3, .L275+16
 4386 008c 1B68     		ldr	r3, [r3]
 4387 008e DB6A     		ldr	r3, [r3, #44]
 4388              		.loc 1 3186 4
 4389 0090 9A42     		cmp	r2, r3
 4390 0092 05D9     		bls	.L272
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4391              		.loc 1 3191 11
 4392 0094 0123     		movs	r3, #1
 4393 0096 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 138


3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4394              		.loc 1 3195 17
 4395 0098 0A4B     		ldr	r3, .L275+20
 4396 009a 0122     		movs	r2, #1
 4397 009c 1A60     		str	r2, [r3]
 4398 009e 01E0     		b	.L273
 4399              	.L272:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4400              		.loc 1 3199 11
 4401 00a0 0023     		movs	r3, #0
 4402 00a2 7B61     		str	r3, [r7, #20]
 4403              	.L273:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4404              		.loc 1 3202 9
 4405 00a4 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4406              		.loc 1 3203 1
 4407 00a6 1846     		mov	r0, r3
 4408 00a8 1837     		adds	r7, r7, #24
 4409              	.LCFI155:
 4410              		.cfi_def_cfa_offset 8
 4411 00aa BD46     		mov	sp, r7
 4412              	.LCFI156:
 4413              		.cfi_def_cfa_register 13
 4414              		@ sp needed
 4415 00ac 80BD     		pop	{r7, pc}
 4416              	.L276:
 4417 00ae 00BF     		.align	2
 4418              	.L275:
 4419 00b0 00000000 		.word	uxSchedulerSuspended
 4420 00b4 00000000 		.word	uxTopReadyPriority
 4421 00b8 00000000 		.word	pxReadyTasksLists
 4422 00bc 00000000 		.word	xPendingReadyList
 4423 00c0 00000000 		.word	pxCurrentTCB
 4424 00c4 00000000 		.word	xYieldPending
 4425              		.cfi_endproc
 4426              	.LFE34:
 4428              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4429              		.align	1
 4430              		.global	vTaskRemoveFromUnorderedEventList
 4431              		.syntax unified
 4432              		.thumb
 4433              		.thumb_func
 4435              	vTaskRemoveFromUnorderedEventList:
 4436              	.LFB35:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4437              		.loc 1 3207 1
ARM GAS  /tmp/ccad9K0d.s 			page 139


 4438              		.cfi_startproc
 4439              		@ args = 0, pretend = 0, frame = 24
 4440              		@ frame_needed = 1, uses_anonymous_args = 0
 4441 0000 80B5     		push	{r7, lr}
 4442              	.LCFI157:
 4443              		.cfi_def_cfa_offset 8
 4444              		.cfi_offset 7, -8
 4445              		.cfi_offset 14, -4
 4446 0002 86B0     		sub	sp, sp, #24
 4447              	.LCFI158:
 4448              		.cfi_def_cfa_offset 32
 4449 0004 00AF     		add	r7, sp, #0
 4450              	.LCFI159:
 4451              		.cfi_def_cfa_register 7
 4452 0006 7860     		str	r0, [r7, #4]
 4453 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4454              		.loc 1 3212 2
 4455 000a 294B     		ldr	r3, .L285
 4456 000c 1B68     		ldr	r3, [r3]
 4457 000e 002B     		cmp	r3, #0
 4458 0010 0AD1     		bne	.L278
 4459              	.LBB192:
 4460              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4461              		.loc 2 195 2
 4462              		.syntax unified
 4463              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4464 0012 4FF05003 			mov r3, #80												
 4465 0016 83F31188 		msr basepri, r3											
 4466 001a BFF36F8F 		isb														
 4467 001e BFF34F8F 		dsb														
 4468              	
 4469              	@ 0 "" 2
 4470              		.thumb
 4471              		.syntax unified
 4472 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4473              		.loc 2 203 1
 4474 0024 00BF     		nop
 4475              	.L279:
 4476              	.LBE193:
 4477              	.LBE192:
 4478              		.loc 1 3212 2 discriminator 1
 4479 0026 FEE7     		b	.L279
 4480              	.L278:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4481              		.loc 1 3215 2
 4482 0028 3B68     		ldr	r3, [r7]
 4483 002a 43F00042 		orr	r2, r3, #-2147483648
 4484 002e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccad9K0d.s 			page 140


 4485 0030 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4486              		.loc 1 3219 17
 4487 0032 7B68     		ldr	r3, [r7, #4]
 4488 0034 DB68     		ldr	r3, [r3, #12]
 4489 0036 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4490              		.loc 1 3220 2
 4491 0038 7B69     		ldr	r3, [r7, #20]
 4492 003a 002B     		cmp	r3, #0
 4493 003c 0AD1     		bne	.L280
 4494              	.LBB194:
 4495              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4496              		.loc 2 195 2
 4497              		.syntax unified
 4498              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4499 003e 4FF05003 			mov r3, #80												
 4500 0042 83F31188 		msr basepri, r3											
 4501 0046 BFF36F8F 		isb														
 4502 004a BFF34F8F 		dsb														
 4503              	
 4504              	@ 0 "" 2
 4505              		.thumb
 4506              		.syntax unified
 4507 004e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4508              		.loc 2 203 1
 4509 0050 00BF     		nop
 4510              	.L281:
 4511              	.LBE195:
 4512              	.LBE194:
 4513              		.loc 1 3220 2 discriminator 2
 4514 0052 FEE7     		b	.L281
 4515              	.L280:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4516              		.loc 1 3221 11
 4517 0054 7868     		ldr	r0, [r7, #4]
 4518 0056 FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 141


3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4519              		.loc 1 3240 11
 4520 005a 7B69     		ldr	r3, [r7, #20]
 4521 005c 0433     		adds	r3, r3, #4
 4522 005e 1846     		mov	r0, r3
 4523 0060 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4524              		.loc 1 3241 2
 4525 0064 7B69     		ldr	r3, [r7, #20]
 4526 0066 DA6A     		ldr	r2, [r3, #44]
 4527 0068 124B     		ldr	r3, .L285+4
 4528 006a 1B68     		ldr	r3, [r3]
 4529 006c 9A42     		cmp	r2, r3
 4530 006e 03D9     		bls	.L282
 4531              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4532 0070 7B69     		ldr	r3, [r7, #20]
 4533 0072 DB6A     		ldr	r3, [r3, #44]
 4534 0074 0F4A     		ldr	r2, .L285+4
 4535 0076 1360     		str	r3, [r2]
 4536              	.L282:
 4537              		.loc 1 3241 2 discriminator 3
 4538 0078 7B69     		ldr	r3, [r7, #20]
 4539 007a DA6A     		ldr	r2, [r3, #44]
 4540 007c 1346     		mov	r3, r2
 4541 007e 9B00     		lsls	r3, r3, #2
 4542 0080 1344     		add	r3, r3, r2
 4543 0082 9B00     		lsls	r3, r3, #2
 4544 0084 0C4A     		ldr	r2, .L285+8
 4545 0086 1A44     		add	r2, r2, r3
 4546 0088 7B69     		ldr	r3, [r7, #20]
 4547 008a 0433     		adds	r3, r3, #4
 4548 008c 1946     		mov	r1, r3
 4549 008e 1046     		mov	r0, r2
 4550 0090 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4551              		.loc 1 3243 20 is_stmt 1 discriminator 3
 4552 0094 7B69     		ldr	r3, [r7, #20]
 4553 0096 DA6A     		ldr	r2, [r3, #44]
 4554              		.loc 1 3243 47 discriminator 3
 4555 0098 084B     		ldr	r3, .L285+12
 4556 009a 1B68     		ldr	r3, [r3]
 4557 009c DB6A     		ldr	r3, [r3, #44]
 4558              		.loc 1 3243 4 discriminator 3
 4559 009e 9A42     		cmp	r2, r3
 4560 00a0 02D9     		bls	.L284
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4561              		.loc 1 3249 17
 4562 00a2 074B     		ldr	r3, .L285+16
ARM GAS  /tmp/ccad9K0d.s 			page 142


 4563 00a4 0122     		movs	r2, #1
 4564 00a6 1A60     		str	r2, [r3]
 4565              	.L284:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4566              		.loc 1 3251 1
 4567 00a8 00BF     		nop
 4568 00aa 1837     		adds	r7, r7, #24
 4569              	.LCFI160:
 4570              		.cfi_def_cfa_offset 8
 4571 00ac BD46     		mov	sp, r7
 4572              	.LCFI161:
 4573              		.cfi_def_cfa_register 13
 4574              		@ sp needed
 4575 00ae 80BD     		pop	{r7, pc}
 4576              	.L286:
 4577              		.align	2
 4578              	.L285:
 4579 00b0 00000000 		.word	uxSchedulerSuspended
 4580 00b4 00000000 		.word	uxTopReadyPriority
 4581 00b8 00000000 		.word	pxReadyTasksLists
 4582 00bc 00000000 		.word	pxCurrentTCB
 4583 00c0 00000000 		.word	xYieldPending
 4584              		.cfi_endproc
 4585              	.LFE35:
 4587              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4588              		.align	1
 4589              		.global	vTaskSetTimeOutState
 4590              		.syntax unified
 4591              		.thumb
 4592              		.thumb_func
 4594              	vTaskSetTimeOutState:
 4595              	.LFB36:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4596              		.loc 1 3255 1
 4597              		.cfi_startproc
 4598              		@ args = 0, pretend = 0, frame = 16
 4599              		@ frame_needed = 1, uses_anonymous_args = 0
 4600 0000 80B5     		push	{r7, lr}
 4601              	.LCFI162:
 4602              		.cfi_def_cfa_offset 8
 4603              		.cfi_offset 7, -8
 4604              		.cfi_offset 14, -4
 4605 0002 84B0     		sub	sp, sp, #16
 4606              	.LCFI163:
 4607              		.cfi_def_cfa_offset 24
 4608 0004 00AF     		add	r7, sp, #0
 4609              	.LCFI164:
 4610              		.cfi_def_cfa_register 7
 4611 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4612              		.loc 1 3256 2
 4613 0008 7B68     		ldr	r3, [r7, #4]
 4614 000a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccad9K0d.s 			page 143


 4615 000c 0AD1     		bne	.L288
 4616              	.LBB196:
 4617              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4618              		.loc 2 195 2
 4619              		.syntax unified
 4620              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4621 000e 4FF05003 			mov r3, #80												
 4622 0012 83F31188 		msr basepri, r3											
 4623 0016 BFF36F8F 		isb														
 4624 001a BFF34F8F 		dsb														
 4625              	
 4626              	@ 0 "" 2
 4627              		.thumb
 4628              		.syntax unified
 4629 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4630              		.loc 2 203 1
 4631 0020 00BF     		nop
 4632              	.L289:
 4633              	.LBE197:
 4634              	.LBE196:
 4635              		.loc 1 3256 2 discriminator 1
 4636 0022 FEE7     		b	.L289
 4637              	.L288:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4638              		.loc 1 3257 2
 4639 0024 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4640              		.loc 1 3259 29
 4641 0028 064B     		ldr	r3, .L290
 4642 002a 1A68     		ldr	r2, [r3]
 4643 002c 7B68     		ldr	r3, [r7, #4]
 4644 002e 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4645              		.loc 1 3260 30
 4646 0030 054B     		ldr	r3, .L290+4
 4647 0032 1A68     		ldr	r2, [r3]
 4648 0034 7B68     		ldr	r3, [r7, #4]
 4649 0036 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4650              		.loc 1 3262 2
 4651 0038 FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4652              		.loc 1 3263 1
 4653 003c 00BF     		nop
 4654 003e 1037     		adds	r7, r7, #16
 4655              	.LCFI165:
 4656              		.cfi_def_cfa_offset 8
 4657 0040 BD46     		mov	sp, r7
 4658              	.LCFI166:
 4659              		.cfi_def_cfa_register 13
 4660              		@ sp needed
 4661 0042 80BD     		pop	{r7, pc}
 4662              	.L291:
ARM GAS  /tmp/ccad9K0d.s 			page 144


 4663              		.align	2
 4664              	.L290:
 4665 0044 00000000 		.word	xNumOfOverflows
 4666 0048 00000000 		.word	xTickCount
 4667              		.cfi_endproc
 4668              	.LFE36:
 4670              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4671              		.align	1
 4672              		.global	vTaskInternalSetTimeOutState
 4673              		.syntax unified
 4674              		.thumb
 4675              		.thumb_func
 4677              	vTaskInternalSetTimeOutState:
 4678              	.LFB37:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4679              		.loc 1 3267 1
 4680              		.cfi_startproc
 4681              		@ args = 0, pretend = 0, frame = 8
 4682              		@ frame_needed = 1, uses_anonymous_args = 0
 4683              		@ link register save eliminated.
 4684 0000 80B4     		push	{r7}
 4685              	.LCFI167:
 4686              		.cfi_def_cfa_offset 4
 4687              		.cfi_offset 7, -4
 4688 0002 83B0     		sub	sp, sp, #12
 4689              	.LCFI168:
 4690              		.cfi_def_cfa_offset 16
 4691 0004 00AF     		add	r7, sp, #0
 4692              	.LCFI169:
 4693              		.cfi_def_cfa_register 7
 4694 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4695              		.loc 1 3269 28
 4696 0008 064B     		ldr	r3, .L293
 4697 000a 1A68     		ldr	r2, [r3]
 4698 000c 7B68     		ldr	r3, [r7, #4]
 4699 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4700              		.loc 1 3270 29
 4701 0010 054B     		ldr	r3, .L293+4
 4702 0012 1A68     		ldr	r2, [r3]
 4703 0014 7B68     		ldr	r3, [r7, #4]
 4704 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4705              		.loc 1 3271 1
 4706 0018 00BF     		nop
 4707 001a 0C37     		adds	r7, r7, #12
 4708              	.LCFI170:
 4709              		.cfi_def_cfa_offset 4
 4710 001c BD46     		mov	sp, r7
 4711              	.LCFI171:
 4712              		.cfi_def_cfa_register 13
 4713              		@ sp needed
ARM GAS  /tmp/ccad9K0d.s 			page 145


 4714 001e 5DF8047B 		ldr	r7, [sp], #4
 4715              	.LCFI172:
 4716              		.cfi_restore 7
 4717              		.cfi_def_cfa_offset 0
 4718 0022 7047     		bx	lr
 4719              	.L294:
 4720              		.align	2
 4721              	.L293:
 4722 0024 00000000 		.word	xNumOfOverflows
 4723 0028 00000000 		.word	xTickCount
 4724              		.cfi_endproc
 4725              	.LFE37:
 4727              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4728              		.align	1
 4729              		.global	xTaskCheckForTimeOut
 4730              		.syntax unified
 4731              		.thumb
 4732              		.thumb_func
 4734              	xTaskCheckForTimeOut:
 4735              	.LFB38:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4736              		.loc 1 3275 1
 4737              		.cfi_startproc
 4738              		@ args = 0, pretend = 0, frame = 32
 4739              		@ frame_needed = 1, uses_anonymous_args = 0
 4740 0000 80B5     		push	{r7, lr}
 4741              	.LCFI173:
 4742              		.cfi_def_cfa_offset 8
 4743              		.cfi_offset 7, -8
 4744              		.cfi_offset 14, -4
 4745 0002 88B0     		sub	sp, sp, #32
 4746              	.LCFI174:
 4747              		.cfi_def_cfa_offset 40
 4748 0004 00AF     		add	r7, sp, #0
 4749              	.LCFI175:
 4750              		.cfi_def_cfa_register 7
 4751 0006 7860     		str	r0, [r7, #4]
 4752 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4753              		.loc 1 3278 2
 4754 000a 7B68     		ldr	r3, [r7, #4]
 4755 000c 002B     		cmp	r3, #0
 4756 000e 0AD1     		bne	.L296
 4757              	.LBB198:
 4758              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4759              		.loc 2 195 2
 4760              		.syntax unified
 4761              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4762 0010 4FF05003 			mov r3, #80												
 4763 0014 83F31188 		msr basepri, r3											
 4764 0018 BFF36F8F 		isb														
ARM GAS  /tmp/ccad9K0d.s 			page 146


 4765 001c BFF34F8F 		dsb														
 4766              	
 4767              	@ 0 "" 2
 4768              		.thumb
 4769              		.syntax unified
 4770 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4771              		.loc 2 203 1
 4772 0022 00BF     		nop
 4773              	.L297:
 4774              	.LBE199:
 4775              	.LBE198:
 4776              		.loc 1 3278 2 discriminator 1
 4777 0024 FEE7     		b	.L297
 4778              	.L296:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4779              		.loc 1 3279 2
 4780 0026 3B68     		ldr	r3, [r7]
 4781 0028 002B     		cmp	r3, #0
 4782 002a 0AD1     		bne	.L298
 4783              	.LBB200:
 4784              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4785              		.loc 2 195 2
 4786              		.syntax unified
 4787              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4788 002c 4FF05003 			mov r3, #80												
 4789 0030 83F31188 		msr basepri, r3											
 4790 0034 BFF36F8F 		isb														
 4791 0038 BFF34F8F 		dsb														
 4792              	
 4793              	@ 0 "" 2
 4794              		.thumb
 4795              		.syntax unified
 4796 003c FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4797              		.loc 2 203 1
 4798 003e 00BF     		nop
 4799              	.L299:
 4800              	.LBE201:
 4801              	.LBE200:
 4802              		.loc 1 3279 2 discriminator 2
 4803 0040 FEE7     		b	.L299
 4804              	.L298:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4805              		.loc 1 3281 2
 4806 0042 FFF7FEFF 		bl	vPortEnterCritical
 4807              	.LBB202:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4808              		.loc 1 3284 20
 4809 0046 1D4B     		ldr	r3, .L305
 4810 0048 1B68     		ldr	r3, [r3]
 4811 004a BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  /tmp/ccad9K0d.s 			page 147


 4812              		.loc 1 3285 62
 4813 004c 7B68     		ldr	r3, [r7, #4]
 4814 004e 5B68     		ldr	r3, [r3, #4]
 4815              		.loc 1 3285 20
 4816 0050 BA69     		ldr	r2, [r7, #24]
 4817 0052 D31A     		subs	r3, r2, r3
 4818 0054 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4819              		.loc 1 3299 8
 4820 0056 3B68     		ldr	r3, [r7]
 4821 0058 1B68     		ldr	r3, [r3]
 4822              		.loc 1 3299 6
 4823 005a B3F1FF3F 		cmp	r3, #-1
 4824 005e 02D1     		bne	.L300
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4825              		.loc 1 3304 13
 4826 0060 0023     		movs	r3, #0
 4827 0062 FB61     		str	r3, [r7, #28]
 4828 0064 23E0     		b	.L301
 4829              	.L300:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4830              		.loc 1 3309 37
 4831 0066 7B68     		ldr	r3, [r7, #4]
 4832 0068 1A68     		ldr	r2, [r3]
 4833              		.loc 1 3309 25
 4834 006a 154B     		ldr	r3, .L305+4
 4835 006c 1B68     		ldr	r3, [r3]
 4836              		.loc 1 3309 5
 4837 006e 9A42     		cmp	r2, r3
 4838 0070 07D0     		beq	.L302
 4839              		.loc 1 3309 89 discriminator 1
 4840 0072 7B68     		ldr	r3, [r7, #4]
 4841 0074 5B68     		ldr	r3, [r3, #4]
 4842              		.loc 1 3309 56 discriminator 1
 4843 0076 BA69     		ldr	r2, [r7, #24]
 4844 0078 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccad9K0d.s 			page 148


 4845 007a 02D3     		bcc	.L302
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4846              		.loc 1 3316 12
 4847 007c 0123     		movs	r3, #1
 4848 007e FB61     		str	r3, [r7, #28]
 4849 0080 15E0     		b	.L301
 4850              	.L302:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4851              		.loc 1 3318 27
 4852 0082 3B68     		ldr	r3, [r7]
 4853 0084 1B68     		ldr	r3, [r3]
 4854              		.loc 1 3318 10
 4855 0086 7A69     		ldr	r2, [r7, #20]
 4856 0088 9A42     		cmp	r2, r3
 4857 008a 0BD2     		bcs	.L303
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4858              		.loc 1 3321 19
 4859 008c 3B68     		ldr	r3, [r7]
 4860 008e 1A68     		ldr	r2, [r3]
 4861 0090 7B69     		ldr	r3, [r7, #20]
 4862 0092 D21A     		subs	r2, r2, r3
 4863 0094 3B68     		ldr	r3, [r7]
 4864 0096 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4865              		.loc 1 3322 4
 4866 0098 7868     		ldr	r0, [r7, #4]
 4867 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4868              		.loc 1 3323 12
 4869 009e 0023     		movs	r3, #0
 4870 00a0 FB61     		str	r3, [r7, #28]
 4871 00a2 04E0     		b	.L301
 4872              	.L303:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4873              		.loc 1 3327 19
 4874 00a4 3B68     		ldr	r3, [r7]
 4875 00a6 0022     		movs	r2, #0
 4876 00a8 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4877              		.loc 1 3328 12
 4878 00aa 0123     		movs	r3, #1
 4879 00ac FB61     		str	r3, [r7, #28]
 4880              	.L301:
 4881              	.LBE202:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccad9K0d.s 			page 149


3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4882              		.loc 1 3331 2
 4883 00ae FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4884              		.loc 1 3333 9
 4885 00b2 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4886              		.loc 1 3334 1
 4887 00b4 1846     		mov	r0, r3
 4888 00b6 2037     		adds	r7, r7, #32
 4889              	.LCFI176:
 4890              		.cfi_def_cfa_offset 8
 4891 00b8 BD46     		mov	sp, r7
 4892              	.LCFI177:
 4893              		.cfi_def_cfa_register 13
 4894              		@ sp needed
 4895 00ba 80BD     		pop	{r7, pc}
 4896              	.L306:
 4897              		.align	2
 4898              	.L305:
 4899 00bc 00000000 		.word	xTickCount
 4900 00c0 00000000 		.word	xNumOfOverflows
 4901              		.cfi_endproc
 4902              	.LFE38:
 4904              		.section	.text.vTaskMissedYield,"ax",%progbits
 4905              		.align	1
 4906              		.global	vTaskMissedYield
 4907              		.syntax unified
 4908              		.thumb
 4909              		.thumb_func
 4911              	vTaskMissedYield:
 4912              	.LFB39:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4913              		.loc 1 3338 1
 4914              		.cfi_startproc
 4915              		@ args = 0, pretend = 0, frame = 0
 4916              		@ frame_needed = 1, uses_anonymous_args = 0
 4917              		@ link register save eliminated.
 4918 0000 80B4     		push	{r7}
 4919              	.LCFI178:
 4920              		.cfi_def_cfa_offset 4
 4921              		.cfi_offset 7, -4
 4922 0002 00AF     		add	r7, sp, #0
 4923              	.LCFI179:
 4924              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4925              		.loc 1 3339 16
 4926 0004 034B     		ldr	r3, .L308
 4927 0006 0122     		movs	r2, #1
 4928 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4929              		.loc 1 3340 1
ARM GAS  /tmp/ccad9K0d.s 			page 150


 4930 000a 00BF     		nop
 4931 000c BD46     		mov	sp, r7
 4932              	.LCFI180:
 4933              		.cfi_def_cfa_register 13
 4934              		@ sp needed
 4935 000e 5DF8047B 		ldr	r7, [sp], #4
 4936              	.LCFI181:
 4937              		.cfi_restore 7
 4938              		.cfi_def_cfa_offset 0
 4939 0012 7047     		bx	lr
 4940              	.L309:
 4941              		.align	2
 4942              	.L308:
 4943 0014 00000000 		.word	xYieldPending
 4944              		.cfi_endproc
 4945              	.LFE39:
 4947              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4948              		.align	1
 4949              		.global	uxTaskGetTaskNumber
 4950              		.syntax unified
 4951              		.thumb
 4952              		.thumb_func
 4954              	uxTaskGetTaskNumber:
 4955              	.LFB40:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4956              		.loc 1 3346 2
 4957              		.cfi_startproc
 4958              		@ args = 0, pretend = 0, frame = 16
 4959              		@ frame_needed = 1, uses_anonymous_args = 0
 4960              		@ link register save eliminated.
 4961 0000 80B4     		push	{r7}
 4962              	.LCFI182:
 4963              		.cfi_def_cfa_offset 4
 4964              		.cfi_offset 7, -4
 4965 0002 85B0     		sub	sp, sp, #20
 4966              	.LCFI183:
 4967              		.cfi_def_cfa_offset 24
 4968 0004 00AF     		add	r7, sp, #0
 4969              	.LCFI184:
 4970              		.cfi_def_cfa_register 7
 4971 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 4972              		.loc 1 3350 5
 4973 0008 7B68     		ldr	r3, [r7, #4]
 4974 000a 002B     		cmp	r3, #0
 4975 000c 05D0     		beq	.L311
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 4976              		.loc 1 3352 10
ARM GAS  /tmp/ccad9K0d.s 			page 151


 4977 000e 7B68     		ldr	r3, [r7, #4]
 4978 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4979              		.loc 1 3353 13
 4980 0012 BB68     		ldr	r3, [r7, #8]
 4981 0014 9B6C     		ldr	r3, [r3, #72]
 4982 0016 FB60     		str	r3, [r7, #12]
 4983 0018 01E0     		b	.L312
 4984              	.L311:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 4985              		.loc 1 3357 13
 4986 001a 0023     		movs	r3, #0
 4987 001c FB60     		str	r3, [r7, #12]
 4988              	.L312:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 4989              		.loc 1 3360 10
 4990 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4991              		.loc 1 3361 2
 4992 0020 1846     		mov	r0, r3
 4993 0022 1437     		adds	r7, r7, #20
 4994              	.LCFI185:
 4995              		.cfi_def_cfa_offset 4
 4996 0024 BD46     		mov	sp, r7
 4997              	.LCFI186:
 4998              		.cfi_def_cfa_register 13
 4999              		@ sp needed
 5000 0026 5DF8047B 		ldr	r7, [sp], #4
 5001              	.LCFI187:
 5002              		.cfi_restore 7
 5003              		.cfi_def_cfa_offset 0
 5004 002a 7047     		bx	lr
 5005              		.cfi_endproc
 5006              	.LFE40:
 5008              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5009              		.align	1
 5010              		.global	vTaskSetTaskNumber
 5011              		.syntax unified
 5012              		.thumb
 5013              		.thumb_func
 5015              	vTaskSetTaskNumber:
 5016              	.LFB41:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5017              		.loc 1 3369 2
 5018              		.cfi_startproc
ARM GAS  /tmp/ccad9K0d.s 			page 152


 5019              		@ args = 0, pretend = 0, frame = 16
 5020              		@ frame_needed = 1, uses_anonymous_args = 0
 5021              		@ link register save eliminated.
 5022 0000 80B4     		push	{r7}
 5023              	.LCFI188:
 5024              		.cfi_def_cfa_offset 4
 5025              		.cfi_offset 7, -4
 5026 0002 85B0     		sub	sp, sp, #20
 5027              	.LCFI189:
 5028              		.cfi_def_cfa_offset 24
 5029 0004 00AF     		add	r7, sp, #0
 5030              	.LCFI190:
 5031              		.cfi_def_cfa_register 7
 5032 0006 7860     		str	r0, [r7, #4]
 5033 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5034              		.loc 1 3372 5
 5035 000a 7B68     		ldr	r3, [r7, #4]
 5036 000c 002B     		cmp	r3, #0
 5037 000e 04D0     		beq	.L316
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5038              		.loc 1 3374 10
 5039 0010 7B68     		ldr	r3, [r7, #4]
 5040 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5041              		.loc 1 3375 24
 5042 0014 FB68     		ldr	r3, [r7, #12]
 5043 0016 3A68     		ldr	r2, [r7]
 5044 0018 9A64     		str	r2, [r3, #72]
 5045              	.L316:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5046              		.loc 1 3377 2
 5047 001a 00BF     		nop
 5048 001c 1437     		adds	r7, r7, #20
 5049              	.LCFI191:
 5050              		.cfi_def_cfa_offset 4
 5051 001e BD46     		mov	sp, r7
 5052              	.LCFI192:
 5053              		.cfi_def_cfa_register 13
 5054              		@ sp needed
 5055 0020 5DF8047B 		ldr	r7, [sp], #4
 5056              	.LCFI193:
 5057              		.cfi_restore 7
 5058              		.cfi_def_cfa_offset 0
 5059 0024 7047     		bx	lr
 5060              		.cfi_endproc
 5061              	.LFE41:
 5063              		.section	.text.prvIdleTask,"ax",%progbits
 5064              		.align	1
 5065              		.syntax unified
 5066              		.thumb
 5067              		.thumb_func
 5069              	prvIdleTask:
ARM GAS  /tmp/ccad9K0d.s 			page 153


 5070              	.LFB42:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5071              		.loc 1 3393 1
 5072              		.cfi_startproc
 5073              		@ args = 0, pretend = 0, frame = 8
 5074              		@ frame_needed = 1, uses_anonymous_args = 0
 5075 0000 80B5     		push	{r7, lr}
 5076              	.LCFI194:
 5077              		.cfi_def_cfa_offset 8
 5078              		.cfi_offset 7, -8
 5079              		.cfi_offset 14, -4
 5080 0002 82B0     		sub	sp, sp, #8
 5081              	.LCFI195:
 5082              		.cfi_def_cfa_offset 16
 5083 0004 00AF     		add	r7, sp, #0
 5084              	.LCFI196:
 5085              		.cfi_def_cfa_register 7
 5086 0006 7860     		str	r0, [r7, #4]
 5087              	.L319:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5088              		.loc 1 3409 3
 5089 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
ARM GAS  /tmp/ccad9K0d.s 			page 154


3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5090              		.loc 1 3432 8
 5091 000c 064B     		ldr	r3, .L320
 5092 000e 1B68     		ldr	r3, [r3]
 5093              		.loc 1 3432 6
 5094 0010 012B     		cmp	r3, #1
 5095 0012 F9D9     		bls	.L319
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5096              		.loc 1 3434 5
 5097 0014 054B     		ldr	r3, .L320+4
 5098 0016 4FF08052 		mov	r2, #268435456
 5099 001a 1A60     		str	r2, [r3]
 5100              		.syntax unified
 5101              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5102 001c BFF34F8F 		dsb
 5103              	@ 0 "" 2
 5104              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5105 0020 BFF36F8F 		isb
 5106              	@ 0 "" 2
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5107              		.loc 1 3409 3
 5108              		.thumb
 5109              		.syntax unified
 5110 0024 F0E7     		b	.L319
 5111              	.L321:
 5112 0026 00BF     		.align	2
 5113              	.L320:
 5114 0028 00000000 		.word	pxReadyTasksLists
 5115 002c 04ED00E0 		.word	-536810236
 5116              		.cfi_endproc
 5117              	.LFE42:
 5119              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5120              		.align	1
 5121              		.syntax unified
 5122              		.thumb
 5123              		.thumb_func
 5125              	prvInitialiseTaskLists:
 5126              	.LFB43:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccad9K0d.s 			page 155


3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccad9K0d.s 			page 156


3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccad9K0d.s 			page 157


3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 158


3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5127              		.loc 1 3608 1
 5128              		.cfi_startproc
 5129              		@ args = 0, pretend = 0, frame = 8
 5130              		@ frame_needed = 1, uses_anonymous_args = 0
 5131 0000 80B5     		push	{r7, lr}
 5132              	.LCFI197:
 5133              		.cfi_def_cfa_offset 8
 5134              		.cfi_offset 7, -8
 5135              		.cfi_offset 14, -4
 5136 0002 82B0     		sub	sp, sp, #8
 5137              	.LCFI198:
 5138              		.cfi_def_cfa_offset 16
 5139 0004 00AF     		add	r7, sp, #0
 5140              	.LCFI199:
 5141              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5142              		.loc 1 3611 18
 5143 0006 0023     		movs	r3, #0
 5144 0008 7B60     		str	r3, [r7, #4]
 5145              		.loc 1 3611 2
 5146 000a 0CE0     		b	.L323
 5147              	.L324:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5148              		.loc 1 3613 3 discriminator 3
 5149 000c 7A68     		ldr	r2, [r7, #4]
 5150 000e 1346     		mov	r3, r2
 5151 0010 9B00     		lsls	r3, r3, #2
 5152 0012 1344     		add	r3, r3, r2
 5153 0014 9B00     		lsls	r3, r3, #2
 5154 0016 124A     		ldr	r2, .L325
 5155 0018 1344     		add	r3, r3, r2
 5156 001a 1846     		mov	r0, r3
 5157 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5158              		.loc 1 3611 101 discriminator 3
 5159 0020 7B68     		ldr	r3, [r7, #4]
 5160 0022 0133     		adds	r3, r3, #1
 5161 0024 7B60     		str	r3, [r7, #4]
 5162              	.L323:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5163              		.loc 1 3611 2 discriminator 1
 5164 0026 7B68     		ldr	r3, [r7, #4]
 5165 0028 372B     		cmp	r3, #55
 5166 002a EFD9     		bls	.L324
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5167              		.loc 1 3616 2
 5168 002c 0D48     		ldr	r0, .L325+4
 5169 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5170              		.loc 1 3617 2
ARM GAS  /tmp/ccad9K0d.s 			page 159


 5171 0032 0D48     		ldr	r0, .L325+8
 5172 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5173              		.loc 1 3618 2
 5174 0038 0C48     		ldr	r0, .L325+12
 5175 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5176              		.loc 1 3622 3
 5177 003e 0C48     		ldr	r0, .L325+16
 5178 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5179              		.loc 1 3628 3
 5180 0044 0B48     		ldr	r0, .L325+20
 5181 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5182              		.loc 1 3634 20
 5183 004a 0B4B     		ldr	r3, .L325+24
 5184 004c 054A     		ldr	r2, .L325+4
 5185 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5186              		.loc 1 3635 28
 5187 0050 0A4B     		ldr	r3, .L325+28
 5188 0052 054A     		ldr	r2, .L325+8
 5189 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5190              		.loc 1 3636 1
 5191 0056 00BF     		nop
 5192 0058 0837     		adds	r7, r7, #8
 5193              	.LCFI200:
 5194              		.cfi_def_cfa_offset 8
 5195 005a BD46     		mov	sp, r7
 5196              	.LCFI201:
 5197              		.cfi_def_cfa_register 13
 5198              		@ sp needed
 5199 005c 80BD     		pop	{r7, pc}
 5200              	.L326:
 5201 005e 00BF     		.align	2
 5202              	.L325:
 5203 0060 00000000 		.word	pxReadyTasksLists
 5204 0064 00000000 		.word	xDelayedTaskList1
 5205 0068 00000000 		.word	xDelayedTaskList2
 5206 006c 00000000 		.word	xPendingReadyList
 5207 0070 00000000 		.word	xTasksWaitingTermination
 5208 0074 00000000 		.word	xSuspendedTaskList
ARM GAS  /tmp/ccad9K0d.s 			page 160


 5209 0078 00000000 		.word	pxDelayedTaskList
 5210 007c 00000000 		.word	pxOverflowDelayedTaskList
 5211              		.cfi_endproc
 5212              	.LFE43:
 5214              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5215              		.align	1
 5216              		.syntax unified
 5217              		.thumb
 5218              		.thumb_func
 5220              	prvCheckTasksWaitingTermination:
 5221              	.LFB44:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5222              		.loc 1 3640 1
 5223              		.cfi_startproc
 5224              		@ args = 0, pretend = 0, frame = 8
 5225              		@ frame_needed = 1, uses_anonymous_args = 0
 5226 0000 80B5     		push	{r7, lr}
 5227              	.LCFI202:
 5228              		.cfi_def_cfa_offset 8
 5229              		.cfi_offset 7, -8
 5230              		.cfi_offset 14, -4
 5231 0002 82B0     		sub	sp, sp, #8
 5232              	.LCFI203:
 5233              		.cfi_def_cfa_offset 16
 5234 0004 00AF     		add	r7, sp, #0
 5235              	.LCFI204:
 5236              		.cfi_def_cfa_register 7
 5237              	.LBB203:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5238              		.loc 1 3650 8
 5239 0006 19E0     		b	.L328
 5240              	.L329:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5241              		.loc 1 3652 4
 5242 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5243              		.loc 1 3654 13
 5244 000c 104B     		ldr	r3, .L330
 5245 000e DB68     		ldr	r3, [r3, #12]
 5246              		.loc 1 3654 11
 5247 0010 DB68     		ldr	r3, [r3, #12]
 5248 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccad9K0d.s 			page 161


 5249              		.loc 1 3655 14
 5250 0014 7B68     		ldr	r3, [r7, #4]
 5251 0016 0433     		adds	r3, r3, #4
 5252 0018 1846     		mov	r0, r3
 5253 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5254              		.loc 1 3656 5
 5255 001e 0D4B     		ldr	r3, .L330+4
 5256 0020 1B68     		ldr	r3, [r3]
 5257 0022 013B     		subs	r3, r3, #1
 5258 0024 0B4A     		ldr	r2, .L330+4
 5259 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5260              		.loc 1 3657 5
 5261 0028 0B4B     		ldr	r3, .L330+8
 5262 002a 1B68     		ldr	r3, [r3]
 5263 002c 013B     		subs	r3, r3, #1
 5264 002e 0A4A     		ldr	r2, .L330+8
 5265 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5266              		.loc 1 3659 4
 5267 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5268              		.loc 1 3661 4
 5269 0036 7868     		ldr	r0, [r7, #4]
 5270 0038 FFF7FEFF 		bl	prvDeleteTCB
 5271              	.L328:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5272              		.loc 1 3650 39
 5273 003c 064B     		ldr	r3, .L330+8
 5274 003e 1B68     		ldr	r3, [r3]
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5275              		.loc 1 3650 8
 5276 0040 002B     		cmp	r3, #0
 5277 0042 E1D1     		bne	.L329
 5278              	.LBE203:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5279              		.loc 1 3665 1
 5280 0044 00BF     		nop
 5281 0046 00BF     		nop
 5282 0048 0837     		adds	r7, r7, #8
 5283              	.LCFI205:
 5284              		.cfi_def_cfa_offset 8
 5285 004a BD46     		mov	sp, r7
 5286              	.LCFI206:
 5287              		.cfi_def_cfa_register 13
 5288              		@ sp needed
 5289 004c 80BD     		pop	{r7, pc}
 5290              	.L331:
 5291 004e 00BF     		.align	2
 5292              	.L330:
 5293 0050 00000000 		.word	xTasksWaitingTermination
ARM GAS  /tmp/ccad9K0d.s 			page 162


 5294 0054 00000000 		.word	uxCurrentNumberOfTasks
 5295 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5296              		.cfi_endproc
 5297              	.LFE44:
 5299              		.section	.text.vTaskGetInfo,"ax",%progbits
 5300              		.align	1
 5301              		.global	vTaskGetInfo
 5302              		.syntax unified
 5303              		.thumb
 5304              		.thumb_func
 5306              	vTaskGetInfo:
 5307              	.LFB45:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5308              		.loc 1 3671 2
 5309              		.cfi_startproc
 5310              		@ args = 0, pretend = 0, frame = 24
 5311              		@ frame_needed = 1, uses_anonymous_args = 0
 5312 0000 80B5     		push	{r7, lr}
 5313              	.LCFI207:
 5314              		.cfi_def_cfa_offset 8
 5315              		.cfi_offset 7, -8
 5316              		.cfi_offset 14, -4
 5317 0002 86B0     		sub	sp, sp, #24
 5318              	.LCFI208:
 5319              		.cfi_def_cfa_offset 32
 5320 0004 00AF     		add	r7, sp, #0
 5321              	.LCFI209:
 5322              		.cfi_def_cfa_register 7
 5323 0006 F860     		str	r0, [r7, #12]
 5324 0008 B960     		str	r1, [r7, #8]
 5325 000a 7A60     		str	r2, [r7, #4]
 5326 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5327              		.loc 1 3675 11
 5328 000e FB68     		ldr	r3, [r7, #12]
 5329 0010 002B     		cmp	r3, #0
 5330 0012 02D1     		bne	.L333
 5331              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5332 0014 2C4B     		ldr	r3, .L342
 5333 0016 1B68     		ldr	r3, [r3]
 5334 0018 00E0     		b	.L334
 5335              	.L333:
 5336              		.loc 1 3675 11 discriminator 2
 5337 001a FB68     		ldr	r3, [r7, #12]
 5338              	.L334:
 5339              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5340 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
ARM GAS  /tmp/ccad9K0d.s 			page 163


 5341              		.loc 1 3677 25 discriminator 4
 5342 001e BB68     		ldr	r3, [r7, #8]
 5343 0020 7A69     		ldr	r2, [r7, #20]
 5344 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5345              		.loc 1 3678 47 discriminator 4
 5346 0024 7B69     		ldr	r3, [r7, #20]
 5347 0026 03F13402 		add	r2, r3, #52
 5348              		.loc 1 3678 28 discriminator 4
 5349 002a BB68     		ldr	r3, [r7, #8]
 5350 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5351              		.loc 1 3679 42 discriminator 4
 5352 002e 7B69     		ldr	r3, [r7, #20]
 5353 0030 DA6A     		ldr	r2, [r3, #44]
 5354              		.loc 1 3679 35 discriminator 4
 5355 0032 BB68     		ldr	r3, [r7, #8]
 5356 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5357              		.loc 1 3680 36 discriminator 4
 5358 0036 7B69     		ldr	r3, [r7, #20]
 5359 0038 1A6B     		ldr	r2, [r3, #48]
 5360              		.loc 1 3680 29 discriminator 4
 5361 003a BB68     		ldr	r3, [r7, #8]
 5362 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5363              		.loc 1 3681 36 discriminator 4
 5364 003e 7B69     		ldr	r3, [r7, #20]
 5365 0040 5A6C     		ldr	r2, [r3, #68]
 5366              		.loc 1 3681 29 discriminator 4
 5367 0042 BB68     		ldr	r3, [r7, #8]
 5368 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5369              		.loc 1 3685 40 discriminator 4
 5370 0046 7B69     		ldr	r3, [r7, #20]
 5371 0048 DA6C     		ldr	r2, [r3, #76]
 5372              		.loc 1 3685 33 discriminator 4
 5373 004a BB68     		ldr	r3, [r7, #8]
 5374 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5375              		.loc 1 3699 35 discriminator 4
ARM GAS  /tmp/ccad9K0d.s 			page 164


 5376 004e BB68     		ldr	r3, [r7, #8]
 5377 0050 0022     		movs	r2, #0
 5378 0052 9A61     		str	r2, [r3, #24]
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5379              		.loc 1 3706 5 discriminator 4
 5380 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5381 0056 052B     		cmp	r3, #5
 5382 0058 1AD0     		beq	.L335
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5383              		.loc 1 3708 14
 5384 005a 1B4B     		ldr	r3, .L342
 5385 005c 1B68     		ldr	r3, [r3]
 5386              		.loc 1 3708 6
 5387 005e 7A69     		ldr	r2, [r7, #20]
 5388 0060 9A42     		cmp	r2, r3
 5389 0062 03D1     		bne	.L336
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5390              		.loc 1 3710 33
 5391 0064 BB68     		ldr	r3, [r7, #8]
 5392 0066 0022     		movs	r2, #0
 5393 0068 1A73     		strb	r2, [r3, #12]
 5394 006a 18E0     		b	.L337
 5395              	.L336:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5396              		.loc 1 3714 33
 5397 006c BB68     		ldr	r3, [r7, #8]
 5398 006e FA78     		ldrb	r2, [r7, #3]
 5399 0070 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5400              		.loc 1 3721 8
 5401 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5402 0074 032B     		cmp	r3, #3
 5403 0076 12D1     		bne	.L337
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5404              		.loc 1 3723 7
 5405 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5406              		.loc 1 3725 12
ARM GAS  /tmp/ccad9K0d.s 			page 165


 5407 007c 7B69     		ldr	r3, [r7, #20]
 5408 007e 9B6A     		ldr	r3, [r3, #40]
 5409              		.loc 1 3725 10
 5410 0080 002B     		cmp	r3, #0
 5411 0082 02D0     		beq	.L338
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5412              		.loc 1 3727 37
 5413 0084 BB68     		ldr	r3, [r7, #8]
 5414 0086 0222     		movs	r2, #2
 5415 0088 1A73     		strb	r2, [r3, #12]
 5416              	.L338:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5417              		.loc 1 3730 16
 5418 008a FFF7FEFF 		bl	xTaskResumeAll
 5419 008e 06E0     		b	.L337
 5420              	.L335:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5421              		.loc 1 3738 34
 5422 0090 7869     		ldr	r0, [r7, #20]
 5423 0092 FFF7FEFF 		bl	eTaskGetState
 5424 0096 0346     		mov	r3, r0
 5425 0098 1A46     		mov	r2, r3
 5426              		.loc 1 3738 32
 5427 009a BB68     		ldr	r3, [r7, #8]
 5428 009c 1A73     		strb	r2, [r3, #12]
 5429              	.L337:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5430              		.loc 1 3743 5
 5431 009e 7B68     		ldr	r3, [r7, #4]
 5432 00a0 002B     		cmp	r3, #0
 5433 00a2 09D0     		beq	.L339
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5434              		.loc 1 3751 89
 5435 00a4 7B69     		ldr	r3, [r7, #20]
 5436 00a6 1B6B     		ldr	r3, [r3, #48]
 5437              		.loc 1 3751 42
ARM GAS  /tmp/ccad9K0d.s 			page 166


 5438 00a8 1846     		mov	r0, r3
 5439 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5440 00ae 0346     		mov	r3, r0
 5441 00b0 1A46     		mov	r2, r3
 5442              		.loc 1 3751 40
 5443 00b2 BB68     		ldr	r3, [r7, #8]
 5444 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5445              		.loc 1 3759 2
 5446 00b6 02E0     		b	.L341
 5447              	.L339:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5448              		.loc 1 3757 39
 5449 00b8 BB68     		ldr	r3, [r7, #8]
 5450 00ba 0022     		movs	r2, #0
 5451 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5452              	.L341:
 5453              		.loc 1 3759 2
 5454 00be 00BF     		nop
 5455 00c0 1837     		adds	r7, r7, #24
 5456              	.LCFI210:
 5457              		.cfi_def_cfa_offset 8
 5458 00c2 BD46     		mov	sp, r7
 5459              	.LCFI211:
 5460              		.cfi_def_cfa_register 13
 5461              		@ sp needed
 5462 00c4 80BD     		pop	{r7, pc}
 5463              	.L343:
 5464 00c6 00BF     		.align	2
 5465              	.L342:
 5466 00c8 00000000 		.word	pxCurrentTCB
 5467              		.cfi_endproc
 5468              	.LFE45:
 5470              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5471              		.align	1
 5472              		.syntax unified
 5473              		.thumb
 5474              		.thumb_func
 5476              	prvListTasksWithinSingleList:
 5477              	.LFB46:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5478              		.loc 1 3767 2
 5479              		.cfi_startproc
ARM GAS  /tmp/ccad9K0d.s 			page 167


 5480              		@ args = 0, pretend = 0, frame = 40
 5481              		@ frame_needed = 1, uses_anonymous_args = 0
 5482 0000 80B5     		push	{r7, lr}
 5483              	.LCFI212:
 5484              		.cfi_def_cfa_offset 8
 5485              		.cfi_offset 7, -8
 5486              		.cfi_offset 14, -4
 5487 0002 8AB0     		sub	sp, sp, #40
 5488              	.LCFI213:
 5489              		.cfi_def_cfa_offset 48
 5490 0004 00AF     		add	r7, sp, #0
 5491              	.LCFI214:
 5492              		.cfi_def_cfa_register 7
 5493 0006 F860     		str	r0, [r7, #12]
 5494 0008 B960     		str	r1, [r7, #8]
 5495 000a 1346     		mov	r3, r2
 5496 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5497              		.loc 1 3769 14
 5498 000e 0023     		movs	r3, #0
 5499 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5500              		.loc 1 3771 7
 5501 0012 BB68     		ldr	r3, [r7, #8]
 5502 0014 1B68     		ldr	r3, [r3]
 5503              		.loc 1 3771 5
 5504 0016 002B     		cmp	r3, #0
 5505 0018 3FD0     		beq	.L345
 5506              	.LBB204:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5507              		.loc 1 3773 4
 5508 001a BB68     		ldr	r3, [r7, #8]
 5509 001c 3B62     		str	r3, [r7, #32]
 5510 001e 3B6A     		ldr	r3, [r7, #32]
 5511 0020 5B68     		ldr	r3, [r3, #4]
 5512 0022 5A68     		ldr	r2, [r3, #4]
 5513 0024 3B6A     		ldr	r3, [r7, #32]
 5514 0026 5A60     		str	r2, [r3, #4]
 5515 0028 3B6A     		ldr	r3, [r7, #32]
 5516 002a 5A68     		ldr	r2, [r3, #4]
 5517 002c 3B6A     		ldr	r3, [r7, #32]
 5518 002e 0833     		adds	r3, r3, #8
 5519 0030 9A42     		cmp	r2, r3
 5520 0032 04D1     		bne	.L346
 5521              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5522 0034 3B6A     		ldr	r3, [r7, #32]
 5523 0036 5B68     		ldr	r3, [r3, #4]
 5524 0038 5A68     		ldr	r2, [r3, #4]
 5525 003a 3B6A     		ldr	r3, [r7, #32]
 5526 003c 5A60     		str	r2, [r3, #4]
 5527              	.L346:
 5528              		.loc 1 3773 4 discriminator 3
 5529 003e 3B6A     		ldr	r3, [r7, #32]
 5530 0040 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccad9K0d.s 			page 168


 5531 0042 DB68     		ldr	r3, [r3, #12]
 5532 0044 FB61     		str	r3, [r7, #28]
 5533              	.L348:
 5534              	.LBE204:
 5535              	.LBB205:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5536              		.loc 1 3781 5 is_stmt 1
 5537 0046 BB68     		ldr	r3, [r7, #8]
 5538 0048 BB61     		str	r3, [r7, #24]
 5539 004a BB69     		ldr	r3, [r7, #24]
 5540 004c 5B68     		ldr	r3, [r3, #4]
 5541 004e 5A68     		ldr	r2, [r3, #4]
 5542 0050 BB69     		ldr	r3, [r7, #24]
 5543 0052 5A60     		str	r2, [r3, #4]
 5544 0054 BB69     		ldr	r3, [r7, #24]
 5545 0056 5A68     		ldr	r2, [r3, #4]
 5546 0058 BB69     		ldr	r3, [r7, #24]
 5547 005a 0833     		adds	r3, r3, #8
 5548 005c 9A42     		cmp	r2, r3
 5549 005e 04D1     		bne	.L347
 5550              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5551 0060 BB69     		ldr	r3, [r7, #24]
 5552 0062 5B68     		ldr	r3, [r3, #4]
 5553 0064 5A68     		ldr	r2, [r3, #4]
 5554 0066 BB69     		ldr	r3, [r7, #24]
 5555 0068 5A60     		str	r2, [r3, #4]
 5556              	.L347:
 5557              		.loc 1 3781 5 discriminator 3
 5558 006a BB69     		ldr	r3, [r7, #24]
 5559 006c 5B68     		ldr	r3, [r3, #4]
 5560 006e DB68     		ldr	r3, [r3, #12]
 5561 0070 7B61     		str	r3, [r7, #20]
 5562              	.LBE205:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5563              		.loc 1 3782 67 is_stmt 1 discriminator 3
 5564 0072 7A6A     		ldr	r2, [r7, #36]
 5565 0074 1346     		mov	r3, r2
 5566 0076 DB00     		lsls	r3, r3, #3
 5567 0078 1344     		add	r3, r3, r2
 5568 007a 9B00     		lsls	r3, r3, #2
 5569 007c 1A46     		mov	r2, r3
 5570              		.loc 1 3782 5 discriminator 3
 5571 007e FB68     		ldr	r3, [r7, #12]
 5572 0080 9918     		adds	r1, r3, r2
 5573 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5574 0084 0122     		movs	r2, #1
 5575 0086 7869     		ldr	r0, [r7, #20]
 5576 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5577              		.loc 1 3783 11 discriminator 3
ARM GAS  /tmp/ccad9K0d.s 			page 169


 5578 008c 7B6A     		ldr	r3, [r7, #36]
 5579 008e 0133     		adds	r3, r3, #1
 5580 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5581              		.loc 1 3784 4 discriminator 3
 5582 0092 7A69     		ldr	r2, [r7, #20]
 5583 0094 FB69     		ldr	r3, [r7, #28]
 5584 0096 9A42     		cmp	r2, r3
 5585 0098 D5D1     		bne	.L348
 5586              	.L345:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5587              		.loc 1 3791 10
 5588 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5589              		.loc 1 3792 2
 5590 009c 1846     		mov	r0, r3
 5591 009e 2837     		adds	r7, r7, #40
 5592              	.LCFI215:
 5593              		.cfi_def_cfa_offset 8
 5594 00a0 BD46     		mov	sp, r7
 5595              	.LCFI216:
 5596              		.cfi_def_cfa_register 13
 5597              		@ sp needed
 5598 00a2 80BD     		pop	{r7, pc}
 5599              		.cfi_endproc
 5600              	.LFE46:
 5602              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5603              		.align	1
 5604              		.syntax unified
 5605              		.thumb
 5606              		.thumb_func
 5608              	prvTaskCheckFreeStackSpace:
 5609              	.LFB47:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5610              		.loc 1 3800 2
 5611              		.cfi_startproc
 5612              		@ args = 0, pretend = 0, frame = 16
 5613              		@ frame_needed = 1, uses_anonymous_args = 0
 5614              		@ link register save eliminated.
 5615 0000 80B4     		push	{r7}
 5616              	.LCFI217:
 5617              		.cfi_def_cfa_offset 4
 5618              		.cfi_offset 7, -4
 5619 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccad9K0d.s 			page 170


 5620              	.LCFI218:
 5621              		.cfi_def_cfa_offset 24
 5622 0004 00AF     		add	r7, sp, #0
 5623              	.LCFI219:
 5624              		.cfi_def_cfa_register 7
 5625 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5626              		.loc 1 3801 11
 5627 0008 0023     		movs	r3, #0
 5628 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5629              		.loc 1 3803 8
 5630 000c 05E0     		b	.L351
 5631              	.L352:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5632              		.loc 1 3805 17
 5633 000e 7B68     		ldr	r3, [r7, #4]
 5634 0010 0133     		adds	r3, r3, #1
 5635 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5636              		.loc 1 3806 11
 5637 0014 FB68     		ldr	r3, [r7, #12]
 5638 0016 0133     		adds	r3, r3, #1
 5639 0018 FB60     		str	r3, [r7, #12]
 5640              	.L351:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5641              		.loc 1 3803 10
 5642 001a 7B68     		ldr	r3, [r7, #4]
 5643 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5644              		.loc 1 3803 8
 5645 001e A52B     		cmp	r3, #165
 5646 0020 F5D0     		beq	.L352
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5647              		.loc 1 3809 11
 5648 0022 FB68     		ldr	r3, [r7, #12]
 5649 0024 9B08     		lsrs	r3, r3, #2
 5650 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5651              		.loc 1 3811 10
 5652 0028 FB68     		ldr	r3, [r7, #12]
 5653 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5654              		.loc 1 3812 2
 5655 002c 1846     		mov	r0, r3
 5656 002e 1437     		adds	r7, r7, #20
 5657              	.LCFI220:
 5658              		.cfi_def_cfa_offset 4
 5659 0030 BD46     		mov	sp, r7
 5660              	.LCFI221:
 5661              		.cfi_def_cfa_register 13
 5662              		@ sp needed
ARM GAS  /tmp/ccad9K0d.s 			page 171


 5663 0032 5DF8047B 		ldr	r7, [sp], #4
 5664              	.LCFI222:
 5665              		.cfi_restore 7
 5666              		.cfi_def_cfa_offset 0
 5667 0036 7047     		bx	lr
 5668              		.cfi_endproc
 5669              	.LFE47:
 5671              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5672              		.align	1
 5673              		.global	uxTaskGetStackHighWaterMark
 5674              		.syntax unified
 5675              		.thumb
 5676              		.thumb_func
 5678              	uxTaskGetStackHighWaterMark:
 5679              	.LFB48:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
ARM GAS  /tmp/ccad9K0d.s 			page 172


3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5680              		.loc 1 3860 2
 5681              		.cfi_startproc
 5682              		@ args = 0, pretend = 0, frame = 24
 5683              		@ frame_needed = 1, uses_anonymous_args = 0
 5684 0000 80B5     		push	{r7, lr}
 5685              	.LCFI223:
 5686              		.cfi_def_cfa_offset 8
 5687              		.cfi_offset 7, -8
 5688              		.cfi_offset 14, -4
 5689 0002 86B0     		sub	sp, sp, #24
 5690              	.LCFI224:
 5691              		.cfi_def_cfa_offset 32
 5692 0004 00AF     		add	r7, sp, #0
 5693              	.LCFI225:
 5694              		.cfi_def_cfa_register 7
 5695 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5696              		.loc 1 3865 11
 5697 0008 7B68     		ldr	r3, [r7, #4]
 5698 000a 002B     		cmp	r3, #0
 5699 000c 02D1     		bne	.L355
 5700              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5701 000e 094B     		ldr	r3, .L358
 5702 0010 1B68     		ldr	r3, [r3]
 5703 0012 00E0     		b	.L356
 5704              	.L355:
 5705              		.loc 1 3865 11 discriminator 2
 5706 0014 7B68     		ldr	r3, [r7, #4]
 5707              	.L356:
 5708              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5709 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5710              		.loc 1 3869 18 discriminator 4
 5711 0018 7B69     		ldr	r3, [r7, #20]
 5712 001a 1B6B     		ldr	r3, [r3, #48]
 5713 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  /tmp/ccad9K0d.s 			page 173


 5714              		.loc 1 3877 30 discriminator 4
 5715 001e 3869     		ldr	r0, [r7, #16]
 5716 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5717 0024 0346     		mov	r3, r0
 5718              		.loc 1 3877 12 discriminator 4
 5719 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5720              		.loc 1 3879 10 discriminator 4
 5721 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5722              		.loc 1 3880 2 discriminator 4
 5723 002a 1846     		mov	r0, r3
 5724 002c 1837     		adds	r7, r7, #24
 5725              	.LCFI226:
 5726              		.cfi_def_cfa_offset 8
 5727 002e BD46     		mov	sp, r7
 5728              	.LCFI227:
 5729              		.cfi_def_cfa_register 13
 5730              		@ sp needed
 5731 0030 80BD     		pop	{r7, pc}
 5732              	.L359:
 5733 0032 00BF     		.align	2
 5734              	.L358:
 5735 0034 00000000 		.word	pxCurrentTCB
 5736              		.cfi_endproc
 5737              	.LFE48:
 5739              		.section	.text.prvDeleteTCB,"ax",%progbits
 5740              		.align	1
 5741              		.syntax unified
 5742              		.thumb
 5743              		.thumb_func
 5745              	prvDeleteTCB:
 5746              	.LFB49:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5747              		.loc 1 3888 2
 5748              		.cfi_startproc
 5749              		@ args = 0, pretend = 0, frame = 16
 5750              		@ frame_needed = 1, uses_anonymous_args = 0
 5751 0000 80B5     		push	{r7, lr}
 5752              	.LCFI228:
 5753              		.cfi_def_cfa_offset 8
 5754              		.cfi_offset 7, -8
 5755              		.cfi_offset 14, -4
 5756 0002 84B0     		sub	sp, sp, #16
 5757              	.LCFI229:
 5758              		.cfi_def_cfa_offset 24
 5759 0004 00AF     		add	r7, sp, #0
 5760              	.LCFI230:
 5761              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccad9K0d.s 			page 174


 5762 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5763              		.loc 1 3916 13
 5764 0008 7B68     		ldr	r3, [r7, #4]
 5765 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5766              		.loc 1 3916 6
 5767 000e 002B     		cmp	r3, #0
 5768 0010 08D1     		bne	.L361
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5769              		.loc 1 3920 21
 5770 0012 7B68     		ldr	r3, [r7, #4]
 5771 0014 1B6B     		ldr	r3, [r3, #48]
 5772              		.loc 1 3920 5
 5773 0016 1846     		mov	r0, r3
 5774 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5775              		.loc 1 3921 5
 5776 001c 7868     		ldr	r0, [r7, #4]
 5777 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccad9K0d.s 			page 175


3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5778              		.loc 1 3938 2
 5779 0022 18E0     		b	.L365
 5780              	.L361:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5781              		.loc 1 3923 18
 5782 0024 7B68     		ldr	r3, [r7, #4]
 5783 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5784              		.loc 1 3923 11
 5785 002a 012B     		cmp	r3, #1
 5786 002c 03D1     		bne	.L363
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5787              		.loc 1 3927 5
 5788 002e 7868     		ldr	r0, [r7, #4]
 5789 0030 FFF7FEFF 		bl	vPortFree
 5790              		.loc 1 3938 2
 5791 0034 0FE0     		b	.L365
 5792              	.L363:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5793              		.loc 1 3933 5
 5794 0036 7B68     		ldr	r3, [r7, #4]
 5795 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5796 003c 022B     		cmp	r3, #2
 5797 003e 0AD0     		beq	.L365
 5798              	.LBB206:
 5799              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5800              		.loc 2 195 2
 5801              		.syntax unified
 5802              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5803 0040 4FF05003 			mov r3, #80												
 5804 0044 83F31188 		msr basepri, r3											
 5805 0048 BFF36F8F 		isb														
 5806 004c BFF34F8F 		dsb														
 5807              	
 5808              	@ 0 "" 2
 5809              		.thumb
 5810              		.syntax unified
 5811 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5812              		.loc 2 203 1
 5813 0052 00BF     		nop
 5814              	.L364:
 5815              	.LBE207:
 5816              	.LBE206:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5817              		.loc 1 3933 5 discriminator 1
 5818 0054 FEE7     		b	.L364
ARM GAS  /tmp/ccad9K0d.s 			page 176


 5819              	.L365:
 5820              		.loc 1 3938 2
 5821 0056 00BF     		nop
 5822 0058 1037     		adds	r7, r7, #16
 5823              	.LCFI231:
 5824              		.cfi_def_cfa_offset 8
 5825 005a BD46     		mov	sp, r7
 5826              	.LCFI232:
 5827              		.cfi_def_cfa_register 13
 5828              		@ sp needed
 5829 005c 80BD     		pop	{r7, pc}
 5830              		.cfi_endproc
 5831              	.LFE49:
 5833              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5834              		.align	1
 5835              		.syntax unified
 5836              		.thumb
 5837              		.thumb_func
 5839              	prvResetNextTaskUnblockTime:
 5840              	.LFB50:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5841              		.loc 1 3944 1
 5842              		.cfi_startproc
 5843              		@ args = 0, pretend = 0, frame = 8
 5844              		@ frame_needed = 1, uses_anonymous_args = 0
 5845              		@ link register save eliminated.
 5846 0000 80B4     		push	{r7}
 5847              	.LCFI233:
 5848              		.cfi_def_cfa_offset 4
 5849              		.cfi_offset 7, -4
 5850 0002 83B0     		sub	sp, sp, #12
 5851              	.LCFI234:
 5852              		.cfi_def_cfa_offset 16
 5853 0004 00AF     		add	r7, sp, #0
 5854              	.LCFI235:
 5855              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5856              		.loc 1 3947 6
 5857 0006 0C4B     		ldr	r3, .L370
 5858 0008 1B68     		ldr	r3, [r3]
 5859 000a 1B68     		ldr	r3, [r3]
 5860              		.loc 1 3947 4
 5861 000c 002B     		cmp	r3, #0
 5862 000e 04D1     		bne	.L367
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
ARM GAS  /tmp/ccad9K0d.s 			page 177


 5863              		.loc 1 3953 24
 5864 0010 0A4B     		ldr	r3, .L370+4
 5865 0012 4FF0FF32 		mov	r2, #-1
 5866 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5867              		.loc 1 3964 1
 5868 0018 08E0     		b	.L369
 5869              	.L367:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5870              		.loc 1 3961 15
 5871 001a 074B     		ldr	r3, .L370
 5872 001c 1B68     		ldr	r3, [r3]
 5873 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5874              		.loc 1 3961 13
 5875 0020 DB68     		ldr	r3, [r3, #12]
 5876 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5877              		.loc 1 3962 26
 5878 0024 7B68     		ldr	r3, [r7, #4]
 5879 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5880              		.loc 1 3962 24
 5881 0028 044A     		ldr	r2, .L370+4
 5882 002a 1360     		str	r3, [r2]
 5883              	.L369:
 5884              		.loc 1 3964 1
 5885 002c 00BF     		nop
 5886 002e 0C37     		adds	r7, r7, #12
 5887              	.LCFI236:
 5888              		.cfi_def_cfa_offset 4
 5889 0030 BD46     		mov	sp, r7
 5890              	.LCFI237:
 5891              		.cfi_def_cfa_register 13
 5892              		@ sp needed
 5893 0032 5DF8047B 		ldr	r7, [sp], #4
 5894              	.LCFI238:
 5895              		.cfi_restore 7
 5896              		.cfi_def_cfa_offset 0
 5897 0036 7047     		bx	lr
 5898              	.L371:
 5899              		.align	2
 5900              	.L370:
 5901 0038 00000000 		.word	pxDelayedTaskList
 5902 003c 00000000 		.word	xNextTaskUnblockTime
 5903              		.cfi_endproc
 5904              	.LFE50:
ARM GAS  /tmp/ccad9K0d.s 			page 178


 5906              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5907              		.align	1
 5908              		.global	xTaskGetCurrentTaskHandle
 5909              		.syntax unified
 5910              		.thumb
 5911              		.thumb_func
 5913              	xTaskGetCurrentTaskHandle:
 5914              	.LFB51:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5915              		.loc 1 3970 2
 5916              		.cfi_startproc
 5917              		@ args = 0, pretend = 0, frame = 8
 5918              		@ frame_needed = 1, uses_anonymous_args = 0
 5919              		@ link register save eliminated.
 5920 0000 80B4     		push	{r7}
 5921              	.LCFI239:
 5922              		.cfi_def_cfa_offset 4
 5923              		.cfi_offset 7, -4
 5924 0002 83B0     		sub	sp, sp, #12
 5925              	.LCFI240:
 5926              		.cfi_def_cfa_offset 16
 5927 0004 00AF     		add	r7, sp, #0
 5928              	.LCFI241:
 5929              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5930              		.loc 1 3976 11
 5931 0006 054B     		ldr	r3, .L374
 5932 0008 1B68     		ldr	r3, [r3]
 5933 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5934              		.loc 1 3978 10
 5935 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5936              		.loc 1 3979 2
 5937 000e 1846     		mov	r0, r3
 5938 0010 0C37     		adds	r7, r7, #12
 5939              	.LCFI242:
 5940              		.cfi_def_cfa_offset 4
 5941 0012 BD46     		mov	sp, r7
 5942              	.LCFI243:
 5943              		.cfi_def_cfa_register 13
 5944              		@ sp needed
 5945 0014 5DF8047B 		ldr	r7, [sp], #4
 5946              	.LCFI244:
 5947              		.cfi_restore 7
 5948              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccad9K0d.s 			page 179


 5949 0018 7047     		bx	lr
 5950              	.L375:
 5951 001a 00BF     		.align	2
 5952              	.L374:
 5953 001c 00000000 		.word	pxCurrentTCB
 5954              		.cfi_endproc
 5955              	.LFE51:
 5957              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5958              		.align	1
 5959              		.global	xTaskGetSchedulerState
 5960              		.syntax unified
 5961              		.thumb
 5962              		.thumb_func
 5964              	xTaskGetSchedulerState:
 5965              	.LFB52:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5966              		.loc 1 3987 2
 5967              		.cfi_startproc
 5968              		@ args = 0, pretend = 0, frame = 8
 5969              		@ frame_needed = 1, uses_anonymous_args = 0
 5970              		@ link register save eliminated.
 5971 0000 80B4     		push	{r7}
 5972              	.LCFI245:
 5973              		.cfi_def_cfa_offset 4
 5974              		.cfi_offset 7, -4
 5975 0002 83B0     		sub	sp, sp, #12
 5976              	.LCFI246:
 5977              		.cfi_def_cfa_offset 16
 5978 0004 00AF     		add	r7, sp, #0
 5979              	.LCFI247:
 5980              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 5981              		.loc 1 3990 25
 5982 0006 0B4B     		ldr	r3, .L381
 5983 0008 1B68     		ldr	r3, [r3]
 5984              		.loc 1 3990 5
 5985 000a 002B     		cmp	r3, #0
 5986 000c 02D1     		bne	.L377
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 5987              		.loc 1 3992 12
 5988 000e 0123     		movs	r3, #1
 5989 0010 7B60     		str	r3, [r7, #4]
 5990 0012 08E0     		b	.L378
 5991              	.L377:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccad9K0d.s 			page 180


3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5992              		.loc 1 3996 29
 5993 0014 084B     		ldr	r3, .L381+4
 5994 0016 1B68     		ldr	r3, [r3]
 5995              		.loc 1 3996 6
 5996 0018 002B     		cmp	r3, #0
 5997 001a 02D1     		bne	.L379
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 5998              		.loc 1 3998 13
 5999 001c 0223     		movs	r3, #2
 6000 001e 7B60     		str	r3, [r7, #4]
 6001 0020 01E0     		b	.L378
 6002              	.L379:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6003              		.loc 1 4002 13
 6004 0022 0023     		movs	r3, #0
 6005 0024 7B60     		str	r3, [r7, #4]
 6006              	.L378:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6007              		.loc 1 4006 10
 6008 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6009              		.loc 1 4007 2
 6010 0028 1846     		mov	r0, r3
 6011 002a 0C37     		adds	r7, r7, #12
 6012              	.LCFI248:
 6013              		.cfi_def_cfa_offset 4
 6014 002c BD46     		mov	sp, r7
 6015              	.LCFI249:
 6016              		.cfi_def_cfa_register 13
 6017              		@ sp needed
 6018 002e 5DF8047B 		ldr	r7, [sp], #4
 6019              	.LCFI250:
 6020              		.cfi_restore 7
 6021              		.cfi_def_cfa_offset 0
 6022 0032 7047     		bx	lr
 6023              	.L382:
 6024              		.align	2
 6025              	.L381:
 6026 0034 00000000 		.word	xSchedulerRunning
 6027 0038 00000000 		.word	uxSchedulerSuspended
 6028              		.cfi_endproc
 6029              	.LFE52:
 6031              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6032              		.align	1
 6033              		.global	xTaskPriorityInherit
 6034              		.syntax unified
 6035              		.thumb
 6036              		.thumb_func
 6038              	xTaskPriorityInherit:
ARM GAS  /tmp/ccad9K0d.s 			page 181


 6039              	.LFB53:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6040              		.loc 1 4015 2
 6041              		.cfi_startproc
 6042              		@ args = 0, pretend = 0, frame = 16
 6043              		@ frame_needed = 1, uses_anonymous_args = 0
 6044 0000 80B5     		push	{r7, lr}
 6045              	.LCFI251:
 6046              		.cfi_def_cfa_offset 8
 6047              		.cfi_offset 7, -8
 6048              		.cfi_offset 14, -4
 6049 0002 84B0     		sub	sp, sp, #16
 6050              	.LCFI252:
 6051              		.cfi_def_cfa_offset 24
 6052 0004 00AF     		add	r7, sp, #0
 6053              	.LCFI253:
 6054              		.cfi_def_cfa_register 7
 6055 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6056              		.loc 1 4016 16
 6057 0008 7B68     		ldr	r3, [r7, #4]
 6058 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6059              		.loc 1 4017 13
 6060 000c 0023     		movs	r3, #0
 6061 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6062              		.loc 1 4022 5
 6063 0010 7B68     		ldr	r3, [r7, #4]
 6064 0012 002B     		cmp	r3, #0
 6065 0014 51D0     		beq	.L384
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6066              		.loc 1 4027 24
 6067 0016 BB68     		ldr	r3, [r7, #8]
 6068 0018 DA6A     		ldr	r2, [r3, #44]
 6069              		.loc 1 4027 51
 6070 001a 2A4B     		ldr	r3, .L391
 6071 001c 1B68     		ldr	r3, [r3]
 6072 001e DB6A     		ldr	r3, [r3, #44]
 6073              		.loc 1 4027 6
 6074 0020 9A42     		cmp	r2, r3
 6075 0022 41D2     		bcs	.L385
ARM GAS  /tmp/ccad9K0d.s 			page 182


4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6076              		.loc 1 4032 11
 6077 0024 BB68     		ldr	r3, [r7, #8]
 6078 0026 9B69     		ldr	r3, [r3, #24]
 6079              		.loc 1 4032 7
 6080 0028 002B     		cmp	r3, #0
 6081 002a 06DB     		blt	.L386
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6082              		.loc 1 4034 6
 6083 002c 254B     		ldr	r3, .L391
 6084 002e 1B68     		ldr	r3, [r3]
 6085 0030 DB6A     		ldr	r3, [r3, #44]
 6086 0032 C3F13802 		rsb	r2, r3, #56
 6087 0036 BB68     		ldr	r3, [r7, #8]
 6088 0038 9A61     		str	r2, [r3, #24]
 6089              	.L386:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6090              		.loc 1 4043 9
 6091 003a BB68     		ldr	r3, [r7, #8]
 6092 003c 5969     		ldr	r1, [r3, #20]
 6093 003e BB68     		ldr	r3, [r7, #8]
 6094 0040 DA6A     		ldr	r2, [r3, #44]
 6095 0042 1346     		mov	r3, r2
 6096 0044 9B00     		lsls	r3, r3, #2
 6097 0046 1344     		add	r3, r3, r2
 6098 0048 9B00     		lsls	r3, r3, #2
 6099 004a 1F4A     		ldr	r2, .L391+4
 6100 004c 1344     		add	r3, r3, r2
 6101              		.loc 1 4043 7
 6102 004e 9942     		cmp	r1, r3
 6103 0050 22D1     		bne	.L387
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6104              		.loc 1 4045 10
 6105 0052 BB68     		ldr	r3, [r7, #8]
 6106 0054 0433     		adds	r3, r3, #4
 6107 0056 1846     		mov	r0, r3
 6108 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccad9K0d.s 			page 183


4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6109              		.loc 1 4058 49
 6110 005c 194B     		ldr	r3, .L391
 6111 005e 1B68     		ldr	r3, [r3]
 6112 0060 DA6A     		ldr	r2, [r3, #44]
 6113              		.loc 1 4058 35
 6114 0062 BB68     		ldr	r3, [r7, #8]
 6115 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6116              		.loc 1 4059 6
 6117 0066 BB68     		ldr	r3, [r7, #8]
 6118 0068 DA6A     		ldr	r2, [r3, #44]
 6119 006a 184B     		ldr	r3, .L391+8
 6120 006c 1B68     		ldr	r3, [r3]
 6121 006e 9A42     		cmp	r2, r3
 6122 0070 03D9     		bls	.L388
 6123              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6124 0072 BB68     		ldr	r3, [r7, #8]
 6125 0074 DB6A     		ldr	r3, [r3, #44]
 6126 0076 154A     		ldr	r2, .L391+8
 6127 0078 1360     		str	r3, [r2]
 6128              	.L388:
 6129              		.loc 1 4059 6 discriminator 3
 6130 007a BB68     		ldr	r3, [r7, #8]
 6131 007c DA6A     		ldr	r2, [r3, #44]
 6132 007e 1346     		mov	r3, r2
 6133 0080 9B00     		lsls	r3, r3, #2
 6134 0082 1344     		add	r3, r3, r2
 6135 0084 9B00     		lsls	r3, r3, #2
 6136 0086 104A     		ldr	r2, .L391+4
 6137 0088 1A44     		add	r2, r2, r3
 6138 008a BB68     		ldr	r3, [r7, #8]
 6139 008c 0433     		adds	r3, r3, #4
 6140 008e 1946     		mov	r1, r3
 6141 0090 1046     		mov	r0, r2
 6142 0092 FFF7FEFF 		bl	vListInsertEnd
 6143 0096 04E0     		b	.L389
 6144              	.L387:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6145              		.loc 1 4064 49 is_stmt 1
 6146 0098 0A4B     		ldr	r3, .L391
 6147 009a 1B68     		ldr	r3, [r3]
 6148 009c DA6A     		ldr	r2, [r3, #44]
 6149              		.loc 1 4064 35
 6150 009e BB68     		ldr	r3, [r7, #8]
 6151 00a0 DA62     		str	r2, [r3, #44]
 6152              	.L389:
ARM GAS  /tmp/ccad9K0d.s 			page 184


4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6153              		.loc 1 4070 13
 6154 00a2 0123     		movs	r3, #1
 6155 00a4 FB60     		str	r3, [r7, #12]
 6156 00a6 08E0     		b	.L384
 6157              	.L385:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6158              		.loc 1 4074 25
 6159 00a8 BB68     		ldr	r3, [r7, #8]
 6160 00aa DA6C     		ldr	r2, [r3, #76]
 6161              		.loc 1 4074 56
 6162 00ac 054B     		ldr	r3, .L391
 6163 00ae 1B68     		ldr	r3, [r3]
 6164 00b0 DB6A     		ldr	r3, [r3, #44]
 6165              		.loc 1 4074 7
 6166 00b2 9A42     		cmp	r2, r3
 6167 00b4 01D2     		bcs	.L384
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6168              		.loc 1 4083 14
 6169 00b6 0123     		movs	r3, #1
 6170 00b8 FB60     		str	r3, [r7, #12]
 6171              	.L384:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6172              		.loc 1 4096 10
 6173 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6174              		.loc 1 4097 2
 6175 00bc 1846     		mov	r0, r3
 6176 00be 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccad9K0d.s 			page 185


 6177              	.LCFI254:
 6178              		.cfi_def_cfa_offset 8
 6179 00c0 BD46     		mov	sp, r7
 6180              	.LCFI255:
 6181              		.cfi_def_cfa_register 13
 6182              		@ sp needed
 6183 00c2 80BD     		pop	{r7, pc}
 6184              	.L392:
 6185              		.align	2
 6186              	.L391:
 6187 00c4 00000000 		.word	pxCurrentTCB
 6188 00c8 00000000 		.word	pxReadyTasksLists
 6189 00cc 00000000 		.word	uxTopReadyPriority
 6190              		.cfi_endproc
 6191              	.LFE53:
 6193              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6194              		.align	1
 6195              		.global	xTaskPriorityDisinherit
 6196              		.syntax unified
 6197              		.thumb
 6198              		.thumb_func
 6200              	xTaskPriorityDisinherit:
 6201              	.LFB54:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6202              		.loc 1 4105 2
 6203              		.cfi_startproc
 6204              		@ args = 0, pretend = 0, frame = 24
 6205              		@ frame_needed = 1, uses_anonymous_args = 0
 6206 0000 80B5     		push	{r7, lr}
 6207              	.LCFI256:
 6208              		.cfi_def_cfa_offset 8
 6209              		.cfi_offset 7, -8
 6210              		.cfi_offset 14, -4
 6211 0002 86B0     		sub	sp, sp, #24
 6212              	.LCFI257:
 6213              		.cfi_def_cfa_offset 32
 6214 0004 00AF     		add	r7, sp, #0
 6215              	.LCFI258:
 6216              		.cfi_def_cfa_register 7
 6217 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6218              		.loc 1 4106 16
 6219 0008 7B68     		ldr	r3, [r7, #4]
 6220 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6221              		.loc 1 4107 13
 6222 000c 0023     		movs	r3, #0
 6223 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  /tmp/ccad9K0d.s 			page 186


 6224              		.loc 1 4109 5
 6225 0010 7B68     		ldr	r3, [r7, #4]
 6226 0012 002B     		cmp	r3, #0
 6227 0014 56D0     		beq	.L394
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6228              		.loc 1 4115 4
 6229 0016 2E4B     		ldr	r3, .L401
 6230 0018 1B68     		ldr	r3, [r3]
 6231 001a 3A69     		ldr	r2, [r7, #16]
 6232 001c 9A42     		cmp	r2, r3
 6233 001e 0AD0     		beq	.L395
 6234              	.LBB208:
 6235              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6236              		.loc 2 195 2
 6237              		.syntax unified
 6238              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6239 0020 4FF05003 			mov r3, #80												
 6240 0024 83F31188 		msr basepri, r3											
 6241 0028 BFF36F8F 		isb														
 6242 002c BFF34F8F 		dsb														
 6243              	
 6244              	@ 0 "" 2
 6245              		.thumb
 6246              		.syntax unified
 6247 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6248              		.loc 2 203 1
 6249 0032 00BF     		nop
 6250              	.L396:
 6251              	.LBE209:
 6252              	.LBE208:
 6253              		.loc 1 4115 4 discriminator 1
 6254 0034 FEE7     		b	.L396
 6255              	.L395:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6256              		.loc 1 4116 4
 6257 0036 3B69     		ldr	r3, [r7, #16]
 6258 0038 1B6D     		ldr	r3, [r3, #80]
 6259 003a 002B     		cmp	r3, #0
 6260 003c 0AD1     		bne	.L397
 6261              	.LBB210:
 6262              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6263              		.loc 2 195 2
 6264              		.syntax unified
 6265              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6266 003e 4FF05003 			mov r3, #80												
 6267 0042 83F31188 		msr basepri, r3											
 6268 0046 BFF36F8F 		isb														
 6269 004a BFF34F8F 		dsb														
 6270              	
ARM GAS  /tmp/ccad9K0d.s 			page 187


 6271              	@ 0 "" 2
 6272              		.thumb
 6273              		.syntax unified
 6274 004e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6275              		.loc 2 203 1
 6276 0050 00BF     		nop
 6277              	.L398:
 6278              	.LBE211:
 6279              	.LBE210:
 6280              		.loc 1 4116 4 discriminator 2
 6281 0052 FEE7     		b	.L398
 6282              	.L397:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6283              		.loc 1 4117 11
 6284 0054 3B69     		ldr	r3, [r7, #16]
 6285 0056 1B6D     		ldr	r3, [r3, #80]
 6286              		.loc 1 4117 28
 6287 0058 5A1E     		subs	r2, r3, #1
 6288 005a 3B69     		ldr	r3, [r7, #16]
 6289 005c 1A65     		str	r2, [r3, #80]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6290              		.loc 1 4121 13
 6291 005e 3B69     		ldr	r3, [r7, #16]
 6292 0060 DA6A     		ldr	r2, [r3, #44]
 6293              		.loc 1 4121 34
 6294 0062 3B69     		ldr	r3, [r7, #16]
 6295 0064 DB6C     		ldr	r3, [r3, #76]
 6296              		.loc 1 4121 6
 6297 0066 9A42     		cmp	r2, r3
 6298 0068 2CD0     		beq	.L394
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6299              		.loc 1 4124 14
 6300 006a 3B69     		ldr	r3, [r7, #16]
 6301 006c 1B6D     		ldr	r3, [r3, #80]
 6302              		.loc 1 4124 7
 6303 006e 002B     		cmp	r3, #0
 6304 0070 28D1     		bne	.L394
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6305              		.loc 1 4131 10
 6306 0072 3B69     		ldr	r3, [r7, #16]
 6307 0074 0433     		adds	r3, r3, #4
 6308 0076 1846     		mov	r0, r3
 6309 0078 FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  /tmp/ccad9K0d.s 			page 188


4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6310              		.loc 1 4143 31
 6311 007c 3B69     		ldr	r3, [r7, #16]
 6312 007e DA6C     		ldr	r2, [r3, #76]
 6313              		.loc 1 4143 24
 6314 0080 3B69     		ldr	r3, [r7, #16]
 6315 0082 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6316              		.loc 1 4148 6
 6317 0084 3B69     		ldr	r3, [r7, #16]
 6318 0086 DB6A     		ldr	r3, [r3, #44]
 6319 0088 C3F13802 		rsb	r2, r3, #56
 6320 008c 3B69     		ldr	r3, [r7, #16]
 6321 008e 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6322              		.loc 1 4149 6
 6323 0090 3B69     		ldr	r3, [r7, #16]
 6324 0092 DA6A     		ldr	r2, [r3, #44]
 6325 0094 0F4B     		ldr	r3, .L401+4
 6326 0096 1B68     		ldr	r3, [r3]
 6327 0098 9A42     		cmp	r2, r3
 6328 009a 03D9     		bls	.L399
 6329              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6330 009c 3B69     		ldr	r3, [r7, #16]
 6331 009e DB6A     		ldr	r3, [r3, #44]
 6332 00a0 0C4A     		ldr	r2, .L401+4
 6333 00a2 1360     		str	r3, [r2]
 6334              	.L399:
 6335              		.loc 1 4149 6 discriminator 3
 6336 00a4 3B69     		ldr	r3, [r7, #16]
 6337 00a6 DA6A     		ldr	r2, [r3, #44]
 6338 00a8 1346     		mov	r3, r2
 6339 00aa 9B00     		lsls	r3, r3, #2
 6340 00ac 1344     		add	r3, r3, r2
 6341 00ae 9B00     		lsls	r3, r3, #2
 6342 00b0 094A     		ldr	r2, .L401+8
 6343 00b2 1A44     		add	r2, r2, r3
 6344 00b4 3B69     		ldr	r3, [r7, #16]
 6345 00b6 0433     		adds	r3, r3, #4
 6346 00b8 1946     		mov	r1, r3
 6347 00ba 1046     		mov	r0, r2
 6348 00bc FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
ARM GAS  /tmp/ccad9K0d.s 			page 189


4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6349              		.loc 1 4159 14 is_stmt 1 discriminator 3
 6350 00c0 0123     		movs	r3, #1
 6351 00c2 7B61     		str	r3, [r7, #20]
 6352              	.L394:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6353              		.loc 1 4176 10
 6354 00c4 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6355              		.loc 1 4177 2
 6356 00c6 1846     		mov	r0, r3
 6357 00c8 1837     		adds	r7, r7, #24
 6358              	.LCFI259:
 6359              		.cfi_def_cfa_offset 8
 6360 00ca BD46     		mov	sp, r7
 6361              	.LCFI260:
 6362              		.cfi_def_cfa_register 13
 6363              		@ sp needed
 6364 00cc 80BD     		pop	{r7, pc}
 6365              	.L402:
 6366 00ce 00BF     		.align	2
 6367              	.L401:
 6368 00d0 00000000 		.word	pxCurrentTCB
 6369 00d4 00000000 		.word	uxTopReadyPriority
 6370 00d8 00000000 		.word	pxReadyTasksLists
 6371              		.cfi_endproc
 6372              	.LFE54:
 6374              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6375              		.align	1
 6376              		.global	vTaskPriorityDisinheritAfterTimeout
 6377              		.syntax unified
 6378              		.thumb
 6379              		.thumb_func
 6381              	vTaskPriorityDisinheritAfterTimeout:
ARM GAS  /tmp/ccad9K0d.s 			page 190


 6382              	.LFB55:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6383              		.loc 1 4185 2
 6384              		.cfi_startproc
 6385              		@ args = 0, pretend = 0, frame = 32
 6386              		@ frame_needed = 1, uses_anonymous_args = 0
 6387 0000 80B5     		push	{r7, lr}
 6388              	.LCFI261:
 6389              		.cfi_def_cfa_offset 8
 6390              		.cfi_offset 7, -8
 6391              		.cfi_offset 14, -4
 6392 0002 88B0     		sub	sp, sp, #32
 6393              	.LCFI262:
 6394              		.cfi_def_cfa_offset 40
 6395 0004 00AF     		add	r7, sp, #0
 6396              	.LCFI263:
 6397              		.cfi_def_cfa_register 7
 6398 0006 7860     		str	r0, [r7, #4]
 6399 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6400              		.loc 1 4186 16
 6401 000a 7B68     		ldr	r3, [r7, #4]
 6402 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6403              		.loc 1 4188 20
 6404 000e 0123     		movs	r3, #1
 6405 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6406              		.loc 1 4190 5
 6407 0012 7B68     		ldr	r3, [r7, #4]
 6408 0014 002B     		cmp	r3, #0
 6409 0016 6AD0     		beq	.L413
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6410              		.loc 1 4194 4
 6411 0018 BB69     		ldr	r3, [r7, #24]
 6412 001a 1B6D     		ldr	r3, [r3, #80]
 6413 001c 002B     		cmp	r3, #0
 6414 001e 0AD1     		bne	.L405
 6415              	.LBB212:
 6416              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6417              		.loc 2 195 2
 6418              		.syntax unified
 6419              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6420 0020 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccad9K0d.s 			page 191


 6421 0024 83F31188 		msr basepri, r3											
 6422 0028 BFF36F8F 		isb														
 6423 002c BFF34F8F 		dsb														
 6424              	
 6425              	@ 0 "" 2
 6426              		.thumb
 6427              		.syntax unified
 6428 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6429              		.loc 2 203 1
 6430 0032 00BF     		nop
 6431              	.L406:
 6432              	.LBE213:
 6433              	.LBE212:
 6434              		.loc 1 4194 4 discriminator 1
 6435 0034 FEE7     		b	.L406
 6436              	.L405:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6437              		.loc 1 4200 13
 6438 0036 BB69     		ldr	r3, [r7, #24]
 6439 0038 DB6C     		ldr	r3, [r3, #76]
 6440              		.loc 1 4200 6
 6441 003a 3A68     		ldr	r2, [r7]
 6442 003c 9A42     		cmp	r2, r3
 6443 003e 02D9     		bls	.L407
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6444              		.loc 1 4202 21
 6445 0040 3B68     		ldr	r3, [r7]
 6446 0042 FB61     		str	r3, [r7, #28]
 6447 0044 02E0     		b	.L408
 6448              	.L407:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6449              		.loc 1 4206 21
 6450 0046 BB69     		ldr	r3, [r7, #24]
 6451 0048 DB6C     		ldr	r3, [r3, #76]
 6452 004a FB61     		str	r3, [r7, #28]
 6453              	.L408:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6454              		.loc 1 4210 13
 6455 004c BB69     		ldr	r3, [r7, #24]
 6456 004e DB6A     		ldr	r3, [r3, #44]
 6457              		.loc 1 4210 6
 6458 0050 FA69     		ldr	r2, [r7, #28]
 6459 0052 9A42     		cmp	r2, r3
 6460 0054 4BD0     		beq	.L413
ARM GAS  /tmp/ccad9K0d.s 			page 192


4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6461              		.loc 1 4216 14
 6462 0056 BB69     		ldr	r3, [r7, #24]
 6463 0058 1B6D     		ldr	r3, [r3, #80]
 6464              		.loc 1 4216 7
 6465 005a 7A69     		ldr	r2, [r7, #20]
 6466 005c 9A42     		cmp	r2, r3
 6467 005e 46D1     		bne	.L413
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6468              		.loc 1 4221 6
 6469 0060 254B     		ldr	r3, .L414
 6470 0062 1B68     		ldr	r3, [r3]
 6471 0064 BA69     		ldr	r2, [r7, #24]
 6472 0066 9A42     		cmp	r2, r3
 6473 0068 0AD1     		bne	.L409
 6474              	.LBB214:
 6475              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6476              		.loc 2 195 2
 6477              		.syntax unified
 6478              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6479 006a 4FF05003 			mov r3, #80												
 6480 006e 83F31188 		msr basepri, r3											
 6481 0072 BFF36F8F 		isb														
 6482 0076 BFF34F8F 		dsb														
 6483              	
 6484              	@ 0 "" 2
 6485              		.thumb
 6486              		.syntax unified
 6487 007a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6488              		.loc 2 203 1
 6489 007c 00BF     		nop
 6490              	.L410:
 6491              	.LBE215:
 6492              	.LBE214:
 6493              		.loc 1 4221 6 discriminator 2
 6494 007e FEE7     		b	.L410
 6495              	.L409:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6496              		.loc 1 4227 28
 6497 0080 BB69     		ldr	r3, [r7, #24]
 6498 0082 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccad9K0d.s 			page 193


 6499 0084 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6500              		.loc 1 4228 24
 6501 0086 BB69     		ldr	r3, [r7, #24]
 6502 0088 FA69     		ldr	r2, [r7, #28]
 6503 008a DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6504              		.loc 1 4232 12
 6505 008c BB69     		ldr	r3, [r7, #24]
 6506 008e 9B69     		ldr	r3, [r3, #24]
 6507              		.loc 1 4232 8
 6508 0090 002B     		cmp	r3, #0
 6509 0092 04DB     		blt	.L411
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6510              		.loc 1 4234 7
 6511 0094 FB69     		ldr	r3, [r7, #28]
 6512 0096 C3F13802 		rsb	r2, r3, #56
 6513 009a BB69     		ldr	r3, [r7, #24]
 6514 009c 9A61     		str	r2, [r3, #24]
 6515              	.L411:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6516              		.loc 1 4247 10
 6517 009e BB69     		ldr	r3, [r7, #24]
 6518 00a0 5969     		ldr	r1, [r3, #20]
 6519 00a2 3A69     		ldr	r2, [r7, #16]
 6520 00a4 1346     		mov	r3, r2
 6521 00a6 9B00     		lsls	r3, r3, #2
 6522 00a8 1344     		add	r3, r3, r2
 6523 00aa 9B00     		lsls	r3, r3, #2
 6524 00ac 134A     		ldr	r2, .L414+4
 6525 00ae 1344     		add	r3, r3, r2
 6526              		.loc 1 4247 8
 6527 00b0 9942     		cmp	r1, r3
 6528 00b2 1CD1     		bne	.L413
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6529              		.loc 1 4249 11
 6530 00b4 BB69     		ldr	r3, [r7, #24]
 6531 00b6 0433     		adds	r3, r3, #4
 6532 00b8 1846     		mov	r0, r3
 6533 00ba FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccad9K0d.s 			page 194


4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6534              		.loc 1 4261 7
 6535 00be BB69     		ldr	r3, [r7, #24]
 6536 00c0 DA6A     		ldr	r2, [r3, #44]
 6537 00c2 0F4B     		ldr	r3, .L414+8
 6538 00c4 1B68     		ldr	r3, [r3]
 6539 00c6 9A42     		cmp	r2, r3
 6540 00c8 03D9     		bls	.L412
 6541              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6542 00ca BB69     		ldr	r3, [r7, #24]
 6543 00cc DB6A     		ldr	r3, [r3, #44]
 6544 00ce 0C4A     		ldr	r2, .L414+8
 6545 00d0 1360     		str	r3, [r2]
 6546              	.L412:
 6547              		.loc 1 4261 7 discriminator 3
 6548 00d2 BB69     		ldr	r3, [r7, #24]
 6549 00d4 DA6A     		ldr	r2, [r3, #44]
 6550 00d6 1346     		mov	r3, r2
 6551 00d8 9B00     		lsls	r3, r3, #2
 6552 00da 1344     		add	r3, r3, r2
 6553 00dc 9B00     		lsls	r3, r3, #2
 6554 00de 074A     		ldr	r2, .L414+4
 6555 00e0 1A44     		add	r2, r2, r3
 6556 00e2 BB69     		ldr	r3, [r7, #24]
 6557 00e4 0433     		adds	r3, r3, #4
 6558 00e6 1946     		mov	r1, r3
 6559 00e8 1046     		mov	r0, r2
 6560 00ea FFF7FEFF 		bl	vListInsertEnd
 6561              	.L413:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccad9K0d.s 			page 195


4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6562              		.loc 1 4282 2 is_stmt 1
 6563 00ee 00BF     		nop
 6564 00f0 2037     		adds	r7, r7, #32
 6565              	.LCFI264:
 6566              		.cfi_def_cfa_offset 8
 6567 00f2 BD46     		mov	sp, r7
 6568              	.LCFI265:
 6569              		.cfi_def_cfa_register 13
 6570              		@ sp needed
 6571 00f4 80BD     		pop	{r7, pc}
 6572              	.L415:
 6573 00f6 00BF     		.align	2
 6574              	.L414:
 6575 00f8 00000000 		.word	pxCurrentTCB
 6576 00fc 00000000 		.word	pxReadyTasksLists
 6577 0100 00000000 		.word	uxTopReadyPriority
 6578              		.cfi_endproc
 6579              	.LFE55:
 6581              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6582              		.align	1
 6583              		.global	uxTaskResetEventItemValue
 6584              		.syntax unified
 6585              		.thumb
 6586              		.thumb_func
 6588              	uxTaskResetEventItemValue:
 6589              	.LFB56:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccad9K0d.s 			page 196


4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
ARM GAS  /tmp/ccad9K0d.s 			page 197


4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
ARM GAS  /tmp/ccad9K0d.s 			page 198


4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
ARM GAS  /tmp/ccad9K0d.s 			page 199


4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
ARM GAS  /tmp/ccad9K0d.s 			page 200


4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccad9K0d.s 			page 201


4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6590              		.loc 1 4603 1
 6591              		.cfi_startproc
 6592              		@ args = 0, pretend = 0, frame = 8
 6593              		@ frame_needed = 1, uses_anonymous_args = 0
 6594              		@ link register save eliminated.
 6595 0000 80B4     		push	{r7}
 6596              	.LCFI266:
 6597              		.cfi_def_cfa_offset 4
 6598              		.cfi_offset 7, -4
 6599 0002 83B0     		sub	sp, sp, #12
 6600              	.LCFI267:
 6601              		.cfi_def_cfa_offset 16
 6602 0004 00AF     		add	r7, sp, #0
 6603              	.LCFI268:
 6604              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6605              		.loc 1 4606 13
 6606 0006 094B     		ldr	r3, .L418
 6607 0008 1B68     		ldr	r3, [r3]
 6608              		.loc 1 4606 11
 6609 000a 9B69     		ldr	r3, [r3, #24]
 6610 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6611              		.loc 1 4610 2
 6612 000e 074B     		ldr	r3, .L418
 6613 0010 1B68     		ldr	r3, [r3]
 6614 0012 DA6A     		ldr	r2, [r3, #44]
 6615 0014 054B     		ldr	r3, .L418
 6616 0016 1B68     		ldr	r3, [r3]
 6617 0018 C2F13802 		rsb	r2, r2, #56
 6618 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6619              		.loc 1 4612 9
 6620 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6621              		.loc 1 4613 1
 6622 0020 1846     		mov	r0, r3
 6623 0022 0C37     		adds	r7, r7, #12
 6624              	.LCFI269:
 6625              		.cfi_def_cfa_offset 4
 6626 0024 BD46     		mov	sp, r7
 6627              	.LCFI270:
ARM GAS  /tmp/ccad9K0d.s 			page 202


 6628              		.cfi_def_cfa_register 13
 6629              		@ sp needed
 6630 0026 5DF8047B 		ldr	r7, [sp], #4
 6631              	.LCFI271:
 6632              		.cfi_restore 7
 6633              		.cfi_def_cfa_offset 0
 6634 002a 7047     		bx	lr
 6635              	.L419:
 6636              		.align	2
 6637              	.L418:
 6638 002c 00000000 		.word	pxCurrentTCB
 6639              		.cfi_endproc
 6640              	.LFE56:
 6642              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6643              		.align	1
 6644              		.global	pvTaskIncrementMutexHeldCount
 6645              		.syntax unified
 6646              		.thumb
 6647              		.thumb_func
 6649              	pvTaskIncrementMutexHeldCount:
 6650              	.LFB57:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6651              		.loc 1 4619 2
 6652              		.cfi_startproc
 6653              		@ args = 0, pretend = 0, frame = 0
 6654              		@ frame_needed = 1, uses_anonymous_args = 0
 6655              		@ link register save eliminated.
 6656 0000 80B4     		push	{r7}
 6657              	.LCFI272:
 6658              		.cfi_def_cfa_offset 4
 6659              		.cfi_offset 7, -4
 6660 0002 00AF     		add	r7, sp, #0
 6661              	.LCFI273:
 6662              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6663              		.loc 1 4622 20
 6664 0004 074B     		ldr	r3, .L423
 6665 0006 1B68     		ldr	r3, [r3]
 6666              		.loc 1 4622 5
 6667 0008 002B     		cmp	r3, #0
 6668 000a 04D0     		beq	.L421
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6669              		.loc 1 4624 18
 6670 000c 054B     		ldr	r3, .L423
 6671 000e 1B68     		ldr	r3, [r3]
 6672 0010 1A6D     		ldr	r2, [r3, #80]
 6673              		.loc 1 4624 35
 6674 0012 0132     		adds	r2, r2, #1
 6675 0014 1A65     		str	r2, [r3, #80]
ARM GAS  /tmp/ccad9K0d.s 			page 203


 6676              	.L421:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6677              		.loc 1 4627 10
 6678 0016 034B     		ldr	r3, .L423
 6679 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6680              		.loc 1 4628 2
 6681 001a 1846     		mov	r0, r3
 6682 001c BD46     		mov	sp, r7
 6683              	.LCFI274:
 6684              		.cfi_def_cfa_register 13
 6685              		@ sp needed
 6686 001e 5DF8047B 		ldr	r7, [sp], #4
 6687              	.LCFI275:
 6688              		.cfi_restore 7
 6689              		.cfi_def_cfa_offset 0
 6690 0022 7047     		bx	lr
 6691              	.L424:
 6692              		.align	2
 6693              	.L423:
 6694 0024 00000000 		.word	pxCurrentTCB
 6695              		.cfi_endproc
 6696              	.LFE57:
 6698              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6699              		.align	1
 6700              		.global	ulTaskNotifyTake
 6701              		.syntax unified
 6702              		.thumb
 6703              		.thumb_func
 6705              	ulTaskNotifyTake:
 6706              	.LFB58:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6707              		.loc 1 4636 2
 6708              		.cfi_startproc
 6709              		@ args = 0, pretend = 0, frame = 16
 6710              		@ frame_needed = 1, uses_anonymous_args = 0
 6711 0000 80B5     		push	{r7, lr}
 6712              	.LCFI276:
 6713              		.cfi_def_cfa_offset 8
 6714              		.cfi_offset 7, -8
 6715              		.cfi_offset 14, -4
 6716 0002 84B0     		sub	sp, sp, #16
 6717              	.LCFI277:
 6718              		.cfi_def_cfa_offset 24
 6719 0004 00AF     		add	r7, sp, #0
 6720              	.LCFI278:
 6721              		.cfi_def_cfa_register 7
 6722 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccad9K0d.s 			page 204


 6723 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6724              		.loc 1 4639 3
 6725 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6726              		.loc 1 4642 20
 6727 000e 1E4B     		ldr	r3, .L430
 6728 0010 1B68     		ldr	r3, [r3]
 6729 0012 5B6D     		ldr	r3, [r3, #84]
 6730              		.loc 1 4642 6
 6731 0014 002B     		cmp	r3, #0
 6732 0016 13D1     		bne	.L426
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6733              		.loc 1 4645 17
 6734 0018 1B4B     		ldr	r3, .L430
 6735 001a 1B68     		ldr	r3, [r3]
 6736              		.loc 1 4645 33
 6737 001c 0122     		movs	r2, #1
 6738 001e 83F85820 		strb	r2, [r3, #88]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6739              		.loc 1 4647 7
 6740 0022 3B68     		ldr	r3, [r7]
 6741 0024 002B     		cmp	r3, #0
 6742 0026 0BD0     		beq	.L426
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6743              		.loc 1 4649 6
 6744 0028 0121     		movs	r1, #1
 6745 002a 3868     		ldr	r0, [r7]
 6746 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6747              		.loc 1 4656 6
 6748 0030 164B     		ldr	r3, .L430+4
 6749 0032 4FF08052 		mov	r2, #268435456
 6750 0036 1A60     		str	r2, [r3]
 6751              		.syntax unified
 6752              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6753 0038 BFF34F8F 		dsb
 6754              	@ 0 "" 2
 6755              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6756 003c BFF36F8F 		isb
 6757              	@ 0 "" 2
 6758              		.thumb
 6759              		.syntax unified
ARM GAS  /tmp/ccad9K0d.s 			page 205


 6760              	.L426:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6761              		.loc 1 4668 3
 6762 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6763              		.loc 1 4670 3
 6764 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6765              		.loc 1 4673 27
 6766 0048 0F4B     		ldr	r3, .L430
 6767 004a 1B68     		ldr	r3, [r3]
 6768              		.loc 1 4673 13
 6769 004c 5B6D     		ldr	r3, [r3, #84]
 6770 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6771              		.loc 1 4675 6
 6772 0050 FB68     		ldr	r3, [r7, #12]
 6773 0052 002B     		cmp	r3, #0
 6774 0054 0CD0     		beq	.L427
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6775              		.loc 1 4677 7
 6776 0056 7B68     		ldr	r3, [r7, #4]
 6777 0058 002B     		cmp	r3, #0
 6778 005a 04D0     		beq	.L428
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6779              		.loc 1 4679 18
 6780 005c 0A4B     		ldr	r3, .L430
 6781 005e 1B68     		ldr	r3, [r3]
 6782              		.loc 1 4679 36
 6783 0060 0022     		movs	r2, #0
 6784 0062 5A65     		str	r2, [r3, #84]
 6785 0064 04E0     		b	.L427
 6786              	.L428:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6787              		.loc 1 4683 18
 6788 0066 084B     		ldr	r3, .L430
 6789 0068 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccad9K0d.s 			page 206


 6790              		.loc 1 4683 47
 6791 006a FA68     		ldr	r2, [r7, #12]
 6792 006c 013A     		subs	r2, r2, #1
 6793              		.loc 1 4683 36
 6794 006e 5A65     		str	r2, [r3, #84]
 6795              	.L427:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6796              		.loc 1 4691 16
 6797 0070 054B     		ldr	r3, .L430
 6798 0072 1B68     		ldr	r3, [r3]
 6799              		.loc 1 4691 32
 6800 0074 0022     		movs	r2, #0
 6801 0076 83F85820 		strb	r2, [r3, #88]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6802              		.loc 1 4693 3
 6803 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6804              		.loc 1 4695 10
 6805 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6806              		.loc 1 4696 2
 6807 0080 1846     		mov	r0, r3
 6808 0082 1037     		adds	r7, r7, #16
 6809              	.LCFI279:
 6810              		.cfi_def_cfa_offset 8
 6811 0084 BD46     		mov	sp, r7
 6812              	.LCFI280:
 6813              		.cfi_def_cfa_register 13
 6814              		@ sp needed
 6815 0086 80BD     		pop	{r7, pc}
 6816              	.L431:
 6817              		.align	2
 6818              	.L430:
 6819 0088 00000000 		.word	pxCurrentTCB
 6820 008c 04ED00E0 		.word	-536810236
 6821              		.cfi_endproc
 6822              	.LFE58:
 6824              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6825              		.align	1
 6826              		.global	xTaskNotifyWait
 6827              		.syntax unified
 6828              		.thumb
 6829              		.thumb_func
 6831              	xTaskNotifyWait:
 6832              	.LFB59:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccad9K0d.s 			page 207


4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6833              		.loc 1 4704 2
 6834              		.cfi_startproc
 6835              		@ args = 0, pretend = 0, frame = 24
 6836              		@ frame_needed = 1, uses_anonymous_args = 0
 6837 0000 80B5     		push	{r7, lr}
 6838              	.LCFI281:
 6839              		.cfi_def_cfa_offset 8
 6840              		.cfi_offset 7, -8
 6841              		.cfi_offset 14, -4
 6842 0002 86B0     		sub	sp, sp, #24
 6843              	.LCFI282:
 6844              		.cfi_def_cfa_offset 32
 6845 0004 00AF     		add	r7, sp, #0
 6846              	.LCFI283:
 6847              		.cfi_def_cfa_register 7
 6848 0006 F860     		str	r0, [r7, #12]
 6849 0008 B960     		str	r1, [r7, #8]
 6850 000a 7A60     		str	r2, [r7, #4]
 6851 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6852              		.loc 1 4707 3
 6853 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6854              		.loc 1 4710 20
 6855 0012 264B     		ldr	r3, .L438
 6856 0014 1B68     		ldr	r3, [r3]
 6857 0016 93F85830 		ldrb	r3, [r3, #88]
 6858 001a DBB2     		uxtb	r3, r3
 6859              		.loc 1 4710 6
 6860 001c 022B     		cmp	r3, #2
 6861 001e 1AD0     		beq	.L433
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6862              		.loc 1 4715 35
 6863 0020 224B     		ldr	r3, .L438
 6864 0022 1B68     		ldr	r3, [r3]
 6865 0024 596D     		ldr	r1, [r3, #84]
 6866              		.loc 1 4715 38
 6867 0026 FA68     		ldr	r2, [r7, #12]
 6868 0028 D243     		mvns	r2, r2
 6869              		.loc 1 4715 35
 6870 002a 0A40     		ands	r2, r2, r1
 6871 002c 5A65     		str	r2, [r3, #84]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
ARM GAS  /tmp/ccad9K0d.s 			page 208


4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6872              		.loc 1 4718 17
 6873 002e 1F4B     		ldr	r3, .L438
 6874 0030 1B68     		ldr	r3, [r3]
 6875              		.loc 1 4718 33
 6876 0032 0122     		movs	r2, #1
 6877 0034 83F85820 		strb	r2, [r3, #88]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6878              		.loc 1 4720 7
 6879 0038 3B68     		ldr	r3, [r7]
 6880 003a 002B     		cmp	r3, #0
 6881 003c 0BD0     		beq	.L433
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6882              		.loc 1 4722 6
 6883 003e 0121     		movs	r1, #1
 6884 0040 3868     		ldr	r0, [r7]
 6885 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6886              		.loc 1 4729 6
 6887 0046 1A4B     		ldr	r3, .L438+4
 6888 0048 4FF08052 		mov	r2, #268435456
 6889 004c 1A60     		str	r2, [r3]
 6890              		.syntax unified
 6891              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6892 004e BFF34F8F 		dsb
 6893              	@ 0 "" 2
 6894              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6895 0052 BFF36F8F 		isb
 6896              	@ 0 "" 2
 6897              		.thumb
 6898              		.syntax unified
 6899              	.L433:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6900              		.loc 1 4741 3
 6901 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6902              		.loc 1 4743 3
ARM GAS  /tmp/ccad9K0d.s 			page 209


 6903 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6904              		.loc 1 4747 6
 6905 005e 7B68     		ldr	r3, [r7, #4]
 6906 0060 002B     		cmp	r3, #0
 6907 0062 04D0     		beq	.L434
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 6908              		.loc 1 4751 41
 6909 0064 114B     		ldr	r3, .L438
 6910 0066 1B68     		ldr	r3, [r3]
 6911 0068 5A6D     		ldr	r2, [r3, #84]
 6912              		.loc 1 4751 27
 6913 006a 7B68     		ldr	r3, [r7, #4]
 6914 006c 1A60     		str	r2, [r3]
 6915              	.L434:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6916              		.loc 1 4758 20
 6917 006e 0F4B     		ldr	r3, .L438
 6918 0070 1B68     		ldr	r3, [r3]
 6919 0072 93F85830 		ldrb	r3, [r3, #88]
 6920 0076 DBB2     		uxtb	r3, r3
 6921              		.loc 1 4758 6
 6922 0078 022B     		cmp	r3, #2
 6923 007a 02D0     		beq	.L435
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6924              		.loc 1 4761 13
 6925 007c 0023     		movs	r3, #0
 6926 007e 7B61     		str	r3, [r7, #20]
 6927 0080 08E0     		b	.L436
 6928              	.L435:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6929              		.loc 1 4767 35
 6930 0082 0A4B     		ldr	r3, .L438
 6931 0084 1B68     		ldr	r3, [r3]
 6932 0086 596D     		ldr	r1, [r3, #84]
 6933              		.loc 1 4767 38
 6934 0088 BA68     		ldr	r2, [r7, #8]
 6935 008a D243     		mvns	r2, r2
ARM GAS  /tmp/ccad9K0d.s 			page 210


 6936              		.loc 1 4767 35
 6937 008c 0A40     		ands	r2, r2, r1
 6938 008e 5A65     		str	r2, [r3, #84]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6939              		.loc 1 4768 13
 6940 0090 0123     		movs	r3, #1
 6941 0092 7B61     		str	r3, [r7, #20]
 6942              	.L436:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6943              		.loc 1 4771 16
 6944 0094 054B     		ldr	r3, .L438
 6945 0096 1B68     		ldr	r3, [r3]
 6946              		.loc 1 4771 32
 6947 0098 0022     		movs	r2, #0
 6948 009a 83F85820 		strb	r2, [r3, #88]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6949              		.loc 1 4773 3
 6950 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6951              		.loc 1 4775 10
 6952 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6953              		.loc 1 4776 2
 6954 00a4 1846     		mov	r0, r3
 6955 00a6 1837     		adds	r7, r7, #24
 6956              	.LCFI284:
 6957              		.cfi_def_cfa_offset 8
 6958 00a8 BD46     		mov	sp, r7
 6959              	.LCFI285:
 6960              		.cfi_def_cfa_register 13
 6961              		@ sp needed
 6962 00aa 80BD     		pop	{r7, pc}
 6963              	.L439:
 6964              		.align	2
 6965              	.L438:
 6966 00ac 00000000 		.word	pxCurrentTCB
 6967 00b0 04ED00E0 		.word	-536810236
 6968              		.cfi_endproc
 6969              	.LFE59:
 6971              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6972              		.align	1
 6973              		.global	xTaskGenericNotify
 6974              		.syntax unified
 6975              		.thumb
 6976              		.thumb_func
 6978              	xTaskGenericNotify:
 6979              	.LFB60:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 211


4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6980              		.loc 1 4784 2
 6981              		.cfi_startproc
 6982              		@ args = 0, pretend = 0, frame = 40
 6983              		@ frame_needed = 1, uses_anonymous_args = 0
 6984 0000 80B5     		push	{r7, lr}
 6985              	.LCFI286:
 6986              		.cfi_def_cfa_offset 8
 6987              		.cfi_offset 7, -8
 6988              		.cfi_offset 14, -4
 6989 0002 8AB0     		sub	sp, sp, #40
 6990              	.LCFI287:
 6991              		.cfi_def_cfa_offset 48
 6992 0004 00AF     		add	r7, sp, #0
 6993              	.LCFI288:
 6994              		.cfi_def_cfa_register 7
 6995 0006 F860     		str	r0, [r7, #12]
 6996 0008 B960     		str	r1, [r7, #8]
 6997 000a 3B60     		str	r3, [r7]
 6998 000c 1346     		mov	r3, r2
 6999 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7000              		.loc 1 4786 13
 7001 0010 0123     		movs	r3, #1
 7002 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7003              		.loc 1 4789 3
 7004 0014 FB68     		ldr	r3, [r7, #12]
 7005 0016 002B     		cmp	r3, #0
 7006 0018 0AD1     		bne	.L441
 7007              	.LBB216:
 7008              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7009              		.loc 2 195 2
 7010              		.syntax unified
 7011              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7012 001a 4FF05003 			mov r3, #80												
 7013 001e 83F31188 		msr basepri, r3											
 7014 0022 BFF36F8F 		isb														
 7015 0026 BFF34F8F 		dsb														
 7016              	
 7017              	@ 0 "" 2
 7018              		.thumb
 7019              		.syntax unified
 7020 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7021              		.loc 2 203 1
 7022 002c 00BF     		nop
 7023              	.L442:
 7024              	.LBE217:
 7025              	.LBE216:
 7026              		.loc 1 4789 3 discriminator 1
 7027 002e FEE7     		b	.L442
ARM GAS  /tmp/ccad9K0d.s 			page 212


 7028              	.L441:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7029              		.loc 1 4790 9
 7030 0030 FB68     		ldr	r3, [r7, #12]
 7031 0032 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7032              		.loc 1 4792 3
 7033 0034 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7034              		.loc 1 4794 6
 7035 0038 3B68     		ldr	r3, [r7]
 7036 003a 002B     		cmp	r3, #0
 7037 003c 03D0     		beq	.L443
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7038              		.loc 1 4796 42
 7039 003e 3B6A     		ldr	r3, [r7, #32]
 7040 0040 5A6D     		ldr	r2, [r3, #84]
 7041              		.loc 1 4796 35
 7042 0042 3B68     		ldr	r3, [r7]
 7043 0044 1A60     		str	r2, [r3]
 7044              	.L443:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7045              		.loc 1 4799 26
 7046 0046 3B6A     		ldr	r3, [r7, #32]
 7047 0048 93F85830 		ldrb	r3, [r3, #88]
 7048 004c FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7049              		.loc 1 4801 25
 7050 004e 3B6A     		ldr	r3, [r7, #32]
 7051 0050 0222     		movs	r2, #2
 7052 0052 83F85820 		strb	r2, [r3, #88]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7053              		.loc 1 4803 4
 7054 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7055 0058 042B     		cmp	r3, #4
 7056 005a 28D8     		bhi	.L444
 7057 005c 01A2     		adr	r2, .L446
 7058 005e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7059 0062 00BF     		.p2align 2
 7060              	.L446:
 7061 0064 CF000000 		.word	.L461+1
 7062 0068 79000000 		.word	.L449+1
 7063 006c 87000000 		.word	.L448+1
 7064 0070 93000000 		.word	.L447+1
 7065 0074 9B000000 		.word	.L445+1
 7066              		.p2align 1
 7067              	.L449:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
ARM GAS  /tmp/ccad9K0d.s 			page 213


 7068              		.loc 1 4806 29
 7069 0078 3B6A     		ldr	r3, [r7, #32]
 7070 007a 5A6D     		ldr	r2, [r3, #84]
 7071 007c BB68     		ldr	r3, [r7, #8]
 7072 007e 1A43     		orrs	r2, r2, r3
 7073 0080 3B6A     		ldr	r3, [r7, #32]
 7074 0082 5A65     		str	r2, [r3, #84]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7075              		.loc 1 4807 6
 7076 0084 26E0     		b	.L451
 7077              	.L448:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7078              		.loc 1 4810 13
 7079 0086 3B6A     		ldr	r3, [r7, #32]
 7080 0088 5B6D     		ldr	r3, [r3, #84]
 7081              		.loc 1 4810 32
 7082 008a 5A1C     		adds	r2, r3, #1
 7083 008c 3B6A     		ldr	r3, [r7, #32]
 7084 008e 5A65     		str	r2, [r3, #84]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7085              		.loc 1 4811 6
 7086 0090 20E0     		b	.L451
 7087              	.L447:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7088              		.loc 1 4814 29
 7089 0092 3B6A     		ldr	r3, [r7, #32]
 7090 0094 BA68     		ldr	r2, [r7, #8]
 7091 0096 5A65     		str	r2, [r3, #84]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7092              		.loc 1 4815 6
 7093 0098 1CE0     		b	.L451
 7094              	.L445:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7095              		.loc 1 4818 8
 7096 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7097 009c 022B     		cmp	r3, #2
 7098 009e 03D0     		beq	.L452
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7099              		.loc 1 4820 30
 7100 00a0 3B6A     		ldr	r3, [r7, #32]
 7101 00a2 BA68     		ldr	r2, [r7, #8]
 7102 00a4 5A65     		str	r2, [r3, #84]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7103              		.loc 1 4827 6
ARM GAS  /tmp/ccad9K0d.s 			page 214


 7104 00a6 15E0     		b	.L451
 7105              	.L452:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7106              		.loc 1 4825 15
 7107 00a8 0023     		movs	r3, #0
 7108 00aa 7B62     		str	r3, [r7, #36]
 7109              		.loc 1 4827 6
 7110 00ac 12E0     		b	.L451
 7111              	.L444:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7112              		.loc 1 4838 6
 7113 00ae 3B6A     		ldr	r3, [r7, #32]
 7114 00b0 5B6D     		ldr	r3, [r3, #84]
 7115 00b2 B3F1FF3F 		cmp	r3, #-1
 7116 00b6 0CD0     		beq	.L462
 7117              	.LBB218:
 7118              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7119              		.loc 2 195 2
 7120              		.syntax unified
 7121              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7122 00b8 4FF05003 			mov r3, #80												
 7123 00bc 83F31188 		msr basepri, r3											
 7124 00c0 BFF36F8F 		isb														
 7125 00c4 BFF34F8F 		dsb														
 7126              	
 7127              	@ 0 "" 2
 7128              		.thumb
 7129              		.syntax unified
 7130 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7131              		.loc 2 203 1
 7132 00ca 00BF     		nop
 7133              	.L455:
 7134              	.LBE219:
 7135              	.LBE218:
 7136              		.loc 1 4838 6 discriminator 2
 7137 00cc FEE7     		b	.L455
 7138              	.L461:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7139              		.loc 1 4832 6
 7140 00ce 00BF     		nop
 7141 00d0 00E0     		b	.L451
 7142              	.L462:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7143              		.loc 1 4840 6
ARM GAS  /tmp/ccad9K0d.s 			page 215


 7144 00d2 00BF     		nop
 7145              	.L451:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7146              		.loc 1 4847 6
 7147 00d4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7148 00d6 012B     		cmp	r3, #1
 7149 00d8 3AD1     		bne	.L456
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7150              		.loc 1 4849 14
 7151 00da 3B6A     		ldr	r3, [r7, #32]
 7152 00dc 0433     		adds	r3, r3, #4
 7153 00de 1846     		mov	r0, r3
 7154 00e0 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7155              		.loc 1 4850 5
 7156 00e4 3B6A     		ldr	r3, [r7, #32]
 7157 00e6 DA6A     		ldr	r2, [r3, #44]
 7158 00e8 1D4B     		ldr	r3, .L463
 7159 00ea 1B68     		ldr	r3, [r3]
 7160 00ec 9A42     		cmp	r2, r3
 7161 00ee 03D9     		bls	.L457
 7162              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7163 00f0 3B6A     		ldr	r3, [r7, #32]
 7164 00f2 DB6A     		ldr	r3, [r3, #44]
 7165 00f4 1A4A     		ldr	r2, .L463
 7166 00f6 1360     		str	r3, [r2]
 7167              	.L457:
 7168              		.loc 1 4850 5 discriminator 3
 7169 00f8 3B6A     		ldr	r3, [r7, #32]
 7170 00fa DA6A     		ldr	r2, [r3, #44]
 7171 00fc 1346     		mov	r3, r2
 7172 00fe 9B00     		lsls	r3, r3, #2
 7173 0100 1344     		add	r3, r3, r2
 7174 0102 9B00     		lsls	r3, r3, #2
 7175 0104 174A     		ldr	r2, .L463+4
 7176 0106 1A44     		add	r2, r2, r3
 7177 0108 3B6A     		ldr	r3, [r7, #32]
 7178 010a 0433     		adds	r3, r3, #4
 7179 010c 1946     		mov	r1, r3
 7180 010e 1046     		mov	r0, r2
 7181 0110 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7182              		.loc 1 4853 5 is_stmt 1 discriminator 3
 7183 0114 3B6A     		ldr	r3, [r7, #32]
 7184 0116 9B6A     		ldr	r3, [r3, #40]
 7185 0118 002B     		cmp	r3, #0
 7186 011a 0AD0     		beq	.L458
 7187              	.LBB220:
ARM GAS  /tmp/ccad9K0d.s 			page 216


 7188              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7189              		.loc 2 195 2
 7190              		.syntax unified
 7191              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7192 011c 4FF05003 			mov r3, #80												
 7193 0120 83F31188 		msr basepri, r3											
 7194 0124 BFF36F8F 		isb														
 7195 0128 BFF34F8F 		dsb														
 7196              	
 7197              	@ 0 "" 2
 7198              		.thumb
 7199              		.syntax unified
 7200 012c 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7201              		.loc 2 203 1
 7202 012e 00BF     		nop
 7203              	.L459:
 7204              	.LBE221:
 7205              	.LBE220:
 7206              		.loc 1 4853 5 discriminator 3
 7207 0130 FEE7     		b	.L459
 7208              	.L458:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7209              		.loc 1 4871 14
 7210 0132 3B6A     		ldr	r3, [r7, #32]
 7211 0134 DA6A     		ldr	r2, [r3, #44]
 7212              		.loc 1 4871 41
 7213 0136 0C4B     		ldr	r3, .L463+8
 7214 0138 1B68     		ldr	r3, [r3]
 7215 013a DB6A     		ldr	r3, [r3, #44]
 7216              		.loc 1 4871 7
 7217 013c 9A42     		cmp	r2, r3
 7218 013e 07D9     		bls	.L456
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7219              		.loc 1 4875 6
 7220 0140 0A4B     		ldr	r3, .L463+12
ARM GAS  /tmp/ccad9K0d.s 			page 217


 7221 0142 4FF08052 		mov	r2, #268435456
 7222 0146 1A60     		str	r2, [r3]
 7223              		.syntax unified
 7224              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7225 0148 BFF34F8F 		dsb
 7226              	@ 0 "" 2
 7227              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7228 014c BFF36F8F 		isb
 7229              	@ 0 "" 2
 7230              		.thumb
 7231              		.syntax unified
 7232              	.L456:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7233              		.loc 1 4887 3
 7234 0150 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7235              		.loc 1 4889 10
 7236 0154 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7237              		.loc 1 4890 2
 7238 0156 1846     		mov	r0, r3
 7239 0158 2837     		adds	r7, r7, #40
 7240              	.LCFI289:
 7241              		.cfi_def_cfa_offset 8
 7242 015a BD46     		mov	sp, r7
 7243              	.LCFI290:
 7244              		.cfi_def_cfa_register 13
 7245              		@ sp needed
 7246 015c 80BD     		pop	{r7, pc}
 7247              	.L464:
 7248 015e 00BF     		.align	2
 7249              	.L463:
 7250 0160 00000000 		.word	uxTopReadyPriority
 7251 0164 00000000 		.word	pxReadyTasksLists
 7252 0168 00000000 		.word	pxCurrentTCB
 7253 016c 04ED00E0 		.word	-536810236
 7254              		.cfi_endproc
 7255              	.LFE60:
 7257              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7258              		.align	1
 7259              		.global	xTaskGenericNotifyFromISR
 7260              		.syntax unified
 7261              		.thumb
 7262              		.thumb_func
 7264              	xTaskGenericNotifyFromISR:
ARM GAS  /tmp/ccad9K0d.s 			page 218


 7265              	.LFB61:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7266              		.loc 1 4898 2
 7267              		.cfi_startproc
 7268              		@ args = 4, pretend = 0, frame = 56
 7269              		@ frame_needed = 1, uses_anonymous_args = 0
 7270 0000 80B5     		push	{r7, lr}
 7271              	.LCFI291:
 7272              		.cfi_def_cfa_offset 8
 7273              		.cfi_offset 7, -8
 7274              		.cfi_offset 14, -4
 7275 0002 8EB0     		sub	sp, sp, #56
 7276              	.LCFI292:
 7277              		.cfi_def_cfa_offset 64
 7278 0004 00AF     		add	r7, sp, #0
 7279              	.LCFI293:
 7280              		.cfi_def_cfa_register 7
 7281 0006 F860     		str	r0, [r7, #12]
 7282 0008 B960     		str	r1, [r7, #8]
 7283 000a 3B60     		str	r3, [r7]
 7284 000c 1346     		mov	r3, r2
 7285 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7286              		.loc 1 4901 13
 7287 0010 0123     		movs	r3, #1
 7288 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7289              		.loc 1 4904 3
 7290 0014 FB68     		ldr	r3, [r7, #12]
 7291 0016 002B     		cmp	r3, #0
 7292 0018 0AD1     		bne	.L466
 7293              	.LBB222:
 7294              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7295              		.loc 2 195 2
 7296              		.syntax unified
 7297              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7298 001a 4FF05003 			mov r3, #80												
 7299 001e 83F31188 		msr basepri, r3											
 7300 0022 BFF36F8F 		isb														
 7301 0026 BFF34F8F 		dsb														
 7302              	
 7303              	@ 0 "" 2
 7304              		.thumb
 7305              		.syntax unified
 7306 002a 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccad9K0d.s 			page 219


 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7307              		.loc 2 203 1
 7308 002c 00BF     		nop
 7309              	.L467:
 7310              	.LBE223:
 7311              	.LBE222:
 7312              		.loc 1 4904 3 discriminator 1
 7313 002e FEE7     		b	.L467
 7314              	.L466:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7315              		.loc 1 4922 3
 7316 0030 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7317              		.loc 1 4924 9
 7318 0034 FB68     		ldr	r3, [r7, #12]
 7319 0036 3B63     		str	r3, [r7, #48]
 7320              	.LBB224:
 7321              	.LBB225:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7322              		.loc 2 211 2
 7323              		.syntax unified
 7324              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7325 0038 EFF31182 			mrs r2, basepri											
 7326 003c 4FF05003 		mov r3, #80												
 7327 0040 83F31188 		msr basepri, r3											
 7328 0044 BFF36F8F 		isb														
 7329 0048 BFF34F8F 		dsb														
 7330              	
 7331              	@ 0 "" 2
 7332              		.thumb
 7333              		.syntax unified
 7334 004c 3A62     		str	r2, [r7, #32]
 7335 004e FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7336              		.loc 2 223 9
 7337 0050 3B6A     		ldr	r3, [r7, #32]
 7338              	.LBE225:
 7339              	.LBE224:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccad9K0d.s 			page 220


4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7340              		.loc 1 4926 28
 7341 0052 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7342              		.loc 1 4928 6
 7343 0054 3B68     		ldr	r3, [r7]
 7344 0056 002B     		cmp	r3, #0
 7345 0058 03D0     		beq	.L469
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7346              		.loc 1 4930 42
 7347 005a 3B6B     		ldr	r3, [r7, #48]
 7348 005c 5A6D     		ldr	r2, [r3, #84]
 7349              		.loc 1 4930 35
 7350 005e 3B68     		ldr	r3, [r7]
 7351 0060 1A60     		str	r2, [r3]
 7352              	.L469:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7353              		.loc 1 4933 26
 7354 0062 3B6B     		ldr	r3, [r7, #48]
 7355 0064 93F85830 		ldrb	r3, [r3, #88]
 7356 0068 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7357              		.loc 1 4934 25
 7358 006c 3B6B     		ldr	r3, [r7, #48]
 7359 006e 0222     		movs	r2, #2
 7360 0070 83F85820 		strb	r2, [r3, #88]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7361              		.loc 1 4936 4
 7362 0074 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7363 0076 042B     		cmp	r3, #4
 7364 0078 28D8     		bhi	.L470
 7365 007a 01A2     		adr	r2, .L472
 7366 007c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7367              		.p2align 2
 7368              	.L472:
 7369 0080 ED000000 		.word	.L490+1
 7370 0084 95000000 		.word	.L475+1
 7371 0088 A3000000 		.word	.L474+1
 7372 008c AF000000 		.word	.L473+1
 7373 0090 B7000000 		.word	.L471+1
 7374              		.p2align 1
 7375              	.L475:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7376              		.loc 1 4939 29
 7377 0094 3B6B     		ldr	r3, [r7, #48]
 7378 0096 5A6D     		ldr	r2, [r3, #84]
 7379 0098 BB68     		ldr	r3, [r7, #8]
 7380 009a 1A43     		orrs	r2, r2, r3
 7381 009c 3B6B     		ldr	r3, [r7, #48]
 7382 009e 5A65     		str	r2, [r3, #84]
ARM GAS  /tmp/ccad9K0d.s 			page 221


4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7383              		.loc 1 4940 6
 7384 00a0 27E0     		b	.L477
 7385              	.L474:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7386              		.loc 1 4943 13
 7387 00a2 3B6B     		ldr	r3, [r7, #48]
 7388 00a4 5B6D     		ldr	r3, [r3, #84]
 7389              		.loc 1 4943 32
 7390 00a6 5A1C     		adds	r2, r3, #1
 7391 00a8 3B6B     		ldr	r3, [r7, #48]
 7392 00aa 5A65     		str	r2, [r3, #84]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7393              		.loc 1 4944 6
 7394 00ac 21E0     		b	.L477
 7395              	.L473:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7396              		.loc 1 4947 29
 7397 00ae 3B6B     		ldr	r3, [r7, #48]
 7398 00b0 BA68     		ldr	r2, [r7, #8]
 7399 00b2 5A65     		str	r2, [r3, #84]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7400              		.loc 1 4948 6
 7401 00b4 1DE0     		b	.L477
 7402              	.L471:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7403              		.loc 1 4951 8
 7404 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7405 00ba 022B     		cmp	r3, #2
 7406 00bc 03D0     		beq	.L478
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7407              		.loc 1 4953 30
 7408 00be 3B6B     		ldr	r3, [r7, #48]
 7409 00c0 BA68     		ldr	r2, [r7, #8]
 7410 00c2 5A65     		str	r2, [r3, #84]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7411              		.loc 1 4960 6
 7412 00c4 15E0     		b	.L477
 7413              	.L478:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7414              		.loc 1 4958 15
 7415 00c6 0023     		movs	r3, #0
 7416 00c8 7B63     		str	r3, [r7, #52]
 7417              		.loc 1 4960 6
ARM GAS  /tmp/ccad9K0d.s 			page 222


 7418 00ca 12E0     		b	.L477
 7419              	.L470:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7420              		.loc 1 4971 6
 7421 00cc 3B6B     		ldr	r3, [r7, #48]
 7422 00ce 5B6D     		ldr	r3, [r3, #84]
 7423 00d0 B3F1FF3F 		cmp	r3, #-1
 7424 00d4 0CD0     		beq	.L491
 7425              	.LBB226:
 7426              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7427              		.loc 2 195 2
 7428              		.syntax unified
 7429              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7430 00d6 4FF05003 			mov r3, #80												
 7431 00da 83F31188 		msr basepri, r3											
 7432 00de BFF36F8F 		isb														
 7433 00e2 BFF34F8F 		dsb														
 7434              	
 7435              	@ 0 "" 2
 7436              		.thumb
 7437              		.syntax unified
 7438 00e6 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7439              		.loc 2 203 1
 7440 00e8 00BF     		nop
 7441              	.L481:
 7442              	.LBE227:
 7443              	.LBE226:
 7444              		.loc 1 4971 6 discriminator 2
 7445 00ea FEE7     		b	.L481
 7446              	.L490:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7447              		.loc 1 4965 6
 7448 00ec 00BF     		nop
 7449 00ee 00E0     		b	.L477
 7450              	.L491:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7451              		.loc 1 4972 6
 7452 00f0 00BF     		nop
 7453              	.L477:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  /tmp/ccad9K0d.s 			page 223


4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7454              		.loc 1 4979 6
 7455 00f2 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7456 00f6 012B     		cmp	r3, #1
 7457 00f8 46D1     		bne	.L482
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7458              		.loc 1 4982 5
 7459 00fa 3B6B     		ldr	r3, [r7, #48]
 7460 00fc 9B6A     		ldr	r3, [r3, #40]
 7461 00fe 002B     		cmp	r3, #0
 7462 0100 0AD0     		beq	.L483
 7463              	.LBB228:
 7464              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7465              		.loc 2 195 2
 7466              		.syntax unified
 7467              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7468 0102 4FF05003 			mov r3, #80												
 7469 0106 83F31188 		msr basepri, r3											
 7470 010a BFF36F8F 		isb														
 7471 010e BFF34F8F 		dsb														
 7472              	
 7473              	@ 0 "" 2
 7474              		.thumb
 7475              		.syntax unified
 7476 0112 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7477              		.loc 2 203 1
 7478 0114 00BF     		nop
 7479              	.L484:
 7480              	.LBE229:
 7481              	.LBE228:
 7482              		.loc 1 4982 5 discriminator 3
 7483 0116 FEE7     		b	.L484
 7484              	.L483:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7485              		.loc 1 4984 30
 7486 0118 214B     		ldr	r3, .L492
 7487 011a 1B68     		ldr	r3, [r3]
 7488              		.loc 1 4984 7
 7489 011c 002B     		cmp	r3, #0
 7490 011e 1DD1     		bne	.L485
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7491              		.loc 1 4986 15
 7492 0120 3B6B     		ldr	r3, [r7, #48]
 7493 0122 0433     		adds	r3, r3, #4
 7494 0124 1846     		mov	r0, r3
 7495 0126 FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7496              		.loc 1 4987 6
 7497 012a 3B6B     		ldr	r3, [r7, #48]
 7498 012c DA6A     		ldr	r2, [r3, #44]
 7499 012e 1D4B     		ldr	r3, .L492+4
ARM GAS  /tmp/ccad9K0d.s 			page 224


 7500 0130 1B68     		ldr	r3, [r3]
 7501 0132 9A42     		cmp	r2, r3
 7502 0134 03D9     		bls	.L486
 7503              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7504 0136 3B6B     		ldr	r3, [r7, #48]
 7505 0138 DB6A     		ldr	r3, [r3, #44]
 7506 013a 1A4A     		ldr	r2, .L492+4
 7507 013c 1360     		str	r3, [r2]
 7508              	.L486:
 7509              		.loc 1 4987 6 discriminator 3
 7510 013e 3B6B     		ldr	r3, [r7, #48]
 7511 0140 DA6A     		ldr	r2, [r3, #44]
 7512 0142 1346     		mov	r3, r2
 7513 0144 9B00     		lsls	r3, r3, #2
 7514 0146 1344     		add	r3, r3, r2
 7515 0148 9B00     		lsls	r3, r3, #2
 7516 014a 174A     		ldr	r2, .L492+8
 7517 014c 1A44     		add	r2, r2, r3
 7518 014e 3B6B     		ldr	r3, [r7, #48]
 7519 0150 0433     		adds	r3, r3, #4
 7520 0152 1946     		mov	r1, r3
 7521 0154 1046     		mov	r0, r2
 7522 0156 FFF7FEFF 		bl	vListInsertEnd
 7523 015a 05E0     		b	.L487
 7524              	.L485:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7525              		.loc 1 4993 6 is_stmt 1
 7526 015c 3B6B     		ldr	r3, [r7, #48]
 7527 015e 1833     		adds	r3, r3, #24
 7528 0160 1946     		mov	r1, r3
 7529 0162 1248     		ldr	r0, .L492+12
 7530 0164 FFF7FEFF 		bl	vListInsertEnd
 7531              	.L487:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7532              		.loc 1 4996 14
 7533 0168 3B6B     		ldr	r3, [r7, #48]
 7534 016a DA6A     		ldr	r2, [r3, #44]
 7535              		.loc 1 4996 41
 7536 016c 104B     		ldr	r3, .L492+16
 7537 016e 1B68     		ldr	r3, [r3]
 7538 0170 DB6A     		ldr	r3, [r3, #44]
 7539              		.loc 1 4996 7
 7540 0172 9A42     		cmp	r2, r3
 7541 0174 08D9     		bls	.L482
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7542              		.loc 1 5000 8
 7543 0176 3B6C     		ldr	r3, [r7, #64]
ARM GAS  /tmp/ccad9K0d.s 			page 225


 7544 0178 002B     		cmp	r3, #0
 7545 017a 02D0     		beq	.L488
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7546              		.loc 1 5002 34
 7547 017c 3B6C     		ldr	r3, [r7, #64]
 7548 017e 0122     		movs	r2, #1
 7549 0180 1A60     		str	r2, [r3]
 7550              	.L488:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7551              		.loc 1 5008 20
 7552 0182 0C4B     		ldr	r3, .L492+20
 7553 0184 0122     		movs	r2, #1
 7554 0186 1A60     		str	r2, [r3]
 7555              	.L482:
 7556 0188 FB6A     		ldr	r3, [r7, #44]
 7557 018a 3B61     		str	r3, [r7, #16]
 7558              	.LBB230:
 7559              	.LBB231:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7560              		.loc 2 229 2
 7561 018c 3B69     		ldr	r3, [r7, #16]
 7562              		.syntax unified
 7563              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7564 018e 83F31188 			msr basepri, r3	
 7565              	@ 0 "" 2
 7566              		.loc 2 233 1
 7567              		.thumb
 7568              		.syntax unified
 7569 0192 00BF     		nop
 7570              	.LBE231:
 7571              	.LBE230:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7572              		.loc 1 5018 10
 7573 0194 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7574              		.loc 1 5019 2
 7575 0196 1846     		mov	r0, r3
 7576 0198 3837     		adds	r7, r7, #56
 7577              	.LCFI294:
 7578              		.cfi_def_cfa_offset 8
 7579 019a BD46     		mov	sp, r7
 7580              	.LCFI295:
ARM GAS  /tmp/ccad9K0d.s 			page 226


 7581              		.cfi_def_cfa_register 13
 7582              		@ sp needed
 7583 019c 80BD     		pop	{r7, pc}
 7584              	.L493:
 7585 019e 00BF     		.align	2
 7586              	.L492:
 7587 01a0 00000000 		.word	uxSchedulerSuspended
 7588 01a4 00000000 		.word	uxTopReadyPriority
 7589 01a8 00000000 		.word	pxReadyTasksLists
 7590 01ac 00000000 		.word	xPendingReadyList
 7591 01b0 00000000 		.word	pxCurrentTCB
 7592 01b4 00000000 		.word	xYieldPending
 7593              		.cfi_endproc
 7594              	.LFE61:
 7596              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7597              		.align	1
 7598              		.global	vTaskNotifyGiveFromISR
 7599              		.syntax unified
 7600              		.thumb
 7601              		.thumb_func
 7603              	vTaskNotifyGiveFromISR:
 7604              	.LFB62:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7605              		.loc 1 5027 2
 7606              		.cfi_startproc
 7607              		@ args = 0, pretend = 0, frame = 40
 7608              		@ frame_needed = 1, uses_anonymous_args = 0
 7609 0000 80B5     		push	{r7, lr}
 7610              	.LCFI296:
 7611              		.cfi_def_cfa_offset 8
 7612              		.cfi_offset 7, -8
 7613              		.cfi_offset 14, -4
 7614 0002 8AB0     		sub	sp, sp, #40
 7615              	.LCFI297:
 7616              		.cfi_def_cfa_offset 48
 7617 0004 00AF     		add	r7, sp, #0
 7618              	.LCFI298:
 7619              		.cfi_def_cfa_register 7
 7620 0006 7860     		str	r0, [r7, #4]
 7621 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7622              		.loc 1 5032 3
 7623 000a 7B68     		ldr	r3, [r7, #4]
 7624 000c 002B     		cmp	r3, #0
 7625 000e 0AD1     		bne	.L495
 7626              	.LBB232:
ARM GAS  /tmp/ccad9K0d.s 			page 227


 7627              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7628              		.loc 2 195 2
 7629              		.syntax unified
 7630              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7631 0010 4FF05003 			mov r3, #80												
 7632 0014 83F31188 		msr basepri, r3											
 7633 0018 BFF36F8F 		isb														
 7634 001c BFF34F8F 		dsb														
 7635              	
 7636              	@ 0 "" 2
 7637              		.thumb
 7638              		.syntax unified
 7639 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7640              		.loc 2 203 1
 7641 0022 00BF     		nop
 7642              	.L496:
 7643              	.LBE233:
 7644              	.LBE232:
 7645              		.loc 1 5032 3 discriminator 1
 7646 0024 FEE7     		b	.L496
 7647              	.L495:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7648              		.loc 1 5050 3
 7649 0026 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7650              		.loc 1 5052 9
 7651 002a 7B68     		ldr	r3, [r7, #4]
 7652 002c 7B62     		str	r3, [r7, #36]
 7653              	.LBB234:
 7654              	.LBB235:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7655              		.loc 2 211 2
 7656              		.syntax unified
 7657              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7658 002e EFF31182 			mrs r2, basepri											
 7659 0032 4FF05003 		mov r3, #80												
 7660 0036 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccad9K0d.s 			page 228


 7661 003a BFF36F8F 		isb														
 7662 003e BFF34F8F 		dsb														
 7663              	
 7664              	@ 0 "" 2
 7665              		.thumb
 7666              		.syntax unified
 7667 0042 7A61     		str	r2, [r7, #20]
 7668 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7669              		.loc 2 223 9
 7670 0046 7B69     		ldr	r3, [r7, #20]
 7671              	.LBE235:
 7672              	.LBE234:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7673              		.loc 1 5054 28
 7674 0048 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7675              		.loc 1 5056 26
 7676 004a 7B6A     		ldr	r3, [r7, #36]
 7677 004c 93F85830 		ldrb	r3, [r3, #88]
 7678 0050 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7679              		.loc 1 5057 25
 7680 0052 7B6A     		ldr	r3, [r7, #36]
 7681 0054 0222     		movs	r2, #2
 7682 0056 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7683              		.loc 1 5061 11
 7684 005a 7B6A     		ldr	r3, [r7, #36]
 7685 005c 5B6D     		ldr	r3, [r3, #84]
 7686              		.loc 1 5061 30
 7687 005e 5A1C     		adds	r2, r3, #1
 7688 0060 7B6A     		ldr	r3, [r7, #36]
 7689 0062 5A65     		str	r2, [r3, #84]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7690              		.loc 1 5067 6
 7691 0064 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7692 0066 012B     		cmp	r3, #1
 7693 0068 46D1     		bne	.L498
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7694              		.loc 1 5070 5
 7695 006a 7B6A     		ldr	r3, [r7, #36]
 7696 006c 9B6A     		ldr	r3, [r3, #40]
 7697 006e 002B     		cmp	r3, #0
 7698 0070 0AD0     		beq	.L499
ARM GAS  /tmp/ccad9K0d.s 			page 229


 7699              	.LBB236:
 7700              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7701              		.loc 2 195 2
 7702              		.syntax unified
 7703              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7704 0072 4FF05003 			mov r3, #80												
 7705 0076 83F31188 		msr basepri, r3											
 7706 007a BFF36F8F 		isb														
 7707 007e BFF34F8F 		dsb														
 7708              	
 7709              	@ 0 "" 2
 7710              		.thumb
 7711              		.syntax unified
 7712 0082 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7713              		.loc 2 203 1
 7714 0084 00BF     		nop
 7715              	.L500:
 7716              	.LBE237:
 7717              	.LBE236:
 7718              		.loc 1 5070 5 discriminator 2
 7719 0086 FEE7     		b	.L500
 7720              	.L499:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7721              		.loc 1 5072 30
 7722 0088 204B     		ldr	r3, .L505
 7723 008a 1B68     		ldr	r3, [r3]
 7724              		.loc 1 5072 7
 7725 008c 002B     		cmp	r3, #0
 7726 008e 1DD1     		bne	.L501
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7727              		.loc 1 5074 15
 7728 0090 7B6A     		ldr	r3, [r7, #36]
 7729 0092 0433     		adds	r3, r3, #4
 7730 0094 1846     		mov	r0, r3
 7731 0096 FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7732              		.loc 1 5075 6
 7733 009a 7B6A     		ldr	r3, [r7, #36]
 7734 009c DA6A     		ldr	r2, [r3, #44]
 7735 009e 1C4B     		ldr	r3, .L505+4
 7736 00a0 1B68     		ldr	r3, [r3]
 7737 00a2 9A42     		cmp	r2, r3
 7738 00a4 03D9     		bls	.L502
 7739              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7740 00a6 7B6A     		ldr	r3, [r7, #36]
 7741 00a8 DB6A     		ldr	r3, [r3, #44]
 7742 00aa 194A     		ldr	r2, .L505+4
 7743 00ac 1360     		str	r3, [r2]
 7744              	.L502:
 7745              		.loc 1 5075 6 discriminator 3
 7746 00ae 7B6A     		ldr	r3, [r7, #36]
 7747 00b0 DA6A     		ldr	r2, [r3, #44]
 7748 00b2 1346     		mov	r3, r2
ARM GAS  /tmp/ccad9K0d.s 			page 230


 7749 00b4 9B00     		lsls	r3, r3, #2
 7750 00b6 1344     		add	r3, r3, r2
 7751 00b8 9B00     		lsls	r3, r3, #2
 7752 00ba 164A     		ldr	r2, .L505+8
 7753 00bc 1A44     		add	r2, r2, r3
 7754 00be 7B6A     		ldr	r3, [r7, #36]
 7755 00c0 0433     		adds	r3, r3, #4
 7756 00c2 1946     		mov	r1, r3
 7757 00c4 1046     		mov	r0, r2
 7758 00c6 FFF7FEFF 		bl	vListInsertEnd
 7759 00ca 05E0     		b	.L503
 7760              	.L501:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7761              		.loc 1 5081 6 is_stmt 1
 7762 00cc 7B6A     		ldr	r3, [r7, #36]
 7763 00ce 1833     		adds	r3, r3, #24
 7764 00d0 1946     		mov	r1, r3
 7765 00d2 1148     		ldr	r0, .L505+12
 7766 00d4 FFF7FEFF 		bl	vListInsertEnd
 7767              	.L503:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7768              		.loc 1 5084 14
 7769 00d8 7B6A     		ldr	r3, [r7, #36]
 7770 00da DA6A     		ldr	r2, [r3, #44]
 7771              		.loc 1 5084 41
 7772 00dc 0F4B     		ldr	r3, .L505+16
 7773 00de 1B68     		ldr	r3, [r3]
 7774 00e0 DB6A     		ldr	r3, [r3, #44]
 7775              		.loc 1 5084 7
 7776 00e2 9A42     		cmp	r2, r3
 7777 00e4 08D9     		bls	.L498
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7778              		.loc 1 5088 8
 7779 00e6 3B68     		ldr	r3, [r7]
 7780 00e8 002B     		cmp	r3, #0
 7781 00ea 02D0     		beq	.L504
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7782              		.loc 1 5090 34
 7783 00ec 3B68     		ldr	r3, [r7]
 7784 00ee 0122     		movs	r2, #1
 7785 00f0 1A60     		str	r2, [r3]
 7786              	.L504:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
ARM GAS  /tmp/ccad9K0d.s 			page 231


5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7787              		.loc 1 5096 20
 7788 00f2 0B4B     		ldr	r3, .L505+20
 7789 00f4 0122     		movs	r2, #1
 7790 00f6 1A60     		str	r2, [r3]
 7791              	.L498:
 7792 00f8 3B6A     		ldr	r3, [r7, #32]
 7793 00fa BB60     		str	r3, [r7, #8]
 7794              	.LBB238:
 7795              	.LBB239:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7796              		.loc 2 229 2
 7797 00fc BB68     		ldr	r3, [r7, #8]
 7798              		.syntax unified
 7799              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7800 00fe 83F31188 			msr basepri, r3	
 7801              	@ 0 "" 2
 7802              		.loc 2 233 1
 7803              		.thumb
 7804              		.syntax unified
 7805 0102 00BF     		nop
 7806              	.LBE239:
 7807              	.LBE238:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7808              		.loc 1 5105 2
 7809 0104 00BF     		nop
 7810 0106 2837     		adds	r7, r7, #40
 7811              	.LCFI299:
 7812              		.cfi_def_cfa_offset 8
 7813 0108 BD46     		mov	sp, r7
 7814              	.LCFI300:
 7815              		.cfi_def_cfa_register 13
 7816              		@ sp needed
 7817 010a 80BD     		pop	{r7, pc}
 7818              	.L506:
 7819              		.align	2
 7820              	.L505:
 7821 010c 00000000 		.word	uxSchedulerSuspended
 7822 0110 00000000 		.word	uxTopReadyPriority
 7823 0114 00000000 		.word	pxReadyTasksLists
 7824 0118 00000000 		.word	xPendingReadyList
 7825 011c 00000000 		.word	pxCurrentTCB
 7826 0120 00000000 		.word	xYieldPending
 7827              		.cfi_endproc
 7828              	.LFE62:
 7830              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7831              		.align	1
 7832              		.global	xTaskNotifyStateClear
ARM GAS  /tmp/ccad9K0d.s 			page 232


 7833              		.syntax unified
 7834              		.thumb
 7835              		.thumb_func
 7837              	xTaskNotifyStateClear:
 7838              	.LFB63:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7839              		.loc 1 5113 2
 7840              		.cfi_startproc
 7841              		@ args = 0, pretend = 0, frame = 16
 7842              		@ frame_needed = 1, uses_anonymous_args = 0
 7843 0000 80B5     		push	{r7, lr}
 7844              	.LCFI301:
 7845              		.cfi_def_cfa_offset 8
 7846              		.cfi_offset 7, -8
 7847              		.cfi_offset 14, -4
 7848 0002 84B0     		sub	sp, sp, #16
 7849              	.LCFI302:
 7850              		.cfi_def_cfa_offset 24
 7851 0004 00AF     		add	r7, sp, #0
 7852              	.LCFI303:
 7853              		.cfi_def_cfa_register 7
 7854 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7855              		.loc 1 5119 11
 7856 0008 7B68     		ldr	r3, [r7, #4]
 7857 000a 002B     		cmp	r3, #0
 7858 000c 02D1     		bne	.L508
 7859              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7860 000e 0E4B     		ldr	r3, .L513
 7861 0010 1B68     		ldr	r3, [r3]
 7862 0012 00E0     		b	.L509
 7863              	.L508:
 7864              		.loc 1 5119 11 discriminator 2
 7865 0014 7B68     		ldr	r3, [r7, #4]
 7866              	.L509:
 7867              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7868 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7869              		.loc 1 5121 3 discriminator 4
 7870 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7871              		.loc 1 5123 13 discriminator 4
 7872 001c BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccad9K0d.s 			page 233


 7873 001e 93F85830 		ldrb	r3, [r3, #88]
 7874 0022 DBB2     		uxtb	r3, r3
 7875              		.loc 1 5123 6 discriminator 4
 7876 0024 022B     		cmp	r3, #2
 7877 0026 06D1     		bne	.L510
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7878              		.loc 1 5125 26
 7879 0028 BB68     		ldr	r3, [r7, #8]
 7880 002a 0022     		movs	r2, #0
 7881 002c 83F85820 		strb	r2, [r3, #88]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7882              		.loc 1 5126 13
 7883 0030 0123     		movs	r3, #1
 7884 0032 FB60     		str	r3, [r7, #12]
 7885 0034 01E0     		b	.L511
 7886              	.L510:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7887              		.loc 1 5130 13
 7888 0036 0023     		movs	r3, #0
 7889 0038 FB60     		str	r3, [r7, #12]
 7890              	.L511:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7891              		.loc 1 5133 3
 7892 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7893              		.loc 1 5135 10
 7894 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7895              		.loc 1 5136 2
 7896 0040 1846     		mov	r0, r3
 7897 0042 1037     		adds	r7, r7, #16
 7898              	.LCFI304:
 7899              		.cfi_def_cfa_offset 8
 7900 0044 BD46     		mov	sp, r7
 7901              	.LCFI305:
 7902              		.cfi_def_cfa_register 13
 7903              		@ sp needed
 7904 0046 80BD     		pop	{r7, pc}
 7905              	.L514:
 7906              		.align	2
 7907              	.L513:
 7908 0048 00000000 		.word	pxCurrentTCB
 7909              		.cfi_endproc
 7910              	.LFE63:
 7912              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7913              		.align	1
 7914              		.global	ulTaskNotifyValueClear
 7915              		.syntax unified
 7916              		.thumb
 7917              		.thumb_func
ARM GAS  /tmp/ccad9K0d.s 			page 234


 7919              	ulTaskNotifyValueClear:
 7920              	.LFB64:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7921              		.loc 1 5144 2
 7922              		.cfi_startproc
 7923              		@ args = 0, pretend = 0, frame = 16
 7924              		@ frame_needed = 1, uses_anonymous_args = 0
 7925 0000 80B5     		push	{r7, lr}
 7926              	.LCFI306:
 7927              		.cfi_def_cfa_offset 8
 7928              		.cfi_offset 7, -8
 7929              		.cfi_offset 14, -4
 7930 0002 84B0     		sub	sp, sp, #16
 7931              	.LCFI307:
 7932              		.cfi_def_cfa_offset 24
 7933 0004 00AF     		add	r7, sp, #0
 7934              	.LCFI308:
 7935              		.cfi_def_cfa_register 7
 7936 0006 7860     		str	r0, [r7, #4]
 7937 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7938              		.loc 1 5150 11
 7939 000a 7B68     		ldr	r3, [r7, #4]
 7940 000c 002B     		cmp	r3, #0
 7941 000e 02D1     		bne	.L516
 7942              		.loc 1 5150 11 is_stmt 0 discriminator 1
 7943 0010 0C4B     		ldr	r3, .L519
 7944 0012 1B68     		ldr	r3, [r3]
 7945 0014 00E0     		b	.L517
 7946              	.L516:
 7947              		.loc 1 5150 11 discriminator 2
 7948 0016 7B68     		ldr	r3, [r7, #4]
 7949              	.L517:
 7950              		.loc 1 5150 9 is_stmt 1 discriminator 4
 7951 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7952              		.loc 1 5152 3 discriminator 4
 7953 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7954              		.loc 1 5156 27 discriminator 4
 7955 001e 094B     		ldr	r3, .L519
ARM GAS  /tmp/ccad9K0d.s 			page 235


 7956 0020 1B68     		ldr	r3, [r3]
 7957              		.loc 1 5156 13 discriminator 4
 7958 0022 5B6D     		ldr	r3, [r3, #84]
 7959 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 7960              		.loc 1 5157 27 discriminator 4
 7961 0026 FB68     		ldr	r3, [r7, #12]
 7962 0028 5A6D     		ldr	r2, [r3, #84]
 7963              		.loc 1 5157 30 discriminator 4
 7964 002a 3B68     		ldr	r3, [r7]
 7965 002c DB43     		mvns	r3, r3
 7966              		.loc 1 5157 27 discriminator 4
 7967 002e 1A40     		ands	r2, r2, r3
 7968 0030 FB68     		ldr	r3, [r7, #12]
 7969 0032 5A65     		str	r2, [r3, #84]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7970              		.loc 1 5159 3 discriminator 4
 7971 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7972              		.loc 1 5161 10 discriminator 4
 7973 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7974              		.loc 1 5162 2 discriminator 4
 7975 003a 1846     		mov	r0, r3
 7976 003c 1037     		adds	r7, r7, #16
 7977              	.LCFI309:
 7978              		.cfi_def_cfa_offset 8
 7979 003e BD46     		mov	sp, r7
 7980              	.LCFI310:
 7981              		.cfi_def_cfa_register 13
 7982              		@ sp needed
 7983 0040 80BD     		pop	{r7, pc}
 7984              	.L520:
 7985 0042 00BF     		.align	2
 7986              	.L519:
 7987 0044 00000000 		.word	pxCurrentTCB
 7988              		.cfi_endproc
 7989              	.LFE64:
 7991              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 7992              		.align	1
 7993              		.syntax unified
 7994              		.thumb
 7995              		.thumb_func
 7997              	prvAddCurrentTaskToDelayedList:
 7998              	.LFB65:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccad9K0d.s 			page 236


5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7999              		.loc 1 5178 1
 8000              		.cfi_startproc
 8001              		@ args = 0, pretend = 0, frame = 16
 8002              		@ frame_needed = 1, uses_anonymous_args = 0
 8003 0000 80B5     		push	{r7, lr}
 8004              	.LCFI311:
 8005              		.cfi_def_cfa_offset 8
 8006              		.cfi_offset 7, -8
 8007              		.cfi_offset 14, -4
 8008 0002 84B0     		sub	sp, sp, #16
 8009              	.LCFI312:
 8010              		.cfi_def_cfa_offset 24
 8011 0004 00AF     		add	r7, sp, #0
 8012              	.LCFI313:
 8013              		.cfi_def_cfa_register 7
 8014 0006 7860     		str	r0, [r7, #4]
 8015 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8016              		.loc 1 5180 18
 8017 000a 214B     		ldr	r3, .L526
 8018 000c 1B68     		ldr	r3, [r3]
 8019 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020              		.loc 1 5193 35
 8021 0010 204B     		ldr	r3, .L526+4
 8022 0012 1B68     		ldr	r3, [r3]
 8023              		.loc 1 5193 6
 8024 0014 0433     		adds	r3, r3, #4
 8025 0016 1846     		mov	r0, r3
 8026 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccad9K0d.s 			page 237


5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8027              		.loc 1 5206 5
 8028 001c 7B68     		ldr	r3, [r7, #4]
 8029 001e B3F1FF3F 		cmp	r3, #-1
 8030 0022 0AD1     		bne	.L522
 8031              		.loc 1 5206 41 discriminator 1
 8032 0024 3B68     		ldr	r3, [r7]
 8033 0026 002B     		cmp	r3, #0
 8034 0028 07D0     		beq	.L522
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8035              		.loc 1 5211 56
 8036 002a 1A4B     		ldr	r3, .L526+4
 8037 002c 1B68     		ldr	r3, [r3]
 8038              		.loc 1 5211 4
 8039 002e 0433     		adds	r3, r3, #4
 8040 0030 1946     		mov	r1, r3
 8041 0032 1948     		ldr	r0, .L526+8
 8042 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccad9K0d.s 			page 238


5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8043              		.loc 1 5286 1
 8044 0038 26E0     		b	.L525
 8045              	.L522:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8046              		.loc 1 5218 16
 8047 003a FA68     		ldr	r2, [r7, #12]
 8048 003c 7B68     		ldr	r3, [r7, #4]
 8049 003e 1344     		add	r3, r3, r2
 8050 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8051              		.loc 1 5221 4
 8052 0042 144B     		ldr	r3, .L526+4
 8053 0044 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccad9K0d.s 			page 239


 8054 0046 BA68     		ldr	r2, [r7, #8]
 8055 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8056              		.loc 1 5223 6
 8057 004a BA68     		ldr	r2, [r7, #8]
 8058 004c FB68     		ldr	r3, [r7, #12]
 8059 004e 9A42     		cmp	r2, r3
 8060 0050 09D2     		bcs	.L524
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8061              		.loc 1 5227 5
 8062 0052 124B     		ldr	r3, .L526+12
 8063 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8064              		.loc 1 5227 60
 8065 0056 0F4B     		ldr	r3, .L526+4
 8066 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8067              		.loc 1 5227 5
 8068 005a 0433     		adds	r3, r3, #4
 8069 005c 1946     		mov	r1, r3
 8070 005e 1046     		mov	r0, r2
 8071 0060 FFF7FEFF 		bl	vListInsert
 8072              		.loc 1 5286 1
 8073 0064 10E0     		b	.L525
 8074              	.L524:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8075              		.loc 1 5233 5
 8076 0066 0E4B     		ldr	r3, .L526+16
 8077 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8078              		.loc 1 5233 52
 8079 006a 0A4B     		ldr	r3, .L526+4
 8080 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8081              		.loc 1 5233 5
 8082 006e 0433     		adds	r3, r3, #4
 8083 0070 1946     		mov	r1, r3
 8084 0072 1046     		mov	r0, r2
 8085 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8086              		.loc 1 5238 21
 8087 0078 0A4B     		ldr	r3, .L526+20
 8088 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8089              		.loc 1 5238 7
 8090 007c BA68     		ldr	r2, [r7, #8]
 8091 007e 9A42     		cmp	r2, r3
 8092 0080 02D2     		bcs	.L525
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8093              		.loc 1 5240 27
 8094 0082 084A     		ldr	r2, .L526+20
 8095 0084 BB68     		ldr	r3, [r7, #8]
 8096 0086 1360     		str	r3, [r2]
 8097              	.L525:
 8098              		.loc 1 5286 1
 8099 0088 00BF     		nop
 8100 008a 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccad9K0d.s 			page 240


 8101              	.LCFI314:
 8102              		.cfi_def_cfa_offset 8
 8103 008c BD46     		mov	sp, r7
 8104              	.LCFI315:
 8105              		.cfi_def_cfa_register 13
 8106              		@ sp needed
 8107 008e 80BD     		pop	{r7, pc}
 8108              	.L527:
 8109              		.align	2
 8110              	.L526:
 8111 0090 00000000 		.word	xTickCount
 8112 0094 00000000 		.word	pxCurrentTCB
 8113 0098 00000000 		.word	xSuspendedTaskList
 8114 009c 00000000 		.word	pxOverflowDelayedTaskList
 8115 00a0 00000000 		.word	pxDelayedTaskList
 8116 00a4 00000000 		.word	xNextTaskUnblockTime
 8117              		.cfi_endproc
 8118              	.LFE65:
 8120              		.text
 8121              	.Letext0:
 8122              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 8123              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 8124              		.file 5 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 8125              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8126              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8127              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8128              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccad9K0d.s 			page 241


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccad9K0d.s:24     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccad9K0d.s:21     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccad9K0d.s:27     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccad9K0d.s:30     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccad9K0d.s:33     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccad9K0d.s:36     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccad9K0d.s:39     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccad9K0d.s:42     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccad9K0d.s:45     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccad9K0d.s:48     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccad9K0d.s:51     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccad9K0d.s:54     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccad9K0d.s:57     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccad9K0d.s:60     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccad9K0d.s:63     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccad9K0d.s:66     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccad9K0d.s:69     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccad9K0d.s:72     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccad9K0d.s:75     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccad9K0d.s:78     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccad9K0d.s:81     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccad9K0d.s:84     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccad9K0d.s:87     .bss.xTickCount:0000000000000000 $d
     /tmp/ccad9K0d.s:90     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccad9K0d.s:93     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccad9K0d.s:96     .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccad9K0d.s:99     .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccad9K0d.s:102    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccad9K0d.s:105    .bss.xPendedTicks:0000000000000000 $d
     /tmp/ccad9K0d.s:108    .bss.xPendedTicks:0000000000000000 xPendedTicks
     /tmp/ccad9K0d.s:111    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccad9K0d.s:114    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccad9K0d.s:117    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccad9K0d.s:120    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccad9K0d.s:123    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccad9K0d.s:126    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccad9K0d.s:129    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccad9K0d.s:132    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccad9K0d.s:135    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccad9K0d.s:138    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccad9K0d.s:141    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccad9K0d.s:144    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccad9K0d.s:147    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccad9K0d.s:153    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccad9K0d.s:438    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccad9K0d.s:655    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccad9K0d.s:319    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccad9K0d.s:325    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccad9K0d.s:433    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccad9K0d.s:650    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccad9K0d.s:5125   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccad9K0d.s:805    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/ccad9K0d.s:816    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccad9K0d.s:822    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccad9K0d.s:5745   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
ARM GAS  /tmp/ccad9K0d.s 			page 242


     /tmp/ccad9K0d.s:5839   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccad9K0d.s:981    .text.vTaskDelete:00000000000000c4 $d
     /tmp/ccad9K0d.s:993    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccad9K0d.s:999    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccad9K0d.s:2776   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccad9K0d.s:7997   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccad9K0d.s:2822   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccad9K0d.s:1206   .text.vTaskDelayUntil:00000000000000f0 $d
     /tmp/ccad9K0d.s:1213   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccad9K0d.s:1219   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccad9K0d.s:1312   .text.vTaskDelay:0000000000000060 $d
     /tmp/ccad9K0d.s:1318   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccad9K0d.s:1324   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccad9K0d.s:1482   .text.eTaskGetState:00000000000000b8 $d
     /tmp/ccad9K0d.s:1491   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccad9K0d.s:1497   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccad9K0d.s:1552   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccad9K0d.s:1557   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccad9K0d.s:1563   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccad9K0d.s:1654   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccad9K0d.s:1659   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccad9K0d.s:1665   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccad9K0d.s:1895   .text.vTaskPrioritySet:000000000000012c $d
     /tmp/ccad9K0d.s:1903   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccad9K0d.s:1909   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccad9K0d.s:3837   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccad9K0d.s:2081   .text.vTaskSuspend:00000000000000d4 $d
     /tmp/ccad9K0d.s:2091   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccad9K0d.s:2096   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccad9K0d.s:2189   .text.prvTaskIsTaskSuspended:000000000000005c $d
     /tmp/ccad9K0d.s:2195   .text.vTaskResume:0000000000000000 $t
     /tmp/ccad9K0d.s:2201   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccad9K0d.s:2340   .text.vTaskResume:00000000000000ac $d
     /tmp/ccad9K0d.s:2348   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccad9K0d.s:2354   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccad9K0d.s:2527   .text.xTaskResumeFromISR:00000000000000d0 $d
     /tmp/ccad9K0d.s:2536   .rodata:0000000000000000 $d
     /tmp/ccad9K0d.s:2540   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccad9K0d.s:2546   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccad9K0d.s:2695   .text.vTaskStartScheduler:00000000000000b4 $d
     /tmp/ccad9K0d.s:5069   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccad9K0d.s:2705   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccad9K0d.s:2711   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccad9K0d.s:2765   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccad9K0d.s:2770   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccad9K0d.s:2811   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccad9K0d.s:2816   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccad9K0d.s:3570   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccad9K0d.s:3041   .text.xTaskResumeAll:0000000000000118 $d
     /tmp/ccad9K0d.s:3054   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccad9K0d.s:3060   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccad9K0d.s:3100   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccad9K0d.s:3105   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccad9K0d.s:3111   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccad9K0d.s:3152   .text.xTaskGetTickCountFromISR:0000000000000020 $d
     /tmp/ccad9K0d.s:3157   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccad9K0d.s:3163   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
ARM GAS  /tmp/ccad9K0d.s 			page 243


     /tmp/ccad9K0d.s:3194   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccad9K0d.s:3199   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccad9K0d.s:3205   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccad9K0d.s:3283   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccad9K0d.s:3288   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccad9K0d.s:3294   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccad9K0d.s:5476   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccad9K0d.s:3467   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/ccad9K0d.s:3477   .text.xTaskCatchUpTicks:0000000000000000 $t
     /tmp/ccad9K0d.s:3483   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
     /tmp/ccad9K0d.s:3558   .text.xTaskCatchUpTicks:000000000000004c $d
     /tmp/ccad9K0d.s:3564   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccad9K0d.s:3816   .text.xTaskIncrementTick:0000000000000148 $d
     /tmp/ccad9K0d.s:3831   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccad9K0d.s:3977   .text.vTaskSwitchContext:00000000000000a8 $d
     /tmp/ccad9K0d.s:3986   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccad9K0d.s:3992   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccad9K0d.s:4062   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccad9K0d.s:4067   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccad9K0d.s:4073   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccad9K0d.s:4177   .text.vTaskPlaceOnUnorderedEventList:0000000000000070 $d
     /tmp/ccad9K0d.s:4183   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccad9K0d.s:4189   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccad9K0d.s:4268   .text.vTaskPlaceOnEventListRestricted:0000000000000054 $d
     /tmp/ccad9K0d.s:4273   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccad9K0d.s:4279   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccad9K0d.s:4419   .text.xTaskRemoveFromEventList:00000000000000b0 $d
     /tmp/ccad9K0d.s:4429   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccad9K0d.s:4435   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccad9K0d.s:4579   .text.vTaskRemoveFromUnorderedEventList:00000000000000b0 $d
     /tmp/ccad9K0d.s:4588   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccad9K0d.s:4594   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccad9K0d.s:4665   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccad9K0d.s:4671   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccad9K0d.s:4677   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccad9K0d.s:4722   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccad9K0d.s:4728   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccad9K0d.s:4734   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccad9K0d.s:4899   .text.xTaskCheckForTimeOut:00000000000000bc $d
     /tmp/ccad9K0d.s:4905   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccad9K0d.s:4911   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccad9K0d.s:4943   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccad9K0d.s:4948   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccad9K0d.s:4954   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccad9K0d.s:5009   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccad9K0d.s:5015   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccad9K0d.s:5064   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccad9K0d.s:5220   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccad9K0d.s:5114   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccad9K0d.s:5120   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccad9K0d.s:5203   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccad9K0d.s:5215   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccad9K0d.s:5293   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccad9K0d.s:5300   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccad9K0d.s:5306   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccad9K0d.s:5608   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccad9K0d.s:5466   .text.vTaskGetInfo:00000000000000c8 $d
ARM GAS  /tmp/ccad9K0d.s 			page 244


     /tmp/ccad9K0d.s:5471   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccad9K0d.s:5603   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccad9K0d.s:5672   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccad9K0d.s:5678   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccad9K0d.s:5735   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/ccad9K0d.s:5740   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccad9K0d.s:5834   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccad9K0d.s:5901   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccad9K0d.s:5907   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccad9K0d.s:5913   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccad9K0d.s:5953   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccad9K0d.s:5958   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccad9K0d.s:5964   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccad9K0d.s:6026   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccad9K0d.s:6032   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccad9K0d.s:6038   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccad9K0d.s:6187   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/ccad9K0d.s:6194   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccad9K0d.s:6200   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccad9K0d.s:6368   .text.xTaskPriorityDisinherit:00000000000000d0 $d
     /tmp/ccad9K0d.s:6375   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccad9K0d.s:6381   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccad9K0d.s:6575   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f8 $d
     /tmp/ccad9K0d.s:6582   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccad9K0d.s:6588   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccad9K0d.s:6638   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccad9K0d.s:6643   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccad9K0d.s:6649   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccad9K0d.s:6694   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccad9K0d.s:6699   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccad9K0d.s:6705   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccad9K0d.s:6819   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccad9K0d.s:6825   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccad9K0d.s:6831   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccad9K0d.s:6966   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccad9K0d.s:6972   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccad9K0d.s:6978   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccad9K0d.s:7061   .text.xTaskGenericNotify:0000000000000064 $d
     /tmp/ccad9K0d.s:7066   .text.xTaskGenericNotify:0000000000000078 $t
     /tmp/ccad9K0d.s:7250   .text.xTaskGenericNotify:0000000000000160 $d
     /tmp/ccad9K0d.s:7258   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccad9K0d.s:7264   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccad9K0d.s:7369   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccad9K0d.s:7374   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccad9K0d.s:7587   .text.xTaskGenericNotifyFromISR:00000000000001a0 $d
     /tmp/ccad9K0d.s:7597   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccad9K0d.s:7603   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccad9K0d.s:7821   .text.vTaskNotifyGiveFromISR:000000000000010c $d
     /tmp/ccad9K0d.s:7831   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccad9K0d.s:7837   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccad9K0d.s:7908   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccad9K0d.s:7913   .text.ulTaskNotifyValueClear:0000000000000000 $t
     /tmp/ccad9K0d.s:7919   .text.ulTaskNotifyValueClear:0000000000000000 ulTaskNotifyValueClear
     /tmp/ccad9K0d.s:7987   .text.ulTaskNotifyValueClear:0000000000000044 $d
     /tmp/ccad9K0d.s:7992   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccad9K0d.s:8111   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
ARM GAS  /tmp/ccad9K0d.s 			page 245


                           .group:0000000000000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:0000000000000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.181.13772e73e5434e8cc4fafaaddad2b5da
                           .group:0000000000000000 wm4.stddef.h.39.cf3ebec0bc8c9e3d2f276a64e0fe5e7a
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.cdefs.h.49.39045112216f6a021dbdffe3bf5accce
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.32.4ce7705d979f62bb24ea30fd18d4c94f
                           .group:0000000000000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:0000000000000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:0000000000000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:0000000000000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a17c2bf78722c1d7b86ba8d45e5b5f29
                           .group:0000000000000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:0000000000000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:0000000000000000 wm4.timers.h.54.4ae1ba250ac92e2885786e6070ecf197
                           .group:0000000000000000 wm4.stack_macros.h.29.6b7843e188f2d273e6836785e6906ca7

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vListInitialise
