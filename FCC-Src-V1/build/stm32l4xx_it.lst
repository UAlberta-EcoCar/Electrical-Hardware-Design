ARM GAS  /tmp/ccHqAfIK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB132:
  28              		.file 1 "Core/Src/stm32l4xx_it.c"
   1:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l4xx_it.c **** /**
   3:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   5:Core/Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l4xx_it.c ****   * @attention
   8:Core/Src/stm32l4xx_it.c ****   *
   9:Core/Src/stm32l4xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32l4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32l4xx_it.c ****   *
  12:Core/Src/stm32l4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32l4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32l4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32l4xx_it.c ****   *
  16:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32l4xx_it.c ****   */
  18:Core/Src/stm32l4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32l4xx_it.c **** 
  20:Core/Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32l4xx_it.c **** #include "main.h"
  22:Core/Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  23:Core/Src/stm32l4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32l4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32l4xx_it.c **** 
  27:Core/Src/stm32l4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32l4xx_it.c **** 
  30:Core/Src/stm32l4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccHqAfIK.s 			page 2


  31:Core/Src/stm32l4xx_it.c **** 
  32:Core/Src/stm32l4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32l4xx_it.c **** 
  35:Core/Src/stm32l4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32l4xx_it.c **** 
  37:Core/Src/stm32l4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32l4xx_it.c **** 
  40:Core/Src/stm32l4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32l4xx_it.c **** 
  42:Core/Src/stm32l4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32l4xx_it.c **** 
  45:Core/Src/stm32l4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32l4xx_it.c **** 
  47:Core/Src/stm32l4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32l4xx_it.c **** 
  50:Core/Src/stm32l4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32l4xx_it.c **** 
  52:Core/Src/stm32l4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32l4xx_it.c **** 
  55:Core/Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32l4xx_it.c **** 
  57:Core/Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32l4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  59:Core/Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_rx;
  60:Core/Src/stm32l4xx_it.c **** extern DMA_HandleTypeDef hdma_usart1_tx;
  61:Core/Src/stm32l4xx_it.c **** extern UART_HandleTypeDef huart1;
  62:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim1;
  63:Core/Src/stm32l4xx_it.c **** 
  64:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32l4xx_it.c **** 
  66:Core/Src/stm32l4xx_it.c **** /* USER CODE END EV */
  67:Core/Src/stm32l4xx_it.c **** 
  68:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  69:Core/Src/stm32l4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  70:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  71:Core/Src/stm32l4xx_it.c **** /**
  72:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  73:Core/Src/stm32l4xx_it.c ****   */
  74:Core/Src/stm32l4xx_it.c **** void NMI_Handler(void)
  75:Core/Src/stm32l4xx_it.c **** {
  29              		.loc 1 75 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccHqAfIK.s 			page 3


  41              	.L2:
  76:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  77:Core/Src/stm32l4xx_it.c **** 
  78:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  79:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  80:Core/Src/stm32l4xx_it.c ****    while (1)
  42              		.loc 1 80 10 discriminator 1
  43 0004 FEE7     		b	.L2
  44              		.cfi_endproc
  45              	.LFE132:
  47              		.section	.text.HardFault_Handler,"ax",%progbits
  48              		.align	1
  49              		.global	HardFault_Handler
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	HardFault_Handler:
  55              	.LFB133:
  81:Core/Src/stm32l4xx_it.c ****   {
  82:Core/Src/stm32l4xx_it.c ****   }
  83:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  84:Core/Src/stm32l4xx_it.c **** }
  85:Core/Src/stm32l4xx_it.c **** 
  86:Core/Src/stm32l4xx_it.c **** /**
  87:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  88:Core/Src/stm32l4xx_it.c ****   */
  89:Core/Src/stm32l4xx_it.c **** void HardFault_Handler(void)
  90:Core/Src/stm32l4xx_it.c **** {
  56              		.loc 1 90 1
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI2:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI3:
  67              		.cfi_def_cfa_register 7
  68              	.L4:
  91:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  92:Core/Src/stm32l4xx_it.c **** 
  93:Core/Src/stm32l4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  94:Core/Src/stm32l4xx_it.c ****   while (1)
  69              		.loc 1 94 9 discriminator 1
  70 0004 FEE7     		b	.L4
  71              		.cfi_endproc
  72              	.LFE133:
  74              		.section	.text.MemManage_Handler,"ax",%progbits
  75              		.align	1
  76              		.global	MemManage_Handler
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	MemManage_Handler:
  82              	.LFB134:
ARM GAS  /tmp/ccHqAfIK.s 			page 4


  95:Core/Src/stm32l4xx_it.c ****   {
  96:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  97:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  98:Core/Src/stm32l4xx_it.c ****   }
  99:Core/Src/stm32l4xx_it.c **** }
 100:Core/Src/stm32l4xx_it.c **** 
 101:Core/Src/stm32l4xx_it.c **** /**
 102:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Memory management fault.
 103:Core/Src/stm32l4xx_it.c ****   */
 104:Core/Src/stm32l4xx_it.c **** void MemManage_Handler(void)
 105:Core/Src/stm32l4xx_it.c **** {
  83              		.loc 1 105 1
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88 0000 80B4     		push	{r7}
  89              	.LCFI4:
  90              		.cfi_def_cfa_offset 4
  91              		.cfi_offset 7, -4
  92 0002 00AF     		add	r7, sp, #0
  93              	.LCFI5:
  94              		.cfi_def_cfa_register 7
  95              	.L6:
 106:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 107:Core/Src/stm32l4xx_it.c **** 
 108:Core/Src/stm32l4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 109:Core/Src/stm32l4xx_it.c ****   while (1)
  96              		.loc 1 109 9 discriminator 1
  97 0004 FEE7     		b	.L6
  98              		.cfi_endproc
  99              	.LFE134:
 101              		.section	.text.BusFault_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	BusFault_Handler
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	BusFault_Handler:
 109              	.LFB135:
 110:Core/Src/stm32l4xx_it.c ****   {
 111:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 113:Core/Src/stm32l4xx_it.c ****   }
 114:Core/Src/stm32l4xx_it.c **** }
 115:Core/Src/stm32l4xx_it.c **** 
 116:Core/Src/stm32l4xx_it.c **** /**
 117:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 118:Core/Src/stm32l4xx_it.c ****   */
 119:Core/Src/stm32l4xx_it.c **** void BusFault_Handler(void)
 120:Core/Src/stm32l4xx_it.c **** {
 110              		.loc 1 120 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccHqAfIK.s 			page 5


 116              	.LCFI6:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
 119 0002 00AF     		add	r7, sp, #0
 120              	.LCFI7:
 121              		.cfi_def_cfa_register 7
 122              	.L8:
 121:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 122:Core/Src/stm32l4xx_it.c **** 
 123:Core/Src/stm32l4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 124:Core/Src/stm32l4xx_it.c ****   while (1)
 123              		.loc 1 124 9 discriminator 1
 124 0004 FEE7     		b	.L8
 125              		.cfi_endproc
 126              	.LFE135:
 128              		.section	.text.UsageFault_Handler,"ax",%progbits
 129              		.align	1
 130              		.global	UsageFault_Handler
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	UsageFault_Handler:
 136              	.LFB136:
 125:Core/Src/stm32l4xx_it.c ****   {
 126:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 127:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 128:Core/Src/stm32l4xx_it.c ****   }
 129:Core/Src/stm32l4xx_it.c **** }
 130:Core/Src/stm32l4xx_it.c **** 
 131:Core/Src/stm32l4xx_it.c **** /**
 132:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 133:Core/Src/stm32l4xx_it.c ****   */
 134:Core/Src/stm32l4xx_it.c **** void UsageFault_Handler(void)
 135:Core/Src/stm32l4xx_it.c **** {
 137              		.loc 1 135 1
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 80B4     		push	{r7}
 143              	.LCFI8:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 00AF     		add	r7, sp, #0
 147              	.LCFI9:
 148              		.cfi_def_cfa_register 7
 149              	.L10:
 136:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 137:Core/Src/stm32l4xx_it.c **** 
 138:Core/Src/stm32l4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 139:Core/Src/stm32l4xx_it.c ****   while (1)
 150              		.loc 1 139 9 discriminator 1
 151 0004 FEE7     		b	.L10
 152              		.cfi_endproc
 153              	.LFE136:
 155              		.section	.text.DebugMon_Handler,"ax",%progbits
 156              		.align	1
ARM GAS  /tmp/ccHqAfIK.s 			page 6


 157              		.global	DebugMon_Handler
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 162              	DebugMon_Handler:
 163              	.LFB137:
 140:Core/Src/stm32l4xx_it.c ****   {
 141:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 143:Core/Src/stm32l4xx_it.c ****   }
 144:Core/Src/stm32l4xx_it.c **** }
 145:Core/Src/stm32l4xx_it.c **** 
 146:Core/Src/stm32l4xx_it.c **** /**
 147:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Debug monitor.
 148:Core/Src/stm32l4xx_it.c ****   */
 149:Core/Src/stm32l4xx_it.c **** void DebugMon_Handler(void)
 150:Core/Src/stm32l4xx_it.c **** {
 164              		.loc 1 150 1
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI10:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI11:
 175              		.cfi_def_cfa_register 7
 151:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 152:Core/Src/stm32l4xx_it.c **** 
 153:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 154:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 155:Core/Src/stm32l4xx_it.c **** 
 156:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 157:Core/Src/stm32l4xx_it.c **** }
 176              		.loc 1 157 1
 177 0004 00BF     		nop
 178 0006 BD46     		mov	sp, r7
 179              	.LCFI12:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0008 5DF8047B 		ldr	r7, [sp], #4
 183              	.LCFI13:
 184              		.cfi_restore 7
 185              		.cfi_def_cfa_offset 0
 186 000c 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE137:
 190              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 191              		.align	1
 192              		.global	EXTI3_IRQHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	EXTI3_IRQHandler:
 198              	.LFB138:
ARM GAS  /tmp/ccHqAfIK.s 			page 7


 158:Core/Src/stm32l4xx_it.c **** 
 159:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 160:Core/Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
 161:Core/Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 162:Core/Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 163:Core/Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
 164:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 165:Core/Src/stm32l4xx_it.c **** 
 166:Core/Src/stm32l4xx_it.c **** /**
 167:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line3 interrupt.
 168:Core/Src/stm32l4xx_it.c ****   */
 169:Core/Src/stm32l4xx_it.c **** void EXTI3_IRQHandler(void)
 170:Core/Src/stm32l4xx_it.c **** {
 199              		.loc 1 170 1
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 80B5     		push	{r7, lr}
 204              	.LCFI14:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 00AF     		add	r7, sp, #0
 209              	.LCFI15:
 210              		.cfi_def_cfa_register 7
 171:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 0 */
 172:Core/Src/stm32l4xx_it.c **** 
 173:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI3_IRQn 0 */
 174:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(EXT_STRT_Pin);
 211              		.loc 1 174 3
 212 0004 0820     		movs	r0, #8
 213 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 175:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 1 */
 176:Core/Src/stm32l4xx_it.c **** 
 177:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI3_IRQn 1 */
 178:Core/Src/stm32l4xx_it.c **** }
 214              		.loc 1 178 1
 215 000a 00BF     		nop
 216 000c 80BD     		pop	{r7, pc}
 217              		.cfi_endproc
 218              	.LFE138:
 220              		.section	.text.EXTI4_IRQHandler,"ax",%progbits
 221              		.align	1
 222              		.global	EXTI4_IRQHandler
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	EXTI4_IRQHandler:
 228              	.LFB139:
 179:Core/Src/stm32l4xx_it.c **** 
 180:Core/Src/stm32l4xx_it.c **** /**
 181:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line4 interrupt.
 182:Core/Src/stm32l4xx_it.c ****   */
 183:Core/Src/stm32l4xx_it.c **** void EXTI4_IRQHandler(void)
 184:Core/Src/stm32l4xx_it.c **** {
 229              		.loc 1 184 1
 230              		.cfi_startproc
ARM GAS  /tmp/ccHqAfIK.s 			page 8


 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
 234              	.LCFI16:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 00AF     		add	r7, sp, #0
 239              	.LCFI17:
 240              		.cfi_def_cfa_register 7
 185:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 0 */
 186:Core/Src/stm32l4xx_it.c **** 
 187:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI4_IRQn 0 */
 188:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 241              		.loc 1 188 3
 242 0004 1020     		movs	r0, #16
 243 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 189:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 1 */
 190:Core/Src/stm32l4xx_it.c **** 
 191:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI4_IRQn 1 */
 192:Core/Src/stm32l4xx_it.c **** }
 244              		.loc 1 192 1
 245 000a 00BF     		nop
 246 000c 80BD     		pop	{r7, pc}
 247              		.cfi_endproc
 248              	.LFE139:
 250              		.section	.text.DMA1_Channel4_IRQHandler,"ax",%progbits
 251              		.align	1
 252              		.global	DMA1_Channel4_IRQHandler
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 257              	DMA1_Channel4_IRQHandler:
 258              	.LFB140:
 193:Core/Src/stm32l4xx_it.c **** 
 194:Core/Src/stm32l4xx_it.c **** /**
 195:Core/Src/stm32l4xx_it.c ****   * @brief This function handles DMA1 channel4 global interrupt.
 196:Core/Src/stm32l4xx_it.c ****   */
 197:Core/Src/stm32l4xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 198:Core/Src/stm32l4xx_it.c **** {
 259              		.loc 1 198 1
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 80B5     		push	{r7, lr}
 264              	.LCFI18:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 00AF     		add	r7, sp, #0
 269              	.LCFI19:
 270              		.cfi_def_cfa_register 7
 199:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 200:Core/Src/stm32l4xx_it.c **** 
 201:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 202:Core/Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_tx);
 271              		.loc 1 202 3
ARM GAS  /tmp/ccHqAfIK.s 			page 9


 272 0004 0248     		ldr	r0, .L15
 273 0006 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 203:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 204:Core/Src/stm32l4xx_it.c **** 
 205:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 206:Core/Src/stm32l4xx_it.c **** }
 274              		.loc 1 206 1
 275 000a 00BF     		nop
 276 000c 80BD     		pop	{r7, pc}
 277              	.L16:
 278 000e 00BF     		.align	2
 279              	.L15:
 280 0010 00000000 		.word	hdma_usart1_tx
 281              		.cfi_endproc
 282              	.LFE140:
 284              		.section	.text.DMA1_Channel5_IRQHandler,"ax",%progbits
 285              		.align	1
 286              		.global	DMA1_Channel5_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	DMA1_Channel5_IRQHandler:
 292              	.LFB141:
 207:Core/Src/stm32l4xx_it.c **** 
 208:Core/Src/stm32l4xx_it.c **** /**
 209:Core/Src/stm32l4xx_it.c ****   * @brief This function handles DMA1 channel5 global interrupt.
 210:Core/Src/stm32l4xx_it.c ****   */
 211:Core/Src/stm32l4xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 212:Core/Src/stm32l4xx_it.c **** {
 293              		.loc 1 212 1
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 80B5     		push	{r7, lr}
 298              	.LCFI20:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 00AF     		add	r7, sp, #0
 303              	.LCFI21:
 304              		.cfi_def_cfa_register 7
 213:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 214:Core/Src/stm32l4xx_it.c **** 
 215:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 216:Core/Src/stm32l4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart1_rx);
 305              		.loc 1 216 3
 306 0004 0248     		ldr	r0, .L18
 307 0006 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 217:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 218:Core/Src/stm32l4xx_it.c **** 
 219:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 220:Core/Src/stm32l4xx_it.c **** }
 308              		.loc 1 220 1
 309 000a 00BF     		nop
 310 000c 80BD     		pop	{r7, pc}
 311              	.L19:
 312 000e 00BF     		.align	2
ARM GAS  /tmp/ccHqAfIK.s 			page 10


 313              	.L18:
 314 0010 00000000 		.word	hdma_usart1_rx
 315              		.cfi_endproc
 316              	.LFE141:
 318              		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 319              		.align	1
 320              		.global	CAN1_TX_IRQHandler
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	CAN1_TX_IRQHandler:
 326              	.LFB142:
 221:Core/Src/stm32l4xx_it.c **** 
 222:Core/Src/stm32l4xx_it.c **** /**
 223:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 TX interrupt.
 224:Core/Src/stm32l4xx_it.c ****   */
 225:Core/Src/stm32l4xx_it.c **** void CAN1_TX_IRQHandler(void)
 226:Core/Src/stm32l4xx_it.c **** {
 327              		.loc 1 226 1
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
 332              	.LCFI22:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 00AF     		add	r7, sp, #0
 337              	.LCFI23:
 338              		.cfi_def_cfa_register 7
 227:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 228:Core/Src/stm32l4xx_it.c **** 
 229:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 230:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 339              		.loc 1 230 3
 340 0004 0248     		ldr	r0, .L21
 341 0006 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 231:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 232:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 233:Core/Src/stm32l4xx_it.c **** }
 342              		.loc 1 233 1
 343 000a 00BF     		nop
 344 000c 80BD     		pop	{r7, pc}
 345              	.L22:
 346 000e 00BF     		.align	2
 347              	.L21:
 348 0010 00000000 		.word	hcan1
 349              		.cfi_endproc
 350              	.LFE142:
 352              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 353              		.align	1
 354              		.global	CAN1_RX0_IRQHandler
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 359              	CAN1_RX0_IRQHandler:
 360              	.LFB143:
ARM GAS  /tmp/ccHqAfIK.s 			page 11


 234:Core/Src/stm32l4xx_it.c **** 
 235:Core/Src/stm32l4xx_it.c **** /**
 236:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 237:Core/Src/stm32l4xx_it.c ****   */
 238:Core/Src/stm32l4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 239:Core/Src/stm32l4xx_it.c **** {
 361              		.loc 1 239 1
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 1, uses_anonymous_args = 0
 365 0000 80B5     		push	{r7, lr}
 366              	.LCFI24:
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 00AF     		add	r7, sp, #0
 371              	.LCFI25:
 372              		.cfi_def_cfa_register 7
 240:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 241:Core/Src/stm32l4xx_it.c **** 
 242:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 243:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 373              		.loc 1 243 3
 374 0004 0248     		ldr	r0, .L24
 375 0006 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 244:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 245:Core/Src/stm32l4xx_it.c **** 
 246:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 247:Core/Src/stm32l4xx_it.c **** }
 376              		.loc 1 247 1
 377 000a 00BF     		nop
 378 000c 80BD     		pop	{r7, pc}
 379              	.L25:
 380 000e 00BF     		.align	2
 381              	.L24:
 382 0010 00000000 		.word	hcan1
 383              		.cfi_endproc
 384              	.LFE143:
 386              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 387              		.align	1
 388              		.global	EXTI9_5_IRQHandler
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	EXTI9_5_IRQHandler:
 394              	.LFB144:
 248:Core/Src/stm32l4xx_it.c **** 
 249:Core/Src/stm32l4xx_it.c **** /**
 250:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[9:5] interrupts.
 251:Core/Src/stm32l4xx_it.c ****   */
 252:Core/Src/stm32l4xx_it.c **** void EXTI9_5_IRQHandler(void)
 253:Core/Src/stm32l4xx_it.c **** {
 395              		.loc 1 253 1
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccHqAfIK.s 			page 12


 400              	.LCFI26:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 00AF     		add	r7, sp, #0
 405              	.LCFI27:
 406              		.cfi_def_cfa_register 7
 254:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 0 */
 255:Core/Src/stm32l4xx_it.c **** 
 256:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 0 */
 257:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 407              		.loc 1 257 3
 408 0004 2020     		movs	r0, #32
 409 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 258:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(EXT_STOP_Pin);
 410              		.loc 1 258 3
 411 000a 4020     		movs	r0, #64
 412 000c FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 259:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 260:Core/Src/stm32l4xx_it.c **** 
 261:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 1 */
 262:Core/Src/stm32l4xx_it.c **** }
 413              		.loc 1 262 1
 414 0010 00BF     		nop
 415 0012 80BD     		pop	{r7, pc}
 416              		.cfi_endproc
 417              	.LFE144:
 419              		.section	.text.TIM1_UP_TIM16_IRQHandler,"ax",%progbits
 420              		.align	1
 421              		.global	TIM1_UP_TIM16_IRQHandler
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 426              	TIM1_UP_TIM16_IRQHandler:
 427              	.LFB145:
 263:Core/Src/stm32l4xx_it.c **** 
 264:Core/Src/stm32l4xx_it.c **** /**
 265:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
 266:Core/Src/stm32l4xx_it.c ****   */
 267:Core/Src/stm32l4xx_it.c **** void TIM1_UP_TIM16_IRQHandler(void)
 268:Core/Src/stm32l4xx_it.c **** {
 428              		.loc 1 268 1
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432 0000 80B5     		push	{r7, lr}
 433              	.LCFI28:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 00AF     		add	r7, sp, #0
 438              	.LCFI29:
 439              		.cfi_def_cfa_register 7
 269:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
 270:Core/Src/stm32l4xx_it.c **** 
 271:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
 272:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
ARM GAS  /tmp/ccHqAfIK.s 			page 13


 440              		.loc 1 272 3
 441 0004 0248     		ldr	r0, .L28
 442 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 273:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
 274:Core/Src/stm32l4xx_it.c **** 
 275:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
 276:Core/Src/stm32l4xx_it.c **** }
 443              		.loc 1 276 1
 444 000a 00BF     		nop
 445 000c 80BD     		pop	{r7, pc}
 446              	.L29:
 447 000e 00BF     		.align	2
 448              	.L28:
 449 0010 00000000 		.word	htim1
 450              		.cfi_endproc
 451              	.LFE145:
 453              		.section	.text.USART1_IRQHandler,"ax",%progbits
 454              		.align	1
 455              		.global	USART1_IRQHandler
 456              		.syntax unified
 457              		.thumb
 458              		.thumb_func
 460              	USART1_IRQHandler:
 461              	.LFB146:
 277:Core/Src/stm32l4xx_it.c **** 
 278:Core/Src/stm32l4xx_it.c **** /**
 279:Core/Src/stm32l4xx_it.c ****   * @brief This function handles USART1 global interrupt.
 280:Core/Src/stm32l4xx_it.c ****   */
 281:Core/Src/stm32l4xx_it.c **** void USART1_IRQHandler(void)
 282:Core/Src/stm32l4xx_it.c **** {
 462              		.loc 1 282 1
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 0
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 466 0000 80B5     		push	{r7, lr}
 467              	.LCFI30:
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 00AF     		add	r7, sp, #0
 472              	.LCFI31:
 473              		.cfi_def_cfa_register 7
 283:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 284:Core/Src/stm32l4xx_it.c **** 
 285:Core/Src/stm32l4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 286:Core/Src/stm32l4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 474              		.loc 1 286 3
 475 0004 0248     		ldr	r0, .L31
 476 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 287:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 288:Core/Src/stm32l4xx_it.c **** 
 289:Core/Src/stm32l4xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 290:Core/Src/stm32l4xx_it.c **** }
 477              		.loc 1 290 1
 478 000a 00BF     		nop
 479 000c 80BD     		pop	{r7, pc}
 480              	.L32:
ARM GAS  /tmp/ccHqAfIK.s 			page 14


 481 000e 00BF     		.align	2
 482              	.L31:
 483 0010 00000000 		.word	huart1
 484              		.cfi_endproc
 485              	.LFE146:
 487              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 488              		.align	1
 489              		.global	EXTI15_10_IRQHandler
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 494              	EXTI15_10_IRQHandler:
 495              	.LFB147:
 291:Core/Src/stm32l4xx_it.c **** 
 292:Core/Src/stm32l4xx_it.c **** /**
 293:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 294:Core/Src/stm32l4xx_it.c ****   */
 295:Core/Src/stm32l4xx_it.c **** void EXTI15_10_IRQHandler(void)
 296:Core/Src/stm32l4xx_it.c **** {
 496              		.loc 1 296 1
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 0
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500 0000 80B5     		push	{r7, lr}
 501              	.LCFI32:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 7, -8
 504              		.cfi_offset 14, -4
 505 0002 00AF     		add	r7, sp, #0
 506              	.LCFI33:
 507              		.cfi_def_cfa_register 7
 297:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 298:Core/Src/stm32l4xx_it.c **** 
 299:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 300:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(BRD_STRT_Pin);
 508              		.loc 1 300 3
 509 0004 4FF48040 		mov	r0, #16384
 510 0008 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 301:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(BRD_PRGE_Pin);
 511              		.loc 1 301 3
 512 000c 4FF40040 		mov	r0, #32768
 513 0010 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 302:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 303:Core/Src/stm32l4xx_it.c **** 
 304:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 305:Core/Src/stm32l4xx_it.c **** }
 514              		.loc 1 305 1
 515 0014 00BF     		nop
 516 0016 80BD     		pop	{r7, pc}
 517              		.cfi_endproc
 518              	.LFE147:
 520              		.text
 521              	.Letext0:
 522              		.file 2 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 523              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 524              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 525              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
ARM GAS  /tmp/ccHqAfIK.s 			page 15


 526              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 527              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 528              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 529              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 530              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
ARM GAS  /tmp/ccHqAfIK.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_it.c
     /tmp/ccHqAfIK.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccHqAfIK.s:48     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:54     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccHqAfIK.s:75     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:81     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccHqAfIK.s:102    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:108    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccHqAfIK.s:129    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:135    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccHqAfIK.s:156    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccHqAfIK.s:162    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccHqAfIK.s:191    .text.EXTI3_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:197    .text.EXTI3_IRQHandler:0000000000000000 EXTI3_IRQHandler
     /tmp/ccHqAfIK.s:221    .text.EXTI4_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:227    .text.EXTI4_IRQHandler:0000000000000000 EXTI4_IRQHandler
     /tmp/ccHqAfIK.s:251    .text.DMA1_Channel4_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:257    .text.DMA1_Channel4_IRQHandler:0000000000000000 DMA1_Channel4_IRQHandler
     /tmp/ccHqAfIK.s:280    .text.DMA1_Channel4_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:285    .text.DMA1_Channel5_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:291    .text.DMA1_Channel5_IRQHandler:0000000000000000 DMA1_Channel5_IRQHandler
     /tmp/ccHqAfIK.s:314    .text.DMA1_Channel5_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:319    .text.CAN1_TX_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:325    .text.CAN1_TX_IRQHandler:0000000000000000 CAN1_TX_IRQHandler
     /tmp/ccHqAfIK.s:348    .text.CAN1_TX_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:353    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:359    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccHqAfIK.s:382    .text.CAN1_RX0_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:387    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:393    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccHqAfIK.s:420    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:426    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 TIM1_UP_TIM16_IRQHandler
     /tmp/ccHqAfIK.s:449    .text.TIM1_UP_TIM16_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:454    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:460    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccHqAfIK.s:483    .text.USART1_IRQHandler:0000000000000010 $d
     /tmp/ccHqAfIK.s:488    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccHqAfIK.s:494    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
ARM GAS  /tmp/ccHqAfIK.s 			page 17


                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39
                           .group:0000000000000000 wm4.main.h.60.84418a90fcd58ba06baa4da515eb273a

UNDEFINED SYMBOLS
HAL_GPIO_EXTI_IRQHandler
HAL_DMA_IRQHandler
hdma_usart1_tx
hdma_usart1_rx
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
htim1
HAL_UART_IRQHandler
huart1
