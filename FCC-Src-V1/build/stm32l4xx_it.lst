ARM GAS  /tmp/ccLZbFiQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32l4xx_it.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NMI_Handler,"ax",%progbits
  20              		.align	1
  21              		.global	NMI_Handler
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NMI_Handler:
  27              	.LFB132:
  28              		.file 1 "Core/Src/stm32l4xx_it.c"
   1:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l4xx_it.c **** /**
   3:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   5:Core/Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l4xx_it.c ****   * @attention
   8:Core/Src/stm32l4xx_it.c ****   *
   9:Core/Src/stm32l4xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/stm32l4xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32l4xx_it.c ****   *
  12:Core/Src/stm32l4xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32l4xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32l4xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32l4xx_it.c ****   *
  16:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32l4xx_it.c ****   */
  18:Core/Src/stm32l4xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32l4xx_it.c **** 
  20:Core/Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32l4xx_it.c **** #include "main.h"
  22:Core/Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  23:Core/Src/stm32l4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32l4xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32l4xx_it.c **** 
  27:Core/Src/stm32l4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32l4xx_it.c **** 
  30:Core/Src/stm32l4xx_it.c **** /* USER CODE END TD */
ARM GAS  /tmp/ccLZbFiQ.s 			page 2


  31:Core/Src/stm32l4xx_it.c **** 
  32:Core/Src/stm32l4xx_it.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32l4xx_it.c **** 
  35:Core/Src/stm32l4xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32l4xx_it.c **** 
  37:Core/Src/stm32l4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32l4xx_it.c **** 
  40:Core/Src/stm32l4xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32l4xx_it.c **** 
  42:Core/Src/stm32l4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32l4xx_it.c **** 
  45:Core/Src/stm32l4xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32l4xx_it.c **** 
  47:Core/Src/stm32l4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32l4xx_it.c **** 
  50:Core/Src/stm32l4xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32l4xx_it.c **** 
  52:Core/Src/stm32l4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32l4xx_it.c **** 
  55:Core/Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32l4xx_it.c **** 
  57:Core/Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32l4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  59:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim1;
  60:Core/Src/stm32l4xx_it.c **** 
  61:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN EV */
  62:Core/Src/stm32l4xx_it.c **** 
  63:Core/Src/stm32l4xx_it.c **** /* USER CODE END EV */
  64:Core/Src/stm32l4xx_it.c **** 
  65:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  66:Core/Src/stm32l4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  67:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32l4xx_it.c **** /**
  69:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Core/Src/stm32l4xx_it.c ****   */
  71:Core/Src/stm32l4xx_it.c **** void NMI_Handler(void)
  72:Core/Src/stm32l4xx_it.c **** {
  29              		.loc 1 72 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 7, -4
  38 0002 00AF     		add	r7, sp, #0
  39              	.LCFI1:
  40              		.cfi_def_cfa_register 7
  41              	.L2:
  73:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Core/Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccLZbFiQ.s 			page 3


  75:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Core/Src/stm32l4xx_it.c ****    while (1)
  42              		.loc 1 77 10 discriminator 1
  43 0004 FEE7     		b	.L2
  44              		.cfi_endproc
  45              	.LFE132:
  47              		.section	.text.HardFault_Handler,"ax",%progbits
  48              		.align	1
  49              		.global	HardFault_Handler
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	HardFault_Handler:
  55              	.LFB133:
  78:Core/Src/stm32l4xx_it.c ****   {
  79:Core/Src/stm32l4xx_it.c ****   }
  80:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Core/Src/stm32l4xx_it.c **** }
  82:Core/Src/stm32l4xx_it.c **** 
  83:Core/Src/stm32l4xx_it.c **** /**
  84:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Core/Src/stm32l4xx_it.c ****   */
  86:Core/Src/stm32l4xx_it.c **** void HardFault_Handler(void)
  87:Core/Src/stm32l4xx_it.c **** {
  56              		.loc 1 87 1
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              	.LCFI2:
  63              		.cfi_def_cfa_offset 4
  64              		.cfi_offset 7, -4
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI3:
  67              		.cfi_def_cfa_register 7
  68              	.L4:
  88:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Core/Src/stm32l4xx_it.c **** 
  90:Core/Src/stm32l4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Core/Src/stm32l4xx_it.c ****   while (1)
  69              		.loc 1 91 9 discriminator 1
  70 0004 FEE7     		b	.L4
  71              		.cfi_endproc
  72              	.LFE133:
  74              		.section	.text.MemManage_Handler,"ax",%progbits
  75              		.align	1
  76              		.global	MemManage_Handler
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  81              	MemManage_Handler:
  82              	.LFB134:
  92:Core/Src/stm32l4xx_it.c ****   {
  93:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
ARM GAS  /tmp/ccLZbFiQ.s 			page 4


  95:Core/Src/stm32l4xx_it.c ****   }
  96:Core/Src/stm32l4xx_it.c **** }
  97:Core/Src/stm32l4xx_it.c **** 
  98:Core/Src/stm32l4xx_it.c **** /**
  99:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Memory management fault.
 100:Core/Src/stm32l4xx_it.c ****   */
 101:Core/Src/stm32l4xx_it.c **** void MemManage_Handler(void)
 102:Core/Src/stm32l4xx_it.c **** {
  83              		.loc 1 102 1
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87              		@ link register save eliminated.
  88 0000 80B4     		push	{r7}
  89              	.LCFI4:
  90              		.cfi_def_cfa_offset 4
  91              		.cfi_offset 7, -4
  92 0002 00AF     		add	r7, sp, #0
  93              	.LCFI5:
  94              		.cfi_def_cfa_register 7
  95              	.L6:
 103:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 104:Core/Src/stm32l4xx_it.c **** 
 105:Core/Src/stm32l4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 106:Core/Src/stm32l4xx_it.c ****   while (1)
  96              		.loc 1 106 9 discriminator 1
  97 0004 FEE7     		b	.L6
  98              		.cfi_endproc
  99              	.LFE134:
 101              		.section	.text.BusFault_Handler,"ax",%progbits
 102              		.align	1
 103              		.global	BusFault_Handler
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	BusFault_Handler:
 109              	.LFB135:
 107:Core/Src/stm32l4xx_it.c ****   {
 108:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 109:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 110:Core/Src/stm32l4xx_it.c ****   }
 111:Core/Src/stm32l4xx_it.c **** }
 112:Core/Src/stm32l4xx_it.c **** 
 113:Core/Src/stm32l4xx_it.c **** /**
 114:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 115:Core/Src/stm32l4xx_it.c ****   */
 116:Core/Src/stm32l4xx_it.c **** void BusFault_Handler(void)
 117:Core/Src/stm32l4xx_it.c **** {
 110              		.loc 1 117 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              	.LCFI6:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
ARM GAS  /tmp/ccLZbFiQ.s 			page 5


 119 0002 00AF     		add	r7, sp, #0
 120              	.LCFI7:
 121              		.cfi_def_cfa_register 7
 122              	.L8:
 118:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 119:Core/Src/stm32l4xx_it.c **** 
 120:Core/Src/stm32l4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 121:Core/Src/stm32l4xx_it.c ****   while (1)
 123              		.loc 1 121 9 discriminator 1
 124 0004 FEE7     		b	.L8
 125              		.cfi_endproc
 126              	.LFE135:
 128              		.section	.text.UsageFault_Handler,"ax",%progbits
 129              		.align	1
 130              		.global	UsageFault_Handler
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 135              	UsageFault_Handler:
 136              	.LFB136:
 122:Core/Src/stm32l4xx_it.c ****   {
 123:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 124:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 125:Core/Src/stm32l4xx_it.c ****   }
 126:Core/Src/stm32l4xx_it.c **** }
 127:Core/Src/stm32l4xx_it.c **** 
 128:Core/Src/stm32l4xx_it.c **** /**
 129:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 130:Core/Src/stm32l4xx_it.c ****   */
 131:Core/Src/stm32l4xx_it.c **** void UsageFault_Handler(void)
 132:Core/Src/stm32l4xx_it.c **** {
 137              		.loc 1 132 1
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 1, uses_anonymous_args = 0
 141              		@ link register save eliminated.
 142 0000 80B4     		push	{r7}
 143              	.LCFI8:
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 0002 00AF     		add	r7, sp, #0
 147              	.LCFI9:
 148              		.cfi_def_cfa_register 7
 149              	.L10:
 133:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 134:Core/Src/stm32l4xx_it.c **** 
 135:Core/Src/stm32l4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 136:Core/Src/stm32l4xx_it.c ****   while (1)
 150              		.loc 1 136 9 discriminator 1
 151 0004 FEE7     		b	.L10
 152              		.cfi_endproc
 153              	.LFE136:
 155              		.section	.text.DebugMon_Handler,"ax",%progbits
 156              		.align	1
 157              		.global	DebugMon_Handler
 158              		.syntax unified
 159              		.thumb
ARM GAS  /tmp/ccLZbFiQ.s 			page 6


 160              		.thumb_func
 162              	DebugMon_Handler:
 163              	.LFB137:
 137:Core/Src/stm32l4xx_it.c ****   {
 138:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 139:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 140:Core/Src/stm32l4xx_it.c ****   }
 141:Core/Src/stm32l4xx_it.c **** }
 142:Core/Src/stm32l4xx_it.c **** 
 143:Core/Src/stm32l4xx_it.c **** /**
 144:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Debug monitor.
 145:Core/Src/stm32l4xx_it.c ****   */
 146:Core/Src/stm32l4xx_it.c **** void DebugMon_Handler(void)
 147:Core/Src/stm32l4xx_it.c **** {
 164              		.loc 1 147 1
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI10:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI11:
 175              		.cfi_def_cfa_register 7
 148:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 149:Core/Src/stm32l4xx_it.c **** 
 150:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 151:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 152:Core/Src/stm32l4xx_it.c **** 
 153:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 154:Core/Src/stm32l4xx_it.c **** }
 176              		.loc 1 154 1
 177 0004 00BF     		nop
 178 0006 BD46     		mov	sp, r7
 179              	.LCFI12:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0008 5DF8047B 		ldr	r7, [sp], #4
 183              	.LCFI13:
 184              		.cfi_restore 7
 185              		.cfi_def_cfa_offset 0
 186 000c 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE137:
 190              		.section	.text.EXTI3_IRQHandler,"ax",%progbits
 191              		.align	1
 192              		.global	EXTI3_IRQHandler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	EXTI3_IRQHandler:
 198              	.LFB138:
 155:Core/Src/stm32l4xx_it.c **** 
 156:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 157:Core/Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
ARM GAS  /tmp/ccLZbFiQ.s 			page 7


 158:Core/Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 159:Core/Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 160:Core/Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
 161:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 162:Core/Src/stm32l4xx_it.c **** 
 163:Core/Src/stm32l4xx_it.c **** /**
 164:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line3 interrupt.
 165:Core/Src/stm32l4xx_it.c ****   */
 166:Core/Src/stm32l4xx_it.c **** void EXTI3_IRQHandler(void)
 167:Core/Src/stm32l4xx_it.c **** {
 199              		.loc 1 167 1
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 80B5     		push	{r7, lr}
 204              	.LCFI14:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 00AF     		add	r7, sp, #0
 209              	.LCFI15:
 210              		.cfi_def_cfa_register 7
 168:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 0 */
 169:Core/Src/stm32l4xx_it.c **** 
 170:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI3_IRQn 0 */
 171:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(EXT_STRT_Pin);
 211              		.loc 1 171 3
 212 0004 0820     		movs	r0, #8
 213 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 172:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI3_IRQn 1 */
 173:Core/Src/stm32l4xx_it.c **** 
 174:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI3_IRQn 1 */
 175:Core/Src/stm32l4xx_it.c **** }
 214              		.loc 1 175 1
 215 000a 00BF     		nop
 216 000c 80BD     		pop	{r7, pc}
 217              		.cfi_endproc
 218              	.LFE138:
 220              		.section	.text.EXTI4_IRQHandler,"ax",%progbits
 221              		.align	1
 222              		.global	EXTI4_IRQHandler
 223              		.syntax unified
 224              		.thumb
 225              		.thumb_func
 227              	EXTI4_IRQHandler:
 228              	.LFB139:
 176:Core/Src/stm32l4xx_it.c **** 
 177:Core/Src/stm32l4xx_it.c **** /**
 178:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line4 interrupt.
 179:Core/Src/stm32l4xx_it.c ****   */
 180:Core/Src/stm32l4xx_it.c **** void EXTI4_IRQHandler(void)
 181:Core/Src/stm32l4xx_it.c **** {
 229              		.loc 1 181 1
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 1, uses_anonymous_args = 0
 233 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccLZbFiQ.s 			page 8


 234              	.LCFI16:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 7, -8
 237              		.cfi_offset 14, -4
 238 0002 00AF     		add	r7, sp, #0
 239              	.LCFI17:
 240              		.cfi_def_cfa_register 7
 182:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 0 */
 183:Core/Src/stm32l4xx_it.c **** 
 184:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI4_IRQn 0 */
 185:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 241              		.loc 1 185 3
 242 0004 1020     		movs	r0, #16
 243 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 186:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI4_IRQn 1 */
 187:Core/Src/stm32l4xx_it.c **** 
 188:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI4_IRQn 1 */
 189:Core/Src/stm32l4xx_it.c **** }
 244              		.loc 1 189 1
 245 000a 00BF     		nop
 246 000c 80BD     		pop	{r7, pc}
 247              		.cfi_endproc
 248              	.LFE139:
 250              		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 251              		.align	1
 252              		.global	CAN1_TX_IRQHandler
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 257              	CAN1_TX_IRQHandler:
 258              	.LFB140:
 190:Core/Src/stm32l4xx_it.c **** 
 191:Core/Src/stm32l4xx_it.c **** /**
 192:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 TX interrupt.
 193:Core/Src/stm32l4xx_it.c ****   */
 194:Core/Src/stm32l4xx_it.c **** void CAN1_TX_IRQHandler(void)
 195:Core/Src/stm32l4xx_it.c **** {
 259              		.loc 1 195 1
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 80B5     		push	{r7, lr}
 264              	.LCFI18:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268 0002 00AF     		add	r7, sp, #0
 269              	.LCFI19:
 270              		.cfi_def_cfa_register 7
 196:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 197:Core/Src/stm32l4xx_it.c **** 
 198:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 199:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 271              		.loc 1 199 3
 272 0004 0248     		ldr	r0, .L15
 273 0006 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 200:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
ARM GAS  /tmp/ccLZbFiQ.s 			page 9


 201:Core/Src/stm32l4xx_it.c **** 
 202:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 203:Core/Src/stm32l4xx_it.c **** }
 274              		.loc 1 203 1
 275 000a 00BF     		nop
 276 000c 80BD     		pop	{r7, pc}
 277              	.L16:
 278 000e 00BF     		.align	2
 279              	.L15:
 280 0010 00000000 		.word	hcan1
 281              		.cfi_endproc
 282              	.LFE140:
 284              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 285              		.align	1
 286              		.global	CAN1_RX0_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	CAN1_RX0_IRQHandler:
 292              	.LFB141:
 204:Core/Src/stm32l4xx_it.c **** 
 205:Core/Src/stm32l4xx_it.c **** /**
 206:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 207:Core/Src/stm32l4xx_it.c ****   */
 208:Core/Src/stm32l4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 209:Core/Src/stm32l4xx_it.c **** {
 293              		.loc 1 209 1
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 80B5     		push	{r7, lr}
 298              	.LCFI20:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 00AF     		add	r7, sp, #0
 303              	.LCFI21:
 304              		.cfi_def_cfa_register 7
 210:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 211:Core/Src/stm32l4xx_it.c **** 
 212:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 213:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 305              		.loc 1 213 3
 306 0004 0248     		ldr	r0, .L18
 307 0006 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 214:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
 215:Core/Src/stm32l4xx_it.c **** 
 216:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 217:Core/Src/stm32l4xx_it.c **** }
 308              		.loc 1 217 1
 309 000a 00BF     		nop
 310 000c 80BD     		pop	{r7, pc}
 311              	.L19:
 312 000e 00BF     		.align	2
 313              	.L18:
 314 0010 00000000 		.word	hcan1
 315              		.cfi_endproc
ARM GAS  /tmp/ccLZbFiQ.s 			page 10


 316              	.LFE141:
 318              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 319              		.align	1
 320              		.global	EXTI9_5_IRQHandler
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	EXTI9_5_IRQHandler:
 326              	.LFB142:
 218:Core/Src/stm32l4xx_it.c **** 
 219:Core/Src/stm32l4xx_it.c **** /**
 220:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[9:5] interrupts.
 221:Core/Src/stm32l4xx_it.c ****   */
 222:Core/Src/stm32l4xx_it.c **** void EXTI9_5_IRQHandler(void)
 223:Core/Src/stm32l4xx_it.c **** {
 327              		.loc 1 223 1
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 1, uses_anonymous_args = 0
 331 0000 80B5     		push	{r7, lr}
 332              	.LCFI22:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 00AF     		add	r7, sp, #0
 337              	.LCFI23:
 338              		.cfi_def_cfa_register 7
 224:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 0 */
 225:Core/Src/stm32l4xx_it.c **** 
 226:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 0 */
 227:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 339              		.loc 1 227 3
 340 0004 2020     		movs	r0, #32
 341 0006 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 228:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(EXT_STOP_Pin);
 342              		.loc 1 228 3
 343 000a 4020     		movs	r0, #64
 344 000c FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 229:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI9_5_IRQn 1 */
 230:Core/Src/stm32l4xx_it.c **** 
 231:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI9_5_IRQn 1 */
 232:Core/Src/stm32l4xx_it.c **** }
 345              		.loc 1 232 1
 346 0010 00BF     		nop
 347 0012 80BD     		pop	{r7, pc}
 348              		.cfi_endproc
 349              	.LFE142:
 351              		.section	.text.TIM1_UP_TIM16_IRQHandler,"ax",%progbits
 352              		.align	1
 353              		.global	TIM1_UP_TIM16_IRQHandler
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 358              	TIM1_UP_TIM16_IRQHandler:
 359              	.LFB143:
 233:Core/Src/stm32l4xx_it.c **** 
 234:Core/Src/stm32l4xx_it.c **** /**
ARM GAS  /tmp/ccLZbFiQ.s 			page 11


 235:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
 236:Core/Src/stm32l4xx_it.c ****   */
 237:Core/Src/stm32l4xx_it.c **** void TIM1_UP_TIM16_IRQHandler(void)
 238:Core/Src/stm32l4xx_it.c **** {
 360              		.loc 1 238 1
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364 0000 80B5     		push	{r7, lr}
 365              	.LCFI24:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 7, -8
 368              		.cfi_offset 14, -4
 369 0002 00AF     		add	r7, sp, #0
 370              	.LCFI25:
 371              		.cfi_def_cfa_register 7
 239:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
 240:Core/Src/stm32l4xx_it.c **** 
 241:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
 242:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim1);
 372              		.loc 1 242 3
 373 0004 0248     		ldr	r0, .L22
 374 0006 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 243:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
 244:Core/Src/stm32l4xx_it.c **** 
 245:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
 246:Core/Src/stm32l4xx_it.c **** }
 375              		.loc 1 246 1
 376 000a 00BF     		nop
 377 000c 80BD     		pop	{r7, pc}
 378              	.L23:
 379 000e 00BF     		.align	2
 380              	.L22:
 381 0010 00000000 		.word	htim1
 382              		.cfi_endproc
 383              	.LFE143:
 385              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 386              		.align	1
 387              		.global	EXTI15_10_IRQHandler
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 392              	EXTI15_10_IRQHandler:
 393              	.LFB144:
 247:Core/Src/stm32l4xx_it.c **** 
 248:Core/Src/stm32l4xx_it.c **** /**
 249:Core/Src/stm32l4xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 250:Core/Src/stm32l4xx_it.c ****   */
 251:Core/Src/stm32l4xx_it.c **** void EXTI15_10_IRQHandler(void)
 252:Core/Src/stm32l4xx_it.c **** {
 394              		.loc 1 252 1
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0000 80B5     		push	{r7, lr}
 399              	.LCFI26:
 400              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLZbFiQ.s 			page 12


 401              		.cfi_offset 7, -8
 402              		.cfi_offset 14, -4
 403 0002 00AF     		add	r7, sp, #0
 404              	.LCFI27:
 405              		.cfi_def_cfa_register 7
 253:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 254:Core/Src/stm32l4xx_it.c **** 
 255:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 256:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(BRD_STRT_Pin);
 406              		.loc 1 256 3
 407 0004 4FF48040 		mov	r0, #16384
 408 0008 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 257:Core/Src/stm32l4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(BRD_PRGE_Pin);
 409              		.loc 1 257 3
 410 000c 4FF40040 		mov	r0, #32768
 411 0010 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 258:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 259:Core/Src/stm32l4xx_it.c **** 
 260:Core/Src/stm32l4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 261:Core/Src/stm32l4xx_it.c **** }
 412              		.loc 1 261 1
 413 0014 00BF     		nop
 414 0016 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE144:
 418              		.text
 419              	.Letext0:
 420              		.file 2 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 421              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 422              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 423              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 424              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 425              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 426              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 427              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
ARM GAS  /tmp/ccLZbFiQ.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_it.c
     /tmp/ccLZbFiQ.s:20     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:26     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccLZbFiQ.s:48     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:54     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccLZbFiQ.s:75     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:81     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccLZbFiQ.s:102    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:108    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccLZbFiQ.s:129    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:135    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccLZbFiQ.s:156    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:162    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccLZbFiQ.s:191    .text.EXTI3_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:197    .text.EXTI3_IRQHandler:0000000000000000 EXTI3_IRQHandler
     /tmp/ccLZbFiQ.s:221    .text.EXTI4_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:227    .text.EXTI4_IRQHandler:0000000000000000 EXTI4_IRQHandler
     /tmp/ccLZbFiQ.s:251    .text.CAN1_TX_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:257    .text.CAN1_TX_IRQHandler:0000000000000000 CAN1_TX_IRQHandler
     /tmp/ccLZbFiQ.s:280    .text.CAN1_TX_IRQHandler:0000000000000010 $d
     /tmp/ccLZbFiQ.s:285    .text.CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:291    .text.CAN1_RX0_IRQHandler:0000000000000000 CAN1_RX0_IRQHandler
     /tmp/ccLZbFiQ.s:314    .text.CAN1_RX0_IRQHandler:0000000000000010 $d
     /tmp/ccLZbFiQ.s:319    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:325    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccLZbFiQ.s:352    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:358    .text.TIM1_UP_TIM16_IRQHandler:0000000000000000 TIM1_UP_TIM16_IRQHandler
     /tmp/ccLZbFiQ.s:381    .text.TIM1_UP_TIM16_IRQHandler:0000000000000010 $d
     /tmp/ccLZbFiQ.s:386    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccLZbFiQ.s:392    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
ARM GAS  /tmp/ccLZbFiQ.s 			page 14


                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39
                           .group:0000000000000000 wm4.main.h.60.84418a90fcd58ba06baa4da515eb273a

UNDEFINED SYMBOLS
HAL_GPIO_EXTI_IRQHandler
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
htim1
