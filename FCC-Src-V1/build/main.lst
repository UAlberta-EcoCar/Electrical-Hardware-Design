ARM GAS  /tmp/ccgNVCWq.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hcan1
  20              		.section	.bss.hcan1,"aw",%nobits
  21              		.align	2
  24              	hcan1:
  25 0000 00000000 		.space	40
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	hi2c1
  27              		.section	.bss.hi2c1,"aw",%nobits
  28              		.align	2
  31              	hi2c1:
  32 0000 00000000 		.space	84
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	huart1
  34              		.section	.bss.huart1,"aw",%nobits
  35              		.align	2
  38              	huart1:
  39 0000 00000000 		.space	132
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	hdma_usart1_rx
  41              		.section	.bss.hdma_usart1_rx,"aw",%nobits
  42              		.align	2
  45              	hdma_usart1_rx:
  46 0000 00000000 		.space	72
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	hdma_usart1_tx
  48              		.section	.bss.hdma_usart1_tx,"aw",%nobits
  49              		.align	2
ARM GAS  /tmp/ccgNVCWq.s 			page 2


  52              	hdma_usart1_tx:
  53 0000 00000000 		.space	72
  53      00000000 
  53      00000000 
  53      00000000 
  53      00000000 
  54              		.global	CanTaskHandle
  55              		.section	.bss.CanTaskHandle,"aw",%nobits
  56              		.align	2
  59              	CanTaskHandle:
  60 0000 00000000 		.space	4
  61              		.global	CanTaskBuffer
  62              		.section	.bss.CanTaskBuffer,"aw",%nobits
  63              		.align	2
  66              	CanTaskBuffer:
  67 0000 00000000 		.space	512
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.global	CanTaskControlBlock
  69              		.section	.bss.CanTaskControlBlock,"aw",%nobits
  70              		.align	3
  73              	CanTaskControlBlock:
  74 0000 00000000 		.space	1160
  74      00000000 
  74      00000000 
  74      00000000 
  74      00000000 
  75              		.global	CanTask_attributes
  76              		.section	.rodata
  77              		.align	2
  78              	.LC0:
  79 0000 43616E54 		.ascii	"CanTask\000"
  79      61736B00 
  80              		.section	.rodata.CanTask_attributes,"a"
  81              		.align	2
  84              	CanTask_attributes:
  85 0000 00000000 		.word	.LC0
  86 0004 00000000 		.space	4
  87 0008 00000000 		.word	CanTaskControlBlock
  88 000c 88040000 		.word	1160
  89 0010 00000000 		.word	CanTaskBuffer
  90 0014 00020000 		.word	512
  91 0018 19000000 		.word	25
  92 001c 00000000 		.space	8
  92      00000000 
  93              		.global	I2cTaskHandle
  94              		.section	.bss.I2cTaskHandle,"aw",%nobits
  95              		.align	2
  98              	I2cTaskHandle:
  99 0000 00000000 		.space	4
 100              		.global	I2cTaskBuffer
 101              		.section	.bss.I2cTaskBuffer,"aw",%nobits
 102              		.align	2
 105              	I2cTaskBuffer:
 106 0000 00000000 		.space	512
ARM GAS  /tmp/ccgNVCWq.s 			page 3


 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.global	I2cTaskControlBlock
 108              		.section	.bss.I2cTaskControlBlock,"aw",%nobits
 109              		.align	3
 112              	I2cTaskControlBlock:
 113 0000 00000000 		.space	1160
 113      00000000 
 113      00000000 
 113      00000000 
 113      00000000 
 114              		.global	I2cTask_attributes
 115              		.section	.rodata
 116              		.align	2
 117              	.LC1:
 118 0008 49326354 		.ascii	"I2cTask\000"
 118      61736B00 
 119              		.section	.rodata.I2cTask_attributes,"a"
 120              		.align	2
 123              	I2cTask_attributes:
 124 0000 08000000 		.word	.LC1
 125 0004 00000000 		.space	4
 126 0008 00000000 		.word	I2cTaskControlBlock
 127 000c 88040000 		.word	1160
 128 0010 00000000 		.word	I2cTaskBuffer
 129 0014 00020000 		.word	512
 130 0018 1A000000 		.word	26
 131 001c 00000000 		.space	8
 131      00000000 
 132              		.global	FuelCellTaskHandle
 133              		.section	.bss.FuelCellTaskHandle,"aw",%nobits
 134              		.align	2
 137              	FuelCellTaskHandle:
 138 0000 00000000 		.space	4
 139              		.global	FuelCellTaskBuffer
 140              		.section	.bss.FuelCellTaskBuffer,"aw",%nobits
 141              		.align	2
 144              	FuelCellTaskBuffer:
 145 0000 00000000 		.space	512
 145      00000000 
 145      00000000 
 145      00000000 
 145      00000000 
 146              		.global	FuelCellTaskControlBlock
 147              		.section	.bss.FuelCellTaskControlBlock,"aw",%nobits
 148              		.align	3
 151              	FuelCellTaskControlBlock:
 152 0000 00000000 		.space	1160
 152      00000000 
 152      00000000 
 152      00000000 
 152      00000000 
 153              		.global	FuelCellTask_attributes
 154              		.section	.rodata
 155              		.align	2
ARM GAS  /tmp/ccgNVCWq.s 			page 4


 156              	.LC2:
 157 0010 4675656C 		.ascii	"FuelCellTask\000"
 157      43656C6C 
 157      5461736B 
 157      00
 158              		.section	.rodata.FuelCellTask_attributes,"a"
 159              		.align	2
 162              	FuelCellTask_attributes:
 163 0000 10000000 		.word	.LC2
 164 0004 00000000 		.space	4
 165 0008 00000000 		.word	FuelCellTaskControlBlock
 166 000c 88040000 		.word	1160
 167 0010 00000000 		.word	FuelCellTaskBuffer
 168 0014 00020000 		.word	512
 169 0018 1B000000 		.word	27
 170 001c 00000000 		.space	8
 170      00000000 
 171              		.global	canMsgOkSemHandle
 172              		.section	.bss.canMsgOkSemHandle,"aw",%nobits
 173              		.align	2
 176              	canMsgOkSemHandle:
 177 0000 00000000 		.space	4
 178              		.global	canMsgOkSem_attributes
 179              		.section	.rodata
 180 001d 000000   		.align	2
 181              	.LC3:
 182 0020 63616E4D 		.ascii	"canMsgOkSem\000"
 182      73674F6B 
 182      53656D00 
 183              		.section	.rodata.canMsgOkSem_attributes,"a"
 184              		.align	2
 187              	canMsgOkSem_attributes:
 188 0000 20000000 		.word	.LC3
 189 0004 00000000 		.space	12
 189      00000000 
 189      00000000 
 190              		.global	fc_state
 191              		.section	.bss.fc_state,"aw",%nobits
 194              	fc_state:
 195 0000 00       		.space	1
 196              		.global	canData
 197              		.section	.bss.canData,"aw",%nobits
 198              		.align	2
 201              	canData:
 202 0000 00000000 		.space	8
 202      00000000 
 203              		.global	TxHeader
 204              		.section	.bss.TxHeader,"aw",%nobits
 205              		.align	2
 208              	TxHeader:
 209 0000 00000000 		.space	24
 209      00000000 
 209      00000000 
 209      00000000 
 209      00000000 
 210              		.global	TxHeaderFuelCellTask
 211              		.section	.bss.TxHeaderFuelCellTask,"aw",%nobits
ARM GAS  /tmp/ccgNVCWq.s 			page 5


 212              		.align	2
 215              	TxHeaderFuelCellTask:
 216 0000 00000000 		.space	24
 216      00000000 
 216      00000000 
 216      00000000 
 216      00000000 
 217              		.global	RxHeader
 218              		.section	.bss.RxHeader,"aw",%nobits
 219              		.align	2
 222              	RxHeader:
 223 0000 00000000 		.space	28
 223      00000000 
 223      00000000 
 223      00000000 
 223      00000000 
 224              		.global	TxMailbox
 225              		.section	.bss.TxMailbox,"aw",%nobits
 226              		.align	2
 229              	TxMailbox:
 230 0000 00000000 		.space	4
 231              		.global	TxMailboxFuelCellTask
 232              		.section	.bss.TxMailboxFuelCellTask,"aw",%nobits
 233              		.align	2
 236              	TxMailboxFuelCellTask:
 237 0000 00000000 		.space	4
 238              		.global	TxData
 239              		.section	.bss.TxData,"aw",%nobits
 240              		.align	2
 243              	TxData:
 244 0000 00000000 		.space	8
 244      00000000 
 245              		.global	RxData
 246              		.section	.bss.RxData,"aw",%nobits
 247              		.align	2
 250              	RxData:
 251 0000 00000000 		.space	8
 251      00000000 
 252              		.global	RxUARTbuff
 253              		.section	.bss.RxUARTbuff,"aw",%nobits
 256              	RxUARTbuff:
 257 0000 00       		.space	1
 258              		.global	RxUARTData
 259              		.section	.bss.RxUARTData,"aw",%nobits
 260              		.align	2
 263              	RxUARTData:
 264 0000 00000000 		.space	32
 264      00000000 
 264      00000000 
 264      00000000 
 264      00000000 
 265              		.global	UartIndex
 266              		.section	.bss.UartIndex,"aw",%nobits
 269              	UartIndex:
 270 0000 00       		.space	1
 271              		.global	uselessvariable
 272              		.section	.data.uselessvariable,"aw"
ARM GAS  /tmp/ccgNVCWq.s 			page 6


 275              	uselessvariable:
 276 0000 5A       		.byte	90
 277              		.global	button_debounce
 278              		.section	.bss.button_debounce,"aw",%nobits
 279              		.align	2
 282              	button_debounce:
 283 0000 00000000 		.space	4
 284              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 285              		.align	1
 286              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 291              	HAL_CAN_RxFifo0MsgPendingCallback:
 292              	.LFB136:
 293              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include <string.h>
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** typedef StaticTask_t osStaticThreadDef_t;
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** typedef struct
  32:Core/Src/main.c **** {
  33:Core/Src/main.c ****   uint8_t x, y, z;
  34:Core/Src/main.c **** } accData_t;
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** typedef struct  
  37:Core/Src/main.c **** {
  38:Core/Src/main.c ****   uint8_t purge_state, supply_state;
  39:Core/Src/main.c ****   float internal_stack_temp, internal_stack_pressure;
  40:Core/Src/main.c **** } fcData_t;
  41:Core/Src/main.c **** 
ARM GAS  /tmp/ccgNVCWq.s 			page 7


  42:Core/Src/main.c **** typedef struct 
  43:Core/Src/main.c **** {
  44:Core/Src/main.c ****   struct FCData* pFC;
  45:Core/Src/main.c ****   uint8_t FCData_ID;
  46:Core/Src/main.c **** } canPack_t;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** typedef struct
  49:Core/Src/main.c **** {
  50:Core/Src/main.c ****   uint8_t H2_OK;
  51:Core/Src/main.c ****   float cap_voltage;
  52:Core/Src/main.c **** } canData_t;
  53:Core/Src/main.c **** /* USER CODE END PTD */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  56:Core/Src/main.c **** /* USER CODE BEGIN PD */
  57:Core/Src/main.c **** #define FULL_CAP_CHARGE_V 18
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** #define FUEL_CELL_OFF_STATE 0x00
  60:Core/Src/main.c **** #define FUEL_CELL_STRTUP_STATE 0x01
  61:Core/Src/main.c **** #define FUEL_CELL_CHRGE_STATE 0x02
  62:Core/Src/main.c **** #define FUEL_CELL_RUN_STATE 0x04
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** #define CAN_TX_MAILBOX_NONE 0x00000000U // Remove reference to tx mailbox
  65:Core/Src/main.c **** /* USER CODE END PD */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN PM */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* USER CODE END PM */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  73:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** UART_HandleTypeDef huart1;
  78:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_rx;
  79:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart1_tx;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Definitions for CanTask */
  82:Core/Src/main.c **** osThreadId_t CanTaskHandle;
  83:Core/Src/main.c **** uint32_t CanTaskBuffer[128];
  84:Core/Src/main.c **** osStaticThreadDef_t CanTaskControlBlock;
  85:Core/Src/main.c **** const osThreadAttr_t CanTask_attributes = {
  86:Core/Src/main.c ****     .name = "CanTask",
  87:Core/Src/main.c ****     .cb_mem = &CanTaskControlBlock,
  88:Core/Src/main.c ****     .cb_size = sizeof(CanTaskControlBlock),
  89:Core/Src/main.c ****     .stack_mem = &CanTaskBuffer[0],
  90:Core/Src/main.c ****     .stack_size = sizeof(CanTaskBuffer),
  91:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal1,
  92:Core/Src/main.c **** };
  93:Core/Src/main.c **** /* Definitions for I2cTask */
  94:Core/Src/main.c **** osThreadId_t I2cTaskHandle;
  95:Core/Src/main.c **** uint32_t I2cTaskBuffer[128];
  96:Core/Src/main.c **** osStaticThreadDef_t I2cTaskControlBlock;
  97:Core/Src/main.c **** const osThreadAttr_t I2cTask_attributes = {
  98:Core/Src/main.c ****     .name = "I2cTask",
ARM GAS  /tmp/ccgNVCWq.s 			page 8


  99:Core/Src/main.c ****     .cb_mem = &I2cTaskControlBlock,
 100:Core/Src/main.c ****     .cb_size = sizeof(I2cTaskControlBlock),
 101:Core/Src/main.c ****     .stack_mem = &I2cTaskBuffer[0],
 102:Core/Src/main.c ****     .stack_size = sizeof(I2cTaskBuffer),
 103:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal2,
 104:Core/Src/main.c **** };
 105:Core/Src/main.c **** /* Definitions for FuelCellTask */
 106:Core/Src/main.c **** osThreadId_t FuelCellTaskHandle;
 107:Core/Src/main.c **** uint32_t FuelCellTaskBuffer[128];
 108:Core/Src/main.c **** osStaticThreadDef_t FuelCellTaskControlBlock;
 109:Core/Src/main.c **** const osThreadAttr_t FuelCellTask_attributes = {
 110:Core/Src/main.c ****     .name = "FuelCellTask",
 111:Core/Src/main.c ****     .cb_mem = &FuelCellTaskControlBlock,
 112:Core/Src/main.c ****     .cb_size = sizeof(FuelCellTaskControlBlock),
 113:Core/Src/main.c ****     .stack_mem = &FuelCellTaskBuffer[0],
 114:Core/Src/main.c ****     .stack_size = sizeof(FuelCellTaskBuffer),
 115:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal3,
 116:Core/Src/main.c **** };
 117:Core/Src/main.c **** /* Definitions for canMsgOkSem */
 118:Core/Src/main.c **** osSemaphoreId_t canMsgOkSemHandle;
 119:Core/Src/main.c **** const osSemaphoreAttr_t canMsgOkSem_attributes = {
 120:Core/Src/main.c ****     .name = "canMsgOkSem"};
 121:Core/Src/main.c **** /* USER CODE BEGIN PV */
 122:Core/Src/main.c **** uint8_t fc_state = FUEL_CELL_OFF_STATE;
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** canData_t canData;
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader, TxHeaderFuelCellTask;
 127:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** uint32_t TxMailbox, TxMailboxFuelCellTask;
 130:Core/Src/main.c **** uint8_t TxData[8];
 131:Core/Src/main.c **** uint8_t RxData[8];
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** uint8_t RxUARTbuff;
 134:Core/Src/main.c **** uint8_t RxUARTData[32];
 135:Core/Src/main.c **** uint8_t UartIndex = 0;
 136:Core/Src/main.c **** 
 137:Core/Src/main.c **** uint8_t uselessvariable = 90; 
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** uint32_t button_debounce;
 140:Core/Src/main.c **** /* USER CODE END PV */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 143:Core/Src/main.c **** void SystemClock_Config(void);
 144:Core/Src/main.c **** static void MX_GPIO_Init(void);
 145:Core/Src/main.c **** static void MX_DMA_Init(void);
 146:Core/Src/main.c **** static void MX_CAN1_Init(void);
 147:Core/Src/main.c **** static void MX_I2C1_Init(void);
 148:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 149:Core/Src/main.c **** void StartCanTask(void *argument);
 150:Core/Src/main.c **** void StartI2cTask(void *argument);
 151:Core/Src/main.c **** void StartFuelCellTask(void *argument);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 154:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 155:Core/Src/main.c **** {
ARM GAS  /tmp/ccgNVCWq.s 			page 9


 294              		.loc 1 155 1
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0000 80B5     		push	{r7, lr}
 299              	.LCFI0:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 7, -8
 302              		.cfi_offset 14, -4
 303 0002 82B0     		sub	sp, sp, #8
 304              	.LCFI1:
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              	.LCFI2:
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
 156:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 310              		.loc 1 156 3
 311 0008 044B     		ldr	r3, .L2
 312 000a 054A     		ldr	r2, .L2+4
 313 000c 0021     		movs	r1, #0
 314 000e 7868     		ldr	r0, [r7, #4]
 315 0010 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 157:Core/Src/main.c **** }
 316              		.loc 1 157 1
 317 0014 00BF     		nop
 318 0016 0837     		adds	r7, r7, #8
 319              	.LCFI3:
 320              		.cfi_def_cfa_offset 8
 321 0018 BD46     		mov	sp, r7
 322              	.LCFI4:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 001a 80BD     		pop	{r7, pc}
 326              	.L3:
 327              		.align	2
 328              	.L2:
 329 001c 00000000 		.word	RxData
 330 0020 00000000 		.word	RxHeader
 331              		.cfi_endproc
 332              	.LFE136:
 334              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 335              		.align	1
 336              		.global	HAL_CAN_TxMailbox0CompleteCallback
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	HAL_CAN_TxMailbox0CompleteCallback:
 342              	.LFB137:
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** /* Transmit Completed Callbacks for Message Sent Confirmations */
 160:Core/Src/main.c **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 161:Core/Src/main.c **** {
 343              		.loc 1 161 1
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccgNVCWq.s 			page 10


 347 0000 80B5     		push	{r7, lr}
 348              	.LCFI5:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 82B0     		sub	sp, sp, #8
 353              	.LCFI6:
 354              		.cfi_def_cfa_offset 16
 355 0004 00AF     		add	r7, sp, #0
 356              	.LCFI7:
 357              		.cfi_def_cfa_register 7
 358 0006 7860     		str	r0, [r7, #4]
 162:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX0)
 359              		.loc 1 162 29
 360 0008 074B     		ldr	r3, .L7
 361 000a 1B68     		ldr	r3, [r3]
 362              		.loc 1 162 6
 363 000c 012B     		cmp	r3, #1
 364 000e 07D1     		bne	.L6
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 365              		.loc 1 164 27
 366 0010 054B     		ldr	r3, .L7
 367 0012 0022     		movs	r2, #0
 368 0014 1A60     		str	r2, [r3]
 165:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 369              		.loc 1 165 5
 370 0016 054B     		ldr	r3, .L7+4
 371 0018 1B68     		ldr	r3, [r3]
 372 001a 1846     		mov	r0, r3
 373 001c FFF7FEFF 		bl	osSemaphoreRelease
 374              	.L6:
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c **** }
 375              		.loc 1 167 1
 376 0020 00BF     		nop
 377 0022 0837     		adds	r7, r7, #8
 378              	.LCFI8:
 379              		.cfi_def_cfa_offset 8
 380 0024 BD46     		mov	sp, r7
 381              	.LCFI9:
 382              		.cfi_def_cfa_register 13
 383              		@ sp needed
 384 0026 80BD     		pop	{r7, pc}
 385              	.L8:
 386              		.align	2
 387              	.L7:
 388 0028 00000000 		.word	TxMailboxFuelCellTask
 389 002c 00000000 		.word	canMsgOkSemHandle
 390              		.cfi_endproc
 391              	.LFE137:
 393              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 394              		.align	1
 395              		.global	HAL_CAN_TxMailbox1CompleteCallback
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
ARM GAS  /tmp/ccgNVCWq.s 			page 11


 400              	HAL_CAN_TxMailbox1CompleteCallback:
 401              	.LFB138:
 168:Core/Src/main.c **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 169:Core/Src/main.c **** {
 402              		.loc 1 169 1
 403              		.cfi_startproc
 404              		@ args = 0, pretend = 0, frame = 8
 405              		@ frame_needed = 1, uses_anonymous_args = 0
 406 0000 80B5     		push	{r7, lr}
 407              	.LCFI10:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 7, -8
 410              		.cfi_offset 14, -4
 411 0002 82B0     		sub	sp, sp, #8
 412              	.LCFI11:
 413              		.cfi_def_cfa_offset 16
 414 0004 00AF     		add	r7, sp, #0
 415              	.LCFI12:
 416              		.cfi_def_cfa_register 7
 417 0006 7860     		str	r0, [r7, #4]
 170:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX1)
 418              		.loc 1 170 29
 419 0008 074B     		ldr	r3, .L12
 420 000a 1B68     		ldr	r3, [r3]
 421              		.loc 1 170 6
 422 000c 022B     		cmp	r3, #2
 423 000e 07D1     		bne	.L11
 171:Core/Src/main.c ****   {
 172:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 424              		.loc 1 172 27
 425 0010 054B     		ldr	r3, .L12
 426 0012 0022     		movs	r2, #0
 427 0014 1A60     		str	r2, [r3]
 173:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 428              		.loc 1 173 5
 429 0016 054B     		ldr	r3, .L12+4
 430 0018 1B68     		ldr	r3, [r3]
 431 001a 1846     		mov	r0, r3
 432 001c FFF7FEFF 		bl	osSemaphoreRelease
 433              	.L11:
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** }
 434              		.loc 1 175 1
 435 0020 00BF     		nop
 436 0022 0837     		adds	r7, r7, #8
 437              	.LCFI13:
 438              		.cfi_def_cfa_offset 8
 439 0024 BD46     		mov	sp, r7
 440              	.LCFI14:
 441              		.cfi_def_cfa_register 13
 442              		@ sp needed
 443 0026 80BD     		pop	{r7, pc}
 444              	.L13:
 445              		.align	2
 446              	.L12:
 447 0028 00000000 		.word	TxMailboxFuelCellTask
 448 002c 00000000 		.word	canMsgOkSemHandle
ARM GAS  /tmp/ccgNVCWq.s 			page 12


 449              		.cfi_endproc
 450              	.LFE138:
 452              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 453              		.align	1
 454              		.global	HAL_CAN_TxMailbox2CompleteCallback
 455              		.syntax unified
 456              		.thumb
 457              		.thumb_func
 459              	HAL_CAN_TxMailbox2CompleteCallback:
 460              	.LFB139:
 176:Core/Src/main.c **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 177:Core/Src/main.c **** {
 461              		.loc 1 177 1
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 8
 464              		@ frame_needed = 1, uses_anonymous_args = 0
 465 0000 80B5     		push	{r7, lr}
 466              	.LCFI15:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 82B0     		sub	sp, sp, #8
 471              	.LCFI16:
 472              		.cfi_def_cfa_offset 16
 473 0004 00AF     		add	r7, sp, #0
 474              	.LCFI17:
 475              		.cfi_def_cfa_register 7
 476 0006 7860     		str	r0, [r7, #4]
 178:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX2)
 477              		.loc 1 178 29
 478 0008 074B     		ldr	r3, .L17
 479 000a 1B68     		ldr	r3, [r3]
 480              		.loc 1 178 6
 481 000c 042B     		cmp	r3, #4
 482 000e 07D1     		bne	.L16
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 483              		.loc 1 180 27
 484 0010 054B     		ldr	r3, .L17
 485 0012 0022     		movs	r2, #0
 486 0014 1A60     		str	r2, [r3]
 181:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 487              		.loc 1 181 5
 488 0016 054B     		ldr	r3, .L17+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a 1846     		mov	r0, r3
 491 001c FFF7FEFF 		bl	osSemaphoreRelease
 492              	.L16:
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** }
 493              		.loc 1 183 1
 494 0020 00BF     		nop
 495 0022 0837     		adds	r7, r7, #8
 496              	.LCFI18:
 497              		.cfi_def_cfa_offset 8
 498 0024 BD46     		mov	sp, r7
 499              	.LCFI19:
ARM GAS  /tmp/ccgNVCWq.s 			page 13


 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 0026 80BD     		pop	{r7, pc}
 503              	.L18:
 504              		.align	2
 505              	.L17:
 506 0028 00000000 		.word	TxMailboxFuelCellTask
 507 002c 00000000 		.word	canMsgOkSemHandle
 508              		.cfi_endproc
 509              	.LFE139:
 511              		.section	.rodata
 512              		.align	2
 513              	.LC4:
 514 002c 0D0A0942 		.ascii	"\015\012\011Buffer Overflowed - Message Lost\015\012"
 514      75666665 
 514      72204F76 
 514      6572666C 
 514      6F776564 
 515 0051 00       		.ascii	"\000"
 516              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 517              		.align	1
 518              		.global	HAL_UART_RxCpltCallback
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 523              	HAL_UART_RxCpltCallback:
 524              	.LFB140:
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 186:Core/Src/main.c **** {
 525              		.loc 1 186 1
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 48
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529 0000 B0B5     		push	{r4, r5, r7, lr}
 530              	.LCFI20:
 531              		.cfi_def_cfa_offset 16
 532              		.cfi_offset 4, -16
 533              		.cfi_offset 5, -12
 534              		.cfi_offset 7, -8
 535              		.cfi_offset 14, -4
 536 0002 8CB0     		sub	sp, sp, #48
 537              	.LCFI21:
 538              		.cfi_def_cfa_offset 64
 539 0004 00AF     		add	r7, sp, #0
 540              	.LCFI22:
 541              		.cfi_def_cfa_register 7
 542 0006 7860     		str	r0, [r7, #4]
 187:Core/Src/main.c ****   if (RxUARTbuff == (char)0x04)
 543              		.loc 1 187 18
 544 0008 204B     		ldr	r3, .L23
 545 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 546              		.loc 1 187 6
 547 000c 042B     		cmp	r3, #4
 548 000e 0BD1     		bne	.L20
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     // RxUARTData[UartIndex++] = '\r';
ARM GAS  /tmp/ccgNVCWq.s 			page 14


 190:Core/Src/main.c ****     // RxUARTData[UartIndex] = '\n';
 191:Core/Src/main.c ****     HAL_UART_Transmit_DMA(huart, RxUARTData, UartIndex);
 549              		.loc 1 191 5
 550 0010 1F4B     		ldr	r3, .L23+4
 551 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 552 0014 9BB2     		uxth	r3, r3
 553 0016 1A46     		mov	r2, r3
 554 0018 1E49     		ldr	r1, .L23+8
 555 001a 7868     		ldr	r0, [r7, #4]
 556 001c FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 192:Core/Src/main.c ****     UartIndex = 0;
 557              		.loc 1 192 15
 558 0020 1B4B     		ldr	r3, .L23+4
 559 0022 0022     		movs	r2, #0
 560 0024 1A70     		strb	r2, [r3]
 561 0026 28E0     		b	.L21
 562              	.L20:
 193:Core/Src/main.c ****   }
 194:Core/Src/main.c ****   else
 195:Core/Src/main.c ****   {
 196:Core/Src/main.c ****     RxUARTData[UartIndex] = RxUARTbuff;
 563              		.loc 1 196 15
 564 0028 194B     		ldr	r3, .L23+4
 565 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 566 002c 1A46     		mov	r2, r3
 567              		.loc 1 196 27
 568 002e 174B     		ldr	r3, .L23
 569 0030 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 570 0032 184B     		ldr	r3, .L23+8
 571 0034 9954     		strb	r1, [r3, r2]
 197:Core/Src/main.c ****     if (UartIndex == (sizeof(RxUARTData) - 1))
 572              		.loc 1 197 19
 573 0036 164B     		ldr	r3, .L23+4
 574 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 575              		.loc 1 197 8
 576 003a 1F2B     		cmp	r3, #31
 577 003c 17D1     		bne	.L22
 578              	.LBB4:
 198:Core/Src/main.c ****     {
 199:Core/Src/main.c ****       uint8_t msg[] = "\r\n\tBuffer Overflowed - Message Lost\r\n";
 579              		.loc 1 199 15
 580 003e 164B     		ldr	r3, .L23+12
 581 0040 07F10804 		add	r4, r7, #8
 582 0044 1D46     		mov	r5, r3
 583 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 584 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 585 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 586 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 587 004e 95E80300 		ldm	r5, {r0, r1}
 588 0052 2060     		str	r0, [r4]
 589 0054 0434     		adds	r4, r4, #4
 590 0056 2180     		strh	r1, [r4]	@ movhi
 200:Core/Src/main.c ****       HAL_UART_Transmit_DMA(huart, msg, sizeof(msg));
 591              		.loc 1 200 7
 592 0058 07F10803 		add	r3, r7, #8
 593 005c 2622     		movs	r2, #38
 594 005e 1946     		mov	r1, r3
ARM GAS  /tmp/ccgNVCWq.s 			page 15


 595 0060 7868     		ldr	r0, [r7, #4]
 596 0062 FFF7FEFF 		bl	HAL_UART_Transmit_DMA
 201:Core/Src/main.c ****       UartIndex = 0;
 597              		.loc 1 201 17
 598 0066 0A4B     		ldr	r3, .L23+4
 599 0068 0022     		movs	r2, #0
 600 006a 1A70     		strb	r2, [r3]
 601              	.LBE4:
 602 006c 05E0     		b	.L21
 603              	.L22:
 202:Core/Src/main.c ****     }
 203:Core/Src/main.c ****     else
 204:Core/Src/main.c ****     {
 205:Core/Src/main.c ****       UartIndex++;
 604              		.loc 1 205 16
 605 006e 084B     		ldr	r3, .L23+4
 606 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 607 0072 0133     		adds	r3, r3, #1
 608 0074 DAB2     		uxtb	r2, r3
 609 0076 064B     		ldr	r3, .L23+4
 610 0078 1A70     		strb	r2, [r3]
 611              	.L21:
 206:Core/Src/main.c ****     }
 207:Core/Src/main.c ****   }
 208:Core/Src/main.c ****   HAL_UART_Receive_DMA(huart, &RxUARTbuff, 1U);
 612              		.loc 1 208 3
 613 007a 0122     		movs	r2, #1
 614 007c 0349     		ldr	r1, .L23
 615 007e 7868     		ldr	r0, [r7, #4]
 616 0080 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 209:Core/Src/main.c **** }
 617              		.loc 1 209 1
 618 0084 00BF     		nop
 619 0086 3037     		adds	r7, r7, #48
 620              	.LCFI23:
 621              		.cfi_def_cfa_offset 16
 622 0088 BD46     		mov	sp, r7
 623              	.LCFI24:
 624              		.cfi_def_cfa_register 13
 625              		@ sp needed
 626 008a B0BD     		pop	{r4, r5, r7, pc}
 627              	.L24:
 628              		.align	2
 629              	.L23:
 630 008c 00000000 		.word	RxUARTbuff
 631 0090 00000000 		.word	UartIndex
 632 0094 00000000 		.word	RxUARTData
 633 0098 2C000000 		.word	.LC4
 634              		.cfi_endproc
 635              	.LFE140:
 637              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 638              		.align	1
 639              		.global	HAL_GPIO_EXTI_Callback
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
 644              	HAL_GPIO_EXTI_Callback:
ARM GAS  /tmp/ccgNVCWq.s 			page 16


 645              	.LFB141:
 210:Core/Src/main.c **** 
 211:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 212:Core/Src/main.c **** {
 646              		.loc 1 212 1
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 8
 649              		@ frame_needed = 1, uses_anonymous_args = 0
 650 0000 80B5     		push	{r7, lr}
 651              	.LCFI25:
 652              		.cfi_def_cfa_offset 8
 653              		.cfi_offset 7, -8
 654              		.cfi_offset 14, -4
 655 0002 82B0     		sub	sp, sp, #8
 656              	.LCFI26:
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              	.LCFI27:
 660              		.cfi_def_cfa_register 7
 661 0006 0346     		mov	r3, r0
 662 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 213:Core/Src/main.c ****   switch (GPIO_Pin)
 663              		.loc 1 213 3
 664 000a FB88     		ldrh	r3, [r7, #6]
 665 000c B3F5004F 		cmp	r3, #32768
 666 0010 48D0     		beq	.L38
 667 0012 B3F5004F 		cmp	r3, #32768
 668 0016 47DC     		bgt	.L39
 669 0018 B3F5804F 		cmp	r3, #16384
 670 001c 0FD0     		beq	.L28
 671 001e B3F5804F 		cmp	r3, #16384
 672 0022 41DC     		bgt	.L39
 673 0024 402B     		cmp	r3, #64
 674 0026 39D0     		beq	.L29
 675 0028 402B     		cmp	r3, #64
 676 002a 3DDC     		bgt	.L39
 677 002c 202B     		cmp	r3, #32
 678 002e 3DD0     		beq	.L40
 679 0030 202B     		cmp	r3, #32
 680 0032 39DC     		bgt	.L39
 681 0034 082B     		cmp	r3, #8
 682 0036 23D0     		beq	.L31
 683 0038 102B     		cmp	r3, #16
 684 003a 39D0     		beq	.L41
 214:Core/Src/main.c ****   {
 215:Core/Src/main.c ****   case BRD_STRT_Pin:
 216:Core/Src/main.c ****     if (HAL_GetTick() - button_debounce > 1000)
 217:Core/Src/main.c ****     {
 218:Core/Src/main.c ****       if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE)) // If 
 219:Core/Src/main.c ****       {
 220:Core/Src/main.c ****         button_debounce = HAL_GetTick();
 221:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 222:Core/Src/main.c ****       }
 223:Core/Src/main.c ****       else
 224:Core/Src/main.c ****       {
 225:Core/Src/main.c ****         button_debounce = HAL_GetTick();
 226:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
ARM GAS  /tmp/ccgNVCWq.s 			page 17


 227:Core/Src/main.c ****       }
 228:Core/Src/main.c ****     }
 229:Core/Src/main.c ****     break;
 230:Core/Src/main.c ****   case BRD_PRGE_Pin:
 231:Core/Src/main.c ****     /* Do something */
 232:Core/Src/main.c ****     break;
 233:Core/Src/main.c ****   case EXT_STRT_Pin:
 234:Core/Src/main.c ****     if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE))
 235:Core/Src/main.c ****     {
 236:Core/Src/main.c ****       fc_state = FUEL_CELL_OFF_STATE;
 237:Core/Src/main.c ****     }
 238:Core/Src/main.c ****     else
 239:Core/Src/main.c ****     {
 240:Core/Src/main.c ****       fc_state = FUEL_CELL_STRTUP_STATE;
 241:Core/Src/main.c ****     }
 242:Core/Src/main.c ****     break;
 243:Core/Src/main.c ****   case ACC_INT1_Pin:
 244:Core/Src/main.c ****     /* Do something */
 245:Core/Src/main.c ****     break;
 246:Core/Src/main.c ****   case ACC_INT2_Pin:
 247:Core/Src/main.c ****     /* Do something */
 248:Core/Src/main.c ****     break;
 249:Core/Src/main.c ****   case EXT_STOP_Pin:
 250:Core/Src/main.c ****     /* Do something */
 251:Core/Src/main.c ****     fc_state = FUEL_CELL_OFF_STATE;
 252:Core/Src/main.c ****     break;
 253:Core/Src/main.c ****   default:
 254:Core/Src/main.c ****     /* Should never happen */
 255:Core/Src/main.c ****     break;
 685              		.loc 1 255 5
 686 003c 34E0     		b	.L39
 687              	.L28:
 216:Core/Src/main.c ****     {
 688              		.loc 1 216 9
 689 003e FFF7FEFF 		bl	HAL_GetTick
 690 0042 0246     		mov	r2, r0
 216:Core/Src/main.c ****     {
 691              		.loc 1 216 23
 692 0044 1E4B     		ldr	r3, .L44
 693 0046 1B68     		ldr	r3, [r3]
 694 0048 D31A     		subs	r3, r2, r3
 216:Core/Src/main.c ****     {
 695              		.loc 1 216 8
 696 004a B3F57A7F 		cmp	r3, #1000
 697 004e 31D9     		bls	.L42
 218:Core/Src/main.c ****       {
 698              		.loc 1 218 20
 699 0050 1C4B     		ldr	r3, .L44+4
 700 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 701 0054 03F00703 		and	r3, r3, #7
 218:Core/Src/main.c ****       {
 702              		.loc 1 218 10
 703 0058 002B     		cmp	r3, #0
 704 005a 08D0     		beq	.L34
 220:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 705              		.loc 1 220 27
 706 005c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccgNVCWq.s 			page 18


 707 0060 0346     		mov	r3, r0
 220:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 708              		.loc 1 220 25
 709 0062 174A     		ldr	r2, .L44
 710 0064 1360     		str	r3, [r2]
 221:Core/Src/main.c ****       }
 711              		.loc 1 221 18
 712 0066 174B     		ldr	r3, .L44+4
 713 0068 0022     		movs	r2, #0
 714 006a 1A70     		strb	r2, [r3]
 229:Core/Src/main.c ****   case BRD_PRGE_Pin:
 715              		.loc 1 229 5
 716 006c 22E0     		b	.L42
 717              	.L34:
 225:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 718              		.loc 1 225 27
 719 006e FFF7FEFF 		bl	HAL_GetTick
 720 0072 0346     		mov	r3, r0
 225:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 721              		.loc 1 225 25
 722 0074 124A     		ldr	r2, .L44
 723 0076 1360     		str	r3, [r2]
 226:Core/Src/main.c ****       }
 724              		.loc 1 226 18
 725 0078 124B     		ldr	r3, .L44+4
 726 007a 0122     		movs	r2, #1
 727 007c 1A70     		strb	r2, [r3]
 229:Core/Src/main.c ****   case BRD_PRGE_Pin:
 728              		.loc 1 229 5
 729 007e 19E0     		b	.L42
 730              	.L31:
 234:Core/Src/main.c ****     {
 731              		.loc 1 234 18
 732 0080 104B     		ldr	r3, .L44+4
 733 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 734 0084 03F00703 		and	r3, r3, #7
 234:Core/Src/main.c ****     {
 735              		.loc 1 234 8
 736 0088 002B     		cmp	r3, #0
 737 008a 03D0     		beq	.L36
 236:Core/Src/main.c ****     }
 738              		.loc 1 236 16
 739 008c 0D4B     		ldr	r3, .L44+4
 740 008e 0022     		movs	r2, #0
 741 0090 1A70     		strb	r2, [r3]
 242:Core/Src/main.c ****   case ACC_INT1_Pin:
 742              		.loc 1 242 5
 743 0092 10E0     		b	.L35
 744              	.L36:
 240:Core/Src/main.c ****     }
 745              		.loc 1 240 16
 746 0094 0B4B     		ldr	r3, .L44+4
 747 0096 0122     		movs	r2, #1
 748 0098 1A70     		strb	r2, [r3]
 242:Core/Src/main.c ****   case ACC_INT1_Pin:
 749              		.loc 1 242 5
 750 009a 0CE0     		b	.L35
ARM GAS  /tmp/ccgNVCWq.s 			page 19


 751              	.L29:
 251:Core/Src/main.c ****     break;
 752              		.loc 1 251 14
 753 009c 094B     		ldr	r3, .L44+4
 754 009e 0022     		movs	r2, #0
 755 00a0 1A70     		strb	r2, [r3]
 252:Core/Src/main.c ****   default:
 756              		.loc 1 252 5
 757 00a2 08E0     		b	.L35
 758              	.L38:
 232:Core/Src/main.c ****   case EXT_STRT_Pin:
 759              		.loc 1 232 5
 760 00a4 00BF     		nop
 761 00a6 06E0     		b	.L43
 762              	.L39:
 763              		.loc 1 255 5
 764 00a8 00BF     		nop
 765 00aa 04E0     		b	.L43
 766              	.L40:
 248:Core/Src/main.c ****   case EXT_STOP_Pin:
 767              		.loc 1 248 5
 768 00ac 00BF     		nop
 769 00ae 02E0     		b	.L43
 770              	.L41:
 245:Core/Src/main.c ****   case ACC_INT2_Pin:
 771              		.loc 1 245 5
 772 00b0 00BF     		nop
 773 00b2 00E0     		b	.L43
 774              	.L42:
 229:Core/Src/main.c ****   case BRD_PRGE_Pin:
 775              		.loc 1 229 5
 776 00b4 00BF     		nop
 777              	.L35:
 778              	.L43:
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c **** }
 779              		.loc 1 257 1
 780 00b6 00BF     		nop
 781 00b8 0837     		adds	r7, r7, #8
 782              	.LCFI28:
 783              		.cfi_def_cfa_offset 8
 784 00ba BD46     		mov	sp, r7
 785              	.LCFI29:
 786              		.cfi_def_cfa_register 13
 787              		@ sp needed
 788 00bc 80BD     		pop	{r7, pc}
 789              	.L45:
 790 00be 00BF     		.align	2
 791              	.L44:
 792 00c0 00000000 		.word	button_debounce
 793 00c4 00000000 		.word	fc_state
 794              		.cfi_endproc
 795              	.LFE141:
 797              		.section	.text.main,"ax",%progbits
 798              		.align	1
 799              		.global	main
 800              		.syntax unified
ARM GAS  /tmp/ccgNVCWq.s 			page 20


 801              		.thumb
 802              		.thumb_func
 804              	main:
 805              	.LFB142:
 258:Core/Src/main.c **** /* USER CODE END PFP */
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 261:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c **** /* USER CODE END 0 */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c **** /**
 266:Core/Src/main.c ****  * @brief  The application entry point.
 267:Core/Src/main.c ****  * @retval int
 268:Core/Src/main.c ****  */
 269:Core/Src/main.c **** int main(void)
 270:Core/Src/main.c **** {
 806              		.loc 1 270 1
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 1, uses_anonymous_args = 0
 810 0000 80B5     		push	{r7, lr}
 811              	.LCFI30:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 7, -8
 814              		.cfi_offset 14, -4
 815 0002 00AF     		add	r7, sp, #0
 816              	.LCFI31:
 817              		.cfi_def_cfa_register 7
 271:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE END 1 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 278:Core/Src/main.c ****   HAL_Init();
 818              		.loc 1 278 3
 819 0004 FFF7FEFF 		bl	HAL_Init
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE END Init */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* Configure the system clock */
 285:Core/Src/main.c ****   SystemClock_Config();
 820              		.loc 1 285 3
 821 0008 FFF7FEFF 		bl	SystemClock_Config
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE END SysInit */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* Initialize all configured peripherals */
 292:Core/Src/main.c ****   MX_GPIO_Init();
 822              		.loc 1 292 3
 823 000c FFF7FEFF 		bl	MX_GPIO_Init
ARM GAS  /tmp/ccgNVCWq.s 			page 21


 293:Core/Src/main.c ****   MX_DMA_Init();
 824              		.loc 1 293 3
 825 0010 FFF7FEFF 		bl	MX_DMA_Init
 294:Core/Src/main.c ****   MX_CAN1_Init();
 826              		.loc 1 294 3
 827 0014 FFF7FEFF 		bl	MX_CAN1_Init
 295:Core/Src/main.c ****   MX_I2C1_Init();
 828              		.loc 1 295 3
 829 0018 FFF7FEFF 		bl	MX_I2C1_Init
 296:Core/Src/main.c ****   MX_USART1_UART_Init();
 830              		.loc 1 296 3
 831 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 297:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 298:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 832              		.loc 1 298 3
 833 0020 2548     		ldr	r0, .L50
 834 0022 FFF7FEFF 		bl	HAL_CAN_Start
 299:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 835              		.loc 1 299 3
 836 0026 0221     		movs	r1, #2
 837 0028 2348     		ldr	r0, .L50
 838 002a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 300:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 839              		.loc 1 300 3
 840 002e 0121     		movs	r1, #1
 841 0030 2148     		ldr	r0, .L50
 842 0032 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   button_debounce = HAL_GetTick();
 843              		.loc 1 302 21
 844 0036 FFF7FEFF 		bl	HAL_GetTick
 845 003a 0346     		mov	r3, r0
 846              		.loc 1 302 19
 847 003c 1F4A     		ldr	r2, .L50+4
 848 003e 1360     		str	r3, [r2]
 303:Core/Src/main.c ****   HAL_GPIO_WritePin(FTDI_NRST_GPIO_Port, FTDI_NRST_Pin, GPIO_PIN_SET);
 849              		.loc 1 303 3
 850 0040 0122     		movs	r2, #1
 851 0042 0221     		movs	r1, #2
 852 0044 1E48     		ldr	r0, .L50+8
 853 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   HAL_UART_Receive_DMA(&huart1, &RxUARTbuff, 1U);
 854              		.loc 1 305 3
 855 004a 0122     		movs	r2, #1
 856 004c 1D49     		ldr	r1, .L50+12
 857 004e 1E48     		ldr	r0, .L50+16
 858 0050 FFF7FEFF 		bl	HAL_UART_Receive_DMA
 306:Core/Src/main.c ****   /* USER CODE END 2 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* Init scheduler */
 309:Core/Src/main.c ****   osKernelInitialize();
 859              		.loc 1 309 3
 860 0054 FFF7FEFF 		bl	osKernelInitialize
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 312:Core/Src/main.c ****   /* add mutexes, ... */
ARM GAS  /tmp/ccgNVCWq.s 			page 22


 313:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* Create the semaphores(s) */
 316:Core/Src/main.c ****   /* creation of canMsgOkSem */
 317:Core/Src/main.c ****   canMsgOkSemHandle = osSemaphoreNew(1, 0, &canMsgOkSem_attributes);
 861              		.loc 1 317 23
 862 0058 1C4A     		ldr	r2, .L50+20
 863 005a 0021     		movs	r1, #0
 864 005c 0120     		movs	r0, #1
 865 005e FFF7FEFF 		bl	osSemaphoreNew
 866 0062 0346     		mov	r3, r0
 867              		.loc 1 317 21
 868 0064 1A4A     		ldr	r2, .L50+24
 869 0066 1360     		str	r3, [r2]
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 320:Core/Src/main.c ****   /* add semaphores, ... */
 321:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 324:Core/Src/main.c ****   /* start timers, add new ones, ... */
 325:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 328:Core/Src/main.c ****   /* add queues, ... */
 329:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* Create the thread(s) */
 332:Core/Src/main.c ****   /* creation of CanTask */
 333:Core/Src/main.c ****   CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 870              		.loc 1 333 19
 871 0068 1A4A     		ldr	r2, .L50+28
 872 006a 0021     		movs	r1, #0
 873 006c 1A48     		ldr	r0, .L50+32
 874 006e FFF7FEFF 		bl	osThreadNew
 875 0072 0346     		mov	r3, r0
 876              		.loc 1 333 17
 877 0074 194A     		ldr	r2, .L50+36
 878 0076 1360     		str	r3, [r2]
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* creation of I2cTask */
 336:Core/Src/main.c ****   I2cTaskHandle = osThreadNew(StartI2cTask, NULL, &I2cTask_attributes);
 879              		.loc 1 336 19
 880 0078 194A     		ldr	r2, .L50+40
 881 007a 0021     		movs	r1, #0
 882 007c 1948     		ldr	r0, .L50+44
 883 007e FFF7FEFF 		bl	osThreadNew
 884 0082 0346     		mov	r3, r0
 885              		.loc 1 336 17
 886 0084 184A     		ldr	r2, .L50+48
 887 0086 1360     		str	r3, [r2]
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* creation of FuelCellTask */
 339:Core/Src/main.c ****   FuelCellTaskHandle = osThreadNew(StartFuelCellTask, NULL, &FuelCellTask_attributes);
 888              		.loc 1 339 24
 889 0088 184A     		ldr	r2, .L50+52
 890 008a 0021     		movs	r1, #0
ARM GAS  /tmp/ccgNVCWq.s 			page 23


 891 008c 1848     		ldr	r0, .L50+56
 892 008e FFF7FEFF 		bl	osThreadNew
 893 0092 0346     		mov	r3, r0
 894              		.loc 1 339 22
 895 0094 174A     		ldr	r2, .L50+60
 896 0096 1360     		str	r3, [r2]
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 342:Core/Src/main.c ****   if (CanTaskHandle == NULL || I2cTaskHandle == NULL || FuelCellTaskHandle == NULL)
 897              		.loc 1 342 21
 898 0098 104B     		ldr	r3, .L50+36
 899 009a 1B68     		ldr	r3, [r3]
 900              		.loc 1 342 6
 901 009c 002B     		cmp	r3, #0
 902 009e 07D0     		beq	.L47
 903              		.loc 1 342 46 discriminator 1
 904 00a0 114B     		ldr	r3, .L50+48
 905 00a2 1B68     		ldr	r3, [r3]
 906              		.loc 1 342 29 discriminator 1
 907 00a4 002B     		cmp	r3, #0
 908 00a6 03D0     		beq	.L47
 909              		.loc 1 342 76 discriminator 2
 910 00a8 124B     		ldr	r3, .L50+60
 911 00aa 1B68     		ldr	r3, [r3]
 912              		.loc 1 342 54 discriminator 2
 913 00ac 002B     		cmp	r3, #0
 914 00ae 00D1     		bne	.L48
 915              	.L47:
 343:Core/Src/main.c ****   {
 344:Core/Src/main.c ****     while (1)
 916              		.loc 1 344 11 discriminator 1
 917 00b0 FEE7     		b	.L47
 918              	.L48:
 345:Core/Src/main.c ****       ;
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /* add threads, ... */
 348:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 351:Core/Src/main.c ****   /* add events, ... */
 352:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* Start scheduler */
 355:Core/Src/main.c ****   osKernelStart();
 919              		.loc 1 355 3
 920 00b2 FFF7FEFF 		bl	osKernelStart
 921              	.L49:
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 358:Core/Src/main.c ****   /* Infinite loop */
 359:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 360:Core/Src/main.c ****   while (1)
 922              		.loc 1 360 9 discriminator 2
 923 00b6 FEE7     		b	.L49
 924              	.L51:
 925              		.align	2
 926              	.L50:
ARM GAS  /tmp/ccgNVCWq.s 			page 24


 927 00b8 00000000 		.word	hcan1
 928 00bc 00000000 		.word	button_debounce
 929 00c0 00040048 		.word	1207960576
 930 00c4 00000000 		.word	RxUARTbuff
 931 00c8 00000000 		.word	huart1
 932 00cc 00000000 		.word	canMsgOkSem_attributes
 933 00d0 00000000 		.word	canMsgOkSemHandle
 934 00d4 00000000 		.word	CanTask_attributes
 935 00d8 00000000 		.word	StartCanTask
 936 00dc 00000000 		.word	CanTaskHandle
 937 00e0 00000000 		.word	I2cTask_attributes
 938 00e4 00000000 		.word	StartI2cTask
 939 00e8 00000000 		.word	I2cTaskHandle
 940 00ec 00000000 		.word	FuelCellTask_attributes
 941 00f0 00000000 		.word	StartFuelCellTask
 942 00f4 00000000 		.word	FuelCellTaskHandle
 943              		.cfi_endproc
 944              	.LFE142:
 946              		.section	.text.SystemClock_Config,"ax",%progbits
 947              		.align	1
 948              		.global	SystemClock_Config
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	SystemClock_Config:
 954              	.LFB143:
 361:Core/Src/main.c ****   {
 362:Core/Src/main.c ****     /* USER CODE END WHILE */
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 365:Core/Src/main.c ****   }
 366:Core/Src/main.c ****   /* USER CODE END 3 */
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /**
 370:Core/Src/main.c ****  * @brief System Clock Configuration
 371:Core/Src/main.c ****  * @retval None
 372:Core/Src/main.c ****  */
 373:Core/Src/main.c **** void SystemClock_Config(void)
 374:Core/Src/main.c **** {
 955              		.loc 1 374 1
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 88
 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}
 960              	.LCFI32:
 961              		.cfi_def_cfa_offset 8
 962              		.cfi_offset 7, -8
 963              		.cfi_offset 14, -4
 964 0002 96B0     		sub	sp, sp, #88
 965              	.LCFI33:
 966              		.cfi_def_cfa_offset 96
 967 0004 00AF     		add	r7, sp, #0
 968              	.LCFI34:
 969              		.cfi_def_cfa_register 7
 375:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 970              		.loc 1 375 22
ARM GAS  /tmp/ccgNVCWq.s 			page 25


 971 0006 07F11403 		add	r3, r7, #20
 972 000a 4422     		movs	r2, #68
 973 000c 0021     		movs	r1, #0
 974 000e 1846     		mov	r0, r3
 975 0010 FFF7FEFF 		bl	memset
 376:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 976              		.loc 1 376 22
 977 0014 3B46     		mov	r3, r7
 978 0016 0022     		movs	r2, #0
 979 0018 1A60     		str	r2, [r3]
 980 001a 5A60     		str	r2, [r3, #4]
 981 001c 9A60     		str	r2, [r3, #8]
 982 001e DA60     		str	r2, [r3, #12]
 983 0020 1A61     		str	r2, [r3, #16]
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 379:Core/Src/main.c ****    */
 380:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 984              		.loc 1 380 7
 985 0022 4FF40070 		mov	r0, #512
 986 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 987 002a 0346     		mov	r3, r0
 988              		.loc 1 380 6
 989 002c 002B     		cmp	r3, #0
 990 002e 01D0     		beq	.L53
 381:Core/Src/main.c ****   {
 382:Core/Src/main.c ****     Error_Handler();
 991              		.loc 1 382 5
 992 0030 FFF7FEFF 		bl	Error_Handler
 993              	.L53:
 383:Core/Src/main.c ****   }
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 386:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 387:Core/Src/main.c ****    */
 388:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 994              		.loc 1 388 36
 995 0034 0123     		movs	r3, #1
 996 0036 7B61     		str	r3, [r7, #20]
 389:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 997              		.loc 1 389 30
 998 0038 4FF4A023 		mov	r3, #327680
 999 003c BB61     		str	r3, [r7, #24]
 390:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1000              		.loc 1 390 34
 1001 003e 0223     		movs	r3, #2
 1002 0040 FB63     		str	r3, [r7, #60]
 391:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1003              		.loc 1 391 35
 1004 0042 0323     		movs	r3, #3
 1005 0044 3B64     		str	r3, [r7, #64]
 392:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 1006              		.loc 1 392 30
 1007 0046 0123     		movs	r3, #1
 1008 0048 7B64     		str	r3, [r7, #68]
 393:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
 1009              		.loc 1 393 30
ARM GAS  /tmp/ccgNVCWq.s 			page 26


 1010 004a 1423     		movs	r3, #20
 1011 004c BB64     		str	r3, [r7, #72]
 394:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 1012              		.loc 1 394 30
 1013 004e 0723     		movs	r3, #7
 1014 0050 FB64     		str	r3, [r7, #76]
 395:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 1015              		.loc 1 395 30
 1016 0052 0223     		movs	r3, #2
 1017 0054 3B65     		str	r3, [r7, #80]
 396:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 1018              		.loc 1 396 30
 1019 0056 0223     		movs	r3, #2
 1020 0058 7B65     		str	r3, [r7, #84]
 397:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1021              		.loc 1 397 7
 1022 005a 07F11403 		add	r3, r7, #20
 1023 005e 1846     		mov	r0, r3
 1024 0060 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1025 0064 0346     		mov	r3, r0
 1026              		.loc 1 397 6
 1027 0066 002B     		cmp	r3, #0
 1028 0068 01D0     		beq	.L54
 398:Core/Src/main.c ****   {
 399:Core/Src/main.c ****     Error_Handler();
 1029              		.loc 1 399 5
 1030 006a FFF7FEFF 		bl	Error_Handler
 1031              	.L54:
 400:Core/Src/main.c ****   }
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 403:Core/Src/main.c ****    */
 404:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 1032              		.loc 1 404 31
 1033 006e 0F23     		movs	r3, #15
 1034 0070 3B60     		str	r3, [r7]
 405:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1035              		.loc 1 405 34
 1036 0072 0323     		movs	r3, #3
 1037 0074 7B60     		str	r3, [r7, #4]
 406:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1038              		.loc 1 406 35
 1039 0076 0023     		movs	r3, #0
 1040 0078 BB60     		str	r3, [r7, #8]
 407:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1041              		.loc 1 407 36
 1042 007a 0023     		movs	r3, #0
 1043 007c FB60     		str	r3, [r7, #12]
 408:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1044              		.loc 1 408 36
 1045 007e 0023     		movs	r3, #0
 1046 0080 3B61     		str	r3, [r7, #16]
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 1047              		.loc 1 410 7
 1048 0082 3B46     		mov	r3, r7
 1049 0084 0421     		movs	r1, #4
ARM GAS  /tmp/ccgNVCWq.s 			page 27


 1050 0086 1846     		mov	r0, r3
 1051 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1052 008c 0346     		mov	r3, r0
 1053              		.loc 1 410 6
 1054 008e 002B     		cmp	r3, #0
 1055 0090 01D0     		beq	.L55
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 1056              		.loc 1 412 5
 1057 0092 FFF7FEFF 		bl	Error_Handler
 1058              	.L55:
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);
 1059              		.loc 1 414 3
 1060 0096 4FF04052 		mov	r2, #805306368
 1061 009a 4FF08061 		mov	r1, #67108864
 1062 009e 0020     		movs	r0, #0
 1063 00a0 FFF7FEFF 		bl	HAL_RCC_MCOConfig
 415:Core/Src/main.c **** }
 1064              		.loc 1 415 1
 1065 00a4 00BF     		nop
 1066 00a6 5837     		adds	r7, r7, #88
 1067              	.LCFI35:
 1068              		.cfi_def_cfa_offset 8
 1069 00a8 BD46     		mov	sp, r7
 1070              	.LCFI36:
 1071              		.cfi_def_cfa_register 13
 1072              		@ sp needed
 1073 00aa 80BD     		pop	{r7, pc}
 1074              		.cfi_endproc
 1075              	.LFE143:
 1077              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1078              		.align	1
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
 1083              	MX_CAN1_Init:
 1084              	.LFB144:
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** /**
 418:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 419:Core/Src/main.c ****  * @param None
 420:Core/Src/main.c ****  * @retval None
 421:Core/Src/main.c ****  */
 422:Core/Src/main.c **** static void MX_CAN1_Init(void)
 423:Core/Src/main.c **** {
 1085              		.loc 1 423 1
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 40
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089 0000 80B5     		push	{r7, lr}
 1090              	.LCFI37:
 1091              		.cfi_def_cfa_offset 8
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 8AB0     		sub	sp, sp, #40
 1095              	.LCFI38:
ARM GAS  /tmp/ccgNVCWq.s 			page 28


 1096              		.cfi_def_cfa_offset 48
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI39:
 1099              		.cfi_def_cfa_register 7
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 432:Core/Src/main.c ****   hcan1.Instance = CAN1;
 1100              		.loc 1 432 18
 1101 0006 284B     		ldr	r3, .L60
 1102 0008 284A     		ldr	r2, .L60+4
 1103 000a 1A60     		str	r2, [r3]
 433:Core/Src/main.c ****   hcan1.Init.Prescaler = 16;
 1104              		.loc 1 433 24
 1105 000c 264B     		ldr	r3, .L60
 1106 000e 1022     		movs	r2, #16
 1107 0010 5A60     		str	r2, [r3, #4]
 434:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 1108              		.loc 1 434 19
 1109 0012 254B     		ldr	r3, .L60
 1110 0014 4FF08042 		mov	r2, #1073741824
 1111 0018 9A60     		str	r2, [r3, #8]
 435:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1112              		.loc 1 435 28
 1113 001a 234B     		ldr	r3, .L60
 1114 001c 0022     		movs	r2, #0
 1115 001e DA60     		str	r2, [r3, #12]
 436:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 1116              		.loc 1 436 23
 1117 0020 214B     		ldr	r3, .L60
 1118 0022 4FF40032 		mov	r2, #131072
 1119 0026 1A61     		str	r2, [r3, #16]
 437:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 1120              		.loc 1 437 23
 1121 0028 1F4B     		ldr	r3, .L60
 1122 002a 0022     		movs	r2, #0
 1123 002c 5A61     		str	r2, [r3, #20]
 438:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1124              		.loc 1 438 32
 1125 002e 1E4B     		ldr	r3, .L60
 1126 0030 0022     		movs	r2, #0
 1127 0032 1A76     		strb	r2, [r3, #24]
 439:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 1128              		.loc 1 439 25
 1129 0034 1C4B     		ldr	r3, .L60
 1130 0036 0022     		movs	r2, #0
 1131 0038 5A76     		strb	r2, [r3, #25]
 440:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 1132              		.loc 1 440 25
 1133 003a 1B4B     		ldr	r3, .L60
 1134 003c 0022     		movs	r2, #0
 1135 003e 9A76     		strb	r2, [r3, #26]
ARM GAS  /tmp/ccgNVCWq.s 			page 29


 441:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 1136              		.loc 1 441 33
 1137 0040 194B     		ldr	r3, .L60
 1138 0042 0022     		movs	r2, #0
 1139 0044 DA76     		strb	r2, [r3, #27]
 442:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1140              		.loc 1 442 32
 1141 0046 184B     		ldr	r3, .L60
 1142 0048 0022     		movs	r2, #0
 1143 004a 1A77     		strb	r2, [r3, #28]
 443:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1144              		.loc 1 443 35
 1145 004c 164B     		ldr	r3, .L60
 1146 004e 0022     		movs	r2, #0
 1147 0050 5A77     		strb	r2, [r3, #29]
 444:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1148              		.loc 1 444 7
 1149 0052 1548     		ldr	r0, .L60
 1150 0054 FFF7FEFF 		bl	HAL_CAN_Init
 1151 0058 0346     		mov	r3, r0
 1152              		.loc 1 444 6
 1153 005a 002B     		cmp	r3, #0
 1154 005c 01D0     		beq	.L57
 445:Core/Src/main.c ****   {
 446:Core/Src/main.c ****     Error_Handler();
 1155              		.loc 1 446 5
 1156 005e FFF7FEFF 		bl	Error_Handler
 1157              	.L57:
 447:Core/Src/main.c ****   }
 448:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 449:Core/Src/main.c ****   CAN_FilterTypeDef sf;
 450:Core/Src/main.c ****   // Accept StdID's 0x100 through 0x1FF
 451:Core/Src/main.c ****   sf.FilterIdHigh = 0x100 << 5;
 1158              		.loc 1 451 19
 1159 0062 4FF40053 		mov	r3, #8192
 1160 0066 3B60     		str	r3, [r7]
 452:Core/Src/main.c ****   sf.FilterMaskIdHigh = 0x700 << 5;
 1161              		.loc 1 452 23
 1162 0068 4FF46043 		mov	r3, #57344
 1163 006c BB60     		str	r3, [r7, #8]
 453:Core/Src/main.c ****   sf.FilterIdLow = 0x0000;
 1164              		.loc 1 453 18
 1165 006e 0023     		movs	r3, #0
 1166 0070 7B60     		str	r3, [r7, #4]
 454:Core/Src/main.c ****   sf.FilterMaskIdLow = 0x0000;
 1167              		.loc 1 454 22
 1168 0072 0023     		movs	r3, #0
 1169 0074 FB60     		str	r3, [r7, #12]
 455:Core/Src/main.c ****   sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 1170              		.loc 1 455 27
 1171 0076 0023     		movs	r3, #0
 1172 0078 3B61     		str	r3, [r7, #16]
 456:Core/Src/main.c ****   sf.FilterBank = 0;
 1173              		.loc 1 456 17
 1174 007a 0023     		movs	r3, #0
 1175 007c 7B61     		str	r3, [r7, #20]
 457:Core/Src/main.c ****   sf.FilterMode = CAN_FILTERMODE_IDMASK;
ARM GAS  /tmp/ccgNVCWq.s 			page 30


 1176              		.loc 1 457 17
 1177 007e 0023     		movs	r3, #0
 1178 0080 BB61     		str	r3, [r7, #24]
 458:Core/Src/main.c ****   sf.FilterScale = CAN_FILTERSCALE_32BIT;
 1179              		.loc 1 458 18
 1180 0082 0123     		movs	r3, #1
 1181 0084 FB61     		str	r3, [r7, #28]
 459:Core/Src/main.c ****   sf.FilterActivation = CAN_FILTER_ENABLE;
 1182              		.loc 1 459 23
 1183 0086 0123     		movs	r3, #1
 1184 0088 3B62     		str	r3, [r7, #32]
 460:Core/Src/main.c ****   if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 1185              		.loc 1 460 7
 1186 008a 3B46     		mov	r3, r7
 1187 008c 1946     		mov	r1, r3
 1188 008e 0648     		ldr	r0, .L60
 1189 0090 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1190 0094 0346     		mov	r3, r0
 1191              		.loc 1 460 6
 1192 0096 002B     		cmp	r3, #0
 1193 0098 01D0     		beq	.L59
 461:Core/Src/main.c ****   {
 462:Core/Src/main.c ****     Error_Handler();
 1194              		.loc 1 462 5
 1195 009a FFF7FEFF 		bl	Error_Handler
 1196              	.L59:
 463:Core/Src/main.c ****   }
 464:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 465:Core/Src/main.c **** }
 1197              		.loc 1 465 1
 1198 009e 00BF     		nop
 1199 00a0 2837     		adds	r7, r7, #40
 1200              	.LCFI40:
 1201              		.cfi_def_cfa_offset 8
 1202 00a2 BD46     		mov	sp, r7
 1203              	.LCFI41:
 1204              		.cfi_def_cfa_register 13
 1205              		@ sp needed
 1206 00a4 80BD     		pop	{r7, pc}
 1207              	.L61:
 1208 00a6 00BF     		.align	2
 1209              	.L60:
 1210 00a8 00000000 		.word	hcan1
 1211 00ac 00640040 		.word	1073767424
 1212              		.cfi_endproc
 1213              	.LFE144:
 1215              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1216              		.align	1
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1221              	MX_I2C1_Init:
 1222              	.LFB145:
 466:Core/Src/main.c **** 
 467:Core/Src/main.c **** /**
 468:Core/Src/main.c ****  * @brief I2C1 Initialization Function
 469:Core/Src/main.c ****  * @param None
ARM GAS  /tmp/ccgNVCWq.s 			page 31


 470:Core/Src/main.c ****  * @retval None
 471:Core/Src/main.c ****  */
 472:Core/Src/main.c **** static void MX_I2C1_Init(void)
 473:Core/Src/main.c **** {
 1223              		.loc 1 473 1
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 1, uses_anonymous_args = 0
 1227 0000 80B5     		push	{r7, lr}
 1228              	.LCFI42:
 1229              		.cfi_def_cfa_offset 8
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 00AF     		add	r7, sp, #0
 1233              	.LCFI43:
 1234              		.cfi_def_cfa_register 7
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 482:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 1235              		.loc 1 482 18
 1236 0004 1B4B     		ldr	r3, .L67
 1237 0006 1C4A     		ldr	r2, .L67+4
 1238 0008 1A60     		str	r2, [r3]
 483:Core/Src/main.c ****   hi2c1.Init.Timing = 0x10909CEC;
 1239              		.loc 1 483 21
 1240 000a 1A4B     		ldr	r3, .L67
 1241 000c 1B4A     		ldr	r2, .L67+8
 1242 000e 5A60     		str	r2, [r3, #4]
 484:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1243              		.loc 1 484 26
 1244 0010 184B     		ldr	r3, .L67
 1245 0012 0022     		movs	r2, #0
 1246 0014 9A60     		str	r2, [r3, #8]
 485:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1247              		.loc 1 485 29
 1248 0016 174B     		ldr	r3, .L67
 1249 0018 0122     		movs	r2, #1
 1250 001a DA60     		str	r2, [r3, #12]
 486:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1251              		.loc 1 486 30
 1252 001c 154B     		ldr	r3, .L67
 1253 001e 0022     		movs	r2, #0
 1254 0020 1A61     		str	r2, [r3, #16]
 487:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1255              		.loc 1 487 26
 1256 0022 144B     		ldr	r3, .L67
 1257 0024 0022     		movs	r2, #0
 1258 0026 5A61     		str	r2, [r3, #20]
 488:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1259              		.loc 1 488 31
 1260 0028 124B     		ldr	r3, .L67
ARM GAS  /tmp/ccgNVCWq.s 			page 32


 1261 002a 0022     		movs	r2, #0
 1262 002c 9A61     		str	r2, [r3, #24]
 489:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1263              		.loc 1 489 30
 1264 002e 114B     		ldr	r3, .L67
 1265 0030 0022     		movs	r2, #0
 1266 0032 DA61     		str	r2, [r3, #28]
 490:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1267              		.loc 1 490 28
 1268 0034 0F4B     		ldr	r3, .L67
 1269 0036 0022     		movs	r2, #0
 1270 0038 1A62     		str	r2, [r3, #32]
 491:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1271              		.loc 1 491 7
 1272 003a 0E48     		ldr	r0, .L67
 1273 003c FFF7FEFF 		bl	HAL_I2C_Init
 1274 0040 0346     		mov	r3, r0
 1275              		.loc 1 491 6
 1276 0042 002B     		cmp	r3, #0
 1277 0044 01D0     		beq	.L63
 492:Core/Src/main.c ****   {
 493:Core/Src/main.c ****     Error_Handler();
 1278              		.loc 1 493 5
 1279 0046 FFF7FEFF 		bl	Error_Handler
 1280              	.L63:
 494:Core/Src/main.c ****   }
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /** Configure Analogue filter
 497:Core/Src/main.c ****    */
 498:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 1281              		.loc 1 498 7
 1282 004a 0021     		movs	r1, #0
 1283 004c 0948     		ldr	r0, .L67
 1284 004e FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 1285 0052 0346     		mov	r3, r0
 1286              		.loc 1 498 6
 1287 0054 002B     		cmp	r3, #0
 1288 0056 01D0     		beq	.L64
 499:Core/Src/main.c ****   {
 500:Core/Src/main.c ****     Error_Handler();
 1289              		.loc 1 500 5
 1290 0058 FFF7FEFF 		bl	Error_Handler
 1291              	.L64:
 501:Core/Src/main.c ****   }
 502:Core/Src/main.c **** 
 503:Core/Src/main.c ****   /** Configure Digital filter
 504:Core/Src/main.c ****    */
 505:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 1292              		.loc 1 505 7
 1293 005c 0021     		movs	r1, #0
 1294 005e 0548     		ldr	r0, .L67
 1295 0060 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 1296 0064 0346     		mov	r3, r0
 1297              		.loc 1 505 6
 1298 0066 002B     		cmp	r3, #0
 1299 0068 01D0     		beq	.L66
 506:Core/Src/main.c ****   {
ARM GAS  /tmp/ccgNVCWq.s 			page 33


 507:Core/Src/main.c ****     Error_Handler();
 1300              		.loc 1 507 5
 1301 006a FFF7FEFF 		bl	Error_Handler
 1302              	.L66:
 508:Core/Src/main.c ****   }
 509:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 510:Core/Src/main.c **** 
 511:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 512:Core/Src/main.c **** }
 1303              		.loc 1 512 1
 1304 006e 00BF     		nop
 1305 0070 80BD     		pop	{r7, pc}
 1306              	.L68:
 1307 0072 00BF     		.align	2
 1308              	.L67:
 1309 0074 00000000 		.word	hi2c1
 1310 0078 00540040 		.word	1073763328
 1311 007c EC9C9010 		.word	277912812
 1312              		.cfi_endproc
 1313              	.LFE145:
 1315              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1316              		.align	1
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1321              	MX_USART1_UART_Init:
 1322              	.LFB146:
 513:Core/Src/main.c **** 
 514:Core/Src/main.c **** /**
 515:Core/Src/main.c ****  * @brief USART1 Initialization Function
 516:Core/Src/main.c ****  * @param None
 517:Core/Src/main.c ****  * @retval None
 518:Core/Src/main.c ****  */
 519:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 520:Core/Src/main.c **** {
 1323              		.loc 1 520 1
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327 0000 80B5     		push	{r7, lr}
 1328              	.LCFI44:
 1329              		.cfi_def_cfa_offset 8
 1330              		.cfi_offset 7, -8
 1331              		.cfi_offset 14, -4
 1332 0002 00AF     		add	r7, sp, #0
 1333              	.LCFI45:
 1334              		.cfi_def_cfa_register 7
 521:Core/Src/main.c **** 
 522:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 523:Core/Src/main.c **** 
 524:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 525:Core/Src/main.c **** 
 526:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 527:Core/Src/main.c **** 
 528:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 529:Core/Src/main.c ****   huart1.Instance = USART1;
 1335              		.loc 1 529 19
ARM GAS  /tmp/ccgNVCWq.s 			page 34


 1336 0004 144B     		ldr	r3, .L72
 1337 0006 154A     		ldr	r2, .L72+4
 1338 0008 1A60     		str	r2, [r3]
 530:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1339              		.loc 1 530 24
 1340 000a 134B     		ldr	r3, .L72
 1341 000c 4FF4E132 		mov	r2, #115200
 1342 0010 5A60     		str	r2, [r3, #4]
 531:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1343              		.loc 1 531 26
 1344 0012 114B     		ldr	r3, .L72
 1345 0014 0022     		movs	r2, #0
 1346 0016 9A60     		str	r2, [r3, #8]
 532:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1347              		.loc 1 532 24
 1348 0018 0F4B     		ldr	r3, .L72
 1349 001a 0022     		movs	r2, #0
 1350 001c DA60     		str	r2, [r3, #12]
 533:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1351              		.loc 1 533 22
 1352 001e 0E4B     		ldr	r3, .L72
 1353 0020 0022     		movs	r2, #0
 1354 0022 1A61     		str	r2, [r3, #16]
 534:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1355              		.loc 1 534 20
 1356 0024 0C4B     		ldr	r3, .L72
 1357 0026 0C22     		movs	r2, #12
 1358 0028 5A61     		str	r2, [r3, #20]
 535:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 1359              		.loc 1 535 25
 1360 002a 0B4B     		ldr	r3, .L72
 1361 002c 4FF44072 		mov	r2, #768
 1362 0030 9A61     		str	r2, [r3, #24]
 536:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1363              		.loc 1 536 28
 1364 0032 094B     		ldr	r3, .L72
 1365 0034 0022     		movs	r2, #0
 1366 0036 DA61     		str	r2, [r3, #28]
 537:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1367              		.loc 1 537 30
 1368 0038 074B     		ldr	r3, .L72
 1369 003a 0022     		movs	r2, #0
 1370 003c 1A62     		str	r2, [r3, #32]
 538:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1371              		.loc 1 538 38
 1372 003e 064B     		ldr	r3, .L72
 1373 0040 0022     		movs	r2, #0
 1374 0042 5A62     		str	r2, [r3, #36]
 539:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1375              		.loc 1 539 7
 1376 0044 0448     		ldr	r0, .L72
 1377 0046 FFF7FEFF 		bl	HAL_UART_Init
 1378 004a 0346     		mov	r3, r0
 1379              		.loc 1 539 6
 1380 004c 002B     		cmp	r3, #0
 1381 004e 01D0     		beq	.L71
 540:Core/Src/main.c ****   {
ARM GAS  /tmp/ccgNVCWq.s 			page 35


 541:Core/Src/main.c ****     Error_Handler();
 1382              		.loc 1 541 5
 1383 0050 FFF7FEFF 		bl	Error_Handler
 1384              	.L71:
 542:Core/Src/main.c ****   }
 543:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 544:Core/Src/main.c **** 
 545:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 546:Core/Src/main.c **** }
 1385              		.loc 1 546 1
 1386 0054 00BF     		nop
 1387 0056 80BD     		pop	{r7, pc}
 1388              	.L73:
 1389              		.align	2
 1390              	.L72:
 1391 0058 00000000 		.word	huart1
 1392 005c 00380140 		.word	1073821696
 1393              		.cfi_endproc
 1394              	.LFE146:
 1396              		.section	.text.MX_DMA_Init,"ax",%progbits
 1397              		.align	1
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1402              	MX_DMA_Init:
 1403              	.LFB147:
 547:Core/Src/main.c **** 
 548:Core/Src/main.c **** /**
 549:Core/Src/main.c ****  * Enable DMA controller clock
 550:Core/Src/main.c ****  */
 551:Core/Src/main.c **** static void MX_DMA_Init(void)
 552:Core/Src/main.c **** {
 1404              		.loc 1 552 1
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 8
 1407              		@ frame_needed = 1, uses_anonymous_args = 0
 1408 0000 80B5     		push	{r7, lr}
 1409              	.LCFI46:
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 7, -8
 1412              		.cfi_offset 14, -4
 1413 0002 82B0     		sub	sp, sp, #8
 1414              	.LCFI47:
 1415              		.cfi_def_cfa_offset 16
 1416 0004 00AF     		add	r7, sp, #0
 1417              	.LCFI48:
 1418              		.cfi_def_cfa_register 7
 1419              	.LBB5:
 553:Core/Src/main.c **** 
 554:Core/Src/main.c ****   /* DMA controller clock enable */
 555:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 1420              		.loc 1 555 3
 1421 0006 104B     		ldr	r3, .L75
 1422 0008 9B6C     		ldr	r3, [r3, #72]
 1423 000a 0F4A     		ldr	r2, .L75
 1424 000c 43F00103 		orr	r3, r3, #1
 1425 0010 9364     		str	r3, [r2, #72]
ARM GAS  /tmp/ccgNVCWq.s 			page 36


 1426 0012 0D4B     		ldr	r3, .L75
 1427 0014 9B6C     		ldr	r3, [r3, #72]
 1428 0016 03F00103 		and	r3, r3, #1
 1429 001a 7B60     		str	r3, [r7, #4]
 1430 001c 7B68     		ldr	r3, [r7, #4]
 1431              	.LBE5:
 556:Core/Src/main.c **** 
 557:Core/Src/main.c ****   /* DMA interrupt init */
 558:Core/Src/main.c ****   /* DMA1_Channel4_IRQn interrupt configuration */
 559:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 1432              		.loc 1 559 3
 1433 001e 0022     		movs	r2, #0
 1434 0020 0521     		movs	r1, #5
 1435 0022 0E20     		movs	r0, #14
 1436 0024 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 560:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 1437              		.loc 1 560 3
 1438 0028 0E20     		movs	r0, #14
 1439 002a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 561:Core/Src/main.c ****   /* DMA1_Channel5_IRQn interrupt configuration */
 562:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 1440              		.loc 1 562 3
 1441 002e 0022     		movs	r2, #0
 1442 0030 0521     		movs	r1, #5
 1443 0032 0F20     		movs	r0, #15
 1444 0034 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 563:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 1445              		.loc 1 563 3
 1446 0038 0F20     		movs	r0, #15
 1447 003a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 564:Core/Src/main.c **** }
 1448              		.loc 1 564 1
 1449 003e 00BF     		nop
 1450 0040 0837     		adds	r7, r7, #8
 1451              	.LCFI49:
 1452              		.cfi_def_cfa_offset 8
 1453 0042 BD46     		mov	sp, r7
 1454              	.LCFI50:
 1455              		.cfi_def_cfa_register 13
 1456              		@ sp needed
 1457 0044 80BD     		pop	{r7, pc}
 1458              	.L76:
 1459 0046 00BF     		.align	2
 1460              	.L75:
 1461 0048 00100240 		.word	1073876992
 1462              		.cfi_endproc
 1463              	.LFE147:
 1465              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1466              		.align	1
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1471              	MX_GPIO_Init:
 1472              	.LFB148:
 565:Core/Src/main.c **** 
 566:Core/Src/main.c **** /**
 567:Core/Src/main.c ****  * @brief GPIO Initialization Function
ARM GAS  /tmp/ccgNVCWq.s 			page 37


 568:Core/Src/main.c ****  * @param None
 569:Core/Src/main.c ****  * @retval None
 570:Core/Src/main.c ****  */
 571:Core/Src/main.c **** static void MX_GPIO_Init(void)
 572:Core/Src/main.c **** {
 1473              		.loc 1 572 1
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 40
 1476              		@ frame_needed = 1, uses_anonymous_args = 0
 1477 0000 80B5     		push	{r7, lr}
 1478              	.LCFI51:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 7, -8
 1481              		.cfi_offset 14, -4
 1482 0002 8AB0     		sub	sp, sp, #40
 1483              	.LCFI52:
 1484              		.cfi_def_cfa_offset 48
 1485 0004 00AF     		add	r7, sp, #0
 1486              	.LCFI53:
 1487              		.cfi_def_cfa_register 7
 573:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1488              		.loc 1 573 20
 1489 0006 07F11403 		add	r3, r7, #20
 1490 000a 0022     		movs	r2, #0
 1491 000c 1A60     		str	r2, [r3]
 1492 000e 5A60     		str	r2, [r3, #4]
 1493 0010 9A60     		str	r2, [r3, #8]
 1494 0012 DA60     		str	r2, [r3, #12]
 1495 0014 1A61     		str	r2, [r3, #16]
 1496              	.LBB6:
 574:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 575:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 578:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1497              		.loc 1 578 3
 1498 0016 6F4B     		ldr	r3, .L78
 1499 0018 DB6C     		ldr	r3, [r3, #76]
 1500 001a 6E4A     		ldr	r2, .L78
 1501 001c 43F00403 		orr	r3, r3, #4
 1502 0020 D364     		str	r3, [r2, #76]
 1503 0022 6C4B     		ldr	r3, .L78
 1504 0024 DB6C     		ldr	r3, [r3, #76]
 1505 0026 03F00403 		and	r3, r3, #4
 1506 002a 3B61     		str	r3, [r7, #16]
 1507 002c 3B69     		ldr	r3, [r7, #16]
 1508              	.LBE6:
 1509              	.LBB7:
 579:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1510              		.loc 1 579 3
 1511 002e 694B     		ldr	r3, .L78
 1512 0030 DB6C     		ldr	r3, [r3, #76]
 1513 0032 684A     		ldr	r2, .L78
 1514 0034 43F00103 		orr	r3, r3, #1
 1515 0038 D364     		str	r3, [r2, #76]
 1516 003a 664B     		ldr	r3, .L78
 1517 003c DB6C     		ldr	r3, [r3, #76]
ARM GAS  /tmp/ccgNVCWq.s 			page 38


 1518 003e 03F00103 		and	r3, r3, #1
 1519 0042 FB60     		str	r3, [r7, #12]
 1520 0044 FB68     		ldr	r3, [r7, #12]
 1521              	.LBE7:
 1522              	.LBB8:
 580:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1523              		.loc 1 580 3
 1524 0046 634B     		ldr	r3, .L78
 1525 0048 DB6C     		ldr	r3, [r3, #76]
 1526 004a 624A     		ldr	r2, .L78
 1527 004c 43F00203 		orr	r3, r3, #2
 1528 0050 D364     		str	r3, [r2, #76]
 1529 0052 604B     		ldr	r3, .L78
 1530 0054 DB6C     		ldr	r3, [r3, #76]
 1531 0056 03F00203 		and	r3, r3, #2
 1532 005a BB60     		str	r3, [r7, #8]
 1533 005c BB68     		ldr	r3, [r7, #8]
 1534              	.LBE8:
 1535              	.LBB9:
 581:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1536              		.loc 1 581 3
 1537 005e 5D4B     		ldr	r3, .L78
 1538 0060 DB6C     		ldr	r3, [r3, #76]
 1539 0062 5C4A     		ldr	r2, .L78
 1540 0064 43F08003 		orr	r3, r3, #128
 1541 0068 D364     		str	r3, [r2, #76]
 1542 006a 5A4B     		ldr	r3, .L78
 1543 006c DB6C     		ldr	r3, [r3, #76]
 1544 006e 03F08003 		and	r3, r3, #128
 1545 0072 7B60     		str	r3, [r7, #4]
 1546 0074 7B68     		ldr	r3, [r7, #4]
 1547              	.LBE9:
 582:Core/Src/main.c **** 
 583:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 584:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin, GPIO_PIN_RESET);
 1548              		.loc 1 584 3
 1549 0076 0022     		movs	r2, #0
 1550 0078 48F20601 		movw	r1, #32774
 1551 007c 4FF09040 		mov	r0, #1207959552
 1552 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 585:Core/Src/main.c **** 
 586:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 587:Core/Src/main.c ****   HAL_GPIO_WritePin(FTDI_NRST_GPIO_Port, FTDI_NRST_Pin, GPIO_PIN_RESET);
 1553              		.loc 1 587 3
 1554 0084 0022     		movs	r2, #0
 1555 0086 0221     		movs	r1, #2
 1556 0088 5348     		ldr	r0, .L78+4
 1557 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 588:Core/Src/main.c **** 
 589:Core/Src/main.c ****   /*Configure GPIO pins : BRD_STRT_Pin BRD_PRGE_Pin */
 590:Core/Src/main.c ****   GPIO_InitStruct.Pin = BRD_STRT_Pin | BRD_PRGE_Pin;
 1558              		.loc 1 590 23
 1559 008e 4FF44043 		mov	r3, #49152
 1560 0092 7B61     		str	r3, [r7, #20]
 591:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1561              		.loc 1 591 24
 1562 0094 4FF40413 		mov	r3, #2162688
ARM GAS  /tmp/ccgNVCWq.s 			page 39


 1563 0098 BB61     		str	r3, [r7, #24]
 592:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1564              		.loc 1 592 24
 1565 009a 0123     		movs	r3, #1
 1566 009c FB61     		str	r3, [r7, #28]
 593:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1567              		.loc 1 593 3
 1568 009e 07F11403 		add	r3, r7, #20
 1569 00a2 1946     		mov	r1, r3
 1570 00a4 4D48     		ldr	r0, .L78+8
 1571 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 594:Core/Src/main.c **** 
 595:Core/Src/main.c ****   /*Configure GPIO pins : SUPPLY_VLVE_Pin PURGE_VLVE_Pin CAN_STBY_Pin */
 596:Core/Src/main.c ****   GPIO_InitStruct.Pin = SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin;
 1572              		.loc 1 596 23
 1573 00aa 48F20603 		movw	r3, #32774
 1574 00ae 7B61     		str	r3, [r7, #20]
 597:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1575              		.loc 1 597 24
 1576 00b0 0123     		movs	r3, #1
 1577 00b2 BB61     		str	r3, [r7, #24]
 598:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1578              		.loc 1 598 24
 1579 00b4 0223     		movs	r3, #2
 1580 00b6 FB61     		str	r3, [r7, #28]
 599:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1581              		.loc 1 599 25
 1582 00b8 0023     		movs	r3, #0
 1583 00ba 3B62     		str	r3, [r7, #32]
 600:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1584              		.loc 1 600 3
 1585 00bc 07F11403 		add	r3, r7, #20
 1586 00c0 1946     		mov	r1, r3
 1587 00c2 4FF09040 		mov	r0, #1207959552
 1588 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 601:Core/Src/main.c **** 
 602:Core/Src/main.c ****   /*Configure GPIO pins : EXT_STRT_Pin EXT_STOP_Pin */
 603:Core/Src/main.c ****   GPIO_InitStruct.Pin = EXT_STRT_Pin | EXT_STOP_Pin;
 1589              		.loc 1 603 23
 1590 00ca 4823     		movs	r3, #72
 1591 00cc 7B61     		str	r3, [r7, #20]
 604:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1592              		.loc 1 604 24
 1593 00ce 4FF40413 		mov	r3, #2162688
 1594 00d2 BB61     		str	r3, [r7, #24]
 605:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1595              		.loc 1 605 24
 1596 00d4 0123     		movs	r3, #1
 1597 00d6 FB61     		str	r3, [r7, #28]
 606:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1598              		.loc 1 606 3
 1599 00d8 07F11403 		add	r3, r7, #20
 1600 00dc 1946     		mov	r1, r3
 1601 00de 4FF09040 		mov	r0, #1207959552
 1602 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 607:Core/Src/main.c **** 
 608:Core/Src/main.c ****   /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
ARM GAS  /tmp/ccgNVCWq.s 			page 40


 609:Core/Src/main.c ****   GPIO_InitStruct.Pin = ACC_INT1_Pin | ACC_INT2_Pin;
 1603              		.loc 1 609 23
 1604 00e6 3023     		movs	r3, #48
 1605 00e8 7B61     		str	r3, [r7, #20]
 610:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 1606              		.loc 1 610 24
 1607 00ea 4FF48813 		mov	r3, #1114112
 1608 00ee BB61     		str	r3, [r7, #24]
 611:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1609              		.loc 1 611 24
 1610 00f0 0223     		movs	r3, #2
 1611 00f2 FB61     		str	r3, [r7, #28]
 612:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1612              		.loc 1 612 3
 1613 00f4 07F11403 		add	r3, r7, #20
 1614 00f8 1946     		mov	r1, r3
 1615 00fa 4FF09040 		mov	r0, #1207959552
 1616 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 613:Core/Src/main.c **** 
 614:Core/Src/main.c ****   /*Configure GPIO pin : PA7 */
 615:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 1617              		.loc 1 615 23
 1618 0102 8023     		movs	r3, #128
 1619 0104 7B61     		str	r3, [r7, #20]
 616:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1620              		.loc 1 616 24
 1621 0106 0323     		movs	r3, #3
 1622 0108 BB61     		str	r3, [r7, #24]
 617:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1623              		.loc 1 617 24
 1624 010a 0023     		movs	r3, #0
 1625 010c FB61     		str	r3, [r7, #28]
 618:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1626              		.loc 1 618 3
 1627 010e 07F11403 		add	r3, r7, #20
 1628 0112 1946     		mov	r1, r3
 1629 0114 4FF09040 		mov	r0, #1207959552
 1630 0118 FFF7FEFF 		bl	HAL_GPIO_Init
 619:Core/Src/main.c **** 
 620:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB5 */
 621:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_5;
 1631              		.loc 1 621 23
 1632 011c 2123     		movs	r3, #33
 1633 011e 7B61     		str	r3, [r7, #20]
 622:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1634              		.loc 1 622 24
 1635 0120 0323     		movs	r3, #3
 1636 0122 BB61     		str	r3, [r7, #24]
 623:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1637              		.loc 1 623 24
 1638 0124 0023     		movs	r3, #0
 1639 0126 FB61     		str	r3, [r7, #28]
 624:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1640              		.loc 1 624 3
 1641 0128 07F11403 		add	r3, r7, #20
 1642 012c 1946     		mov	r1, r3
 1643 012e 2A48     		ldr	r0, .L78+4
ARM GAS  /tmp/ccgNVCWq.s 			page 41


 1644 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 625:Core/Src/main.c **** 
 626:Core/Src/main.c ****   /*Configure GPIO pin : FTDI_NRST_Pin */
 627:Core/Src/main.c ****   GPIO_InitStruct.Pin = FTDI_NRST_Pin;
 1645              		.loc 1 627 23
 1646 0134 0223     		movs	r3, #2
 1647 0136 7B61     		str	r3, [r7, #20]
 628:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1648              		.loc 1 628 24
 1649 0138 0123     		movs	r3, #1
 1650 013a BB61     		str	r3, [r7, #24]
 629:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1651              		.loc 1 629 24
 1652 013c 0123     		movs	r3, #1
 1653 013e FB61     		str	r3, [r7, #28]
 630:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1654              		.loc 1 630 25
 1655 0140 0023     		movs	r3, #0
 1656 0142 3B62     		str	r3, [r7, #32]
 631:Core/Src/main.c ****   HAL_GPIO_Init(FTDI_NRST_GPIO_Port, &GPIO_InitStruct);
 1657              		.loc 1 631 3
 1658 0144 07F11403 		add	r3, r7, #20
 1659 0148 1946     		mov	r1, r3
 1660 014a 2348     		ldr	r0, .L78+4
 1661 014c FFF7FEFF 		bl	HAL_GPIO_Init
 632:Core/Src/main.c **** 
 633:Core/Src/main.c ****   /*Configure GPIO pin : PA8 */
 634:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 1662              		.loc 1 634 23
 1663 0150 4FF48073 		mov	r3, #256
 1664 0154 7B61     		str	r3, [r7, #20]
 635:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1665              		.loc 1 635 24
 1666 0156 0223     		movs	r3, #2
 1667 0158 BB61     		str	r3, [r7, #24]
 636:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1668              		.loc 1 636 24
 1669 015a 0023     		movs	r3, #0
 1670 015c FB61     		str	r3, [r7, #28]
 637:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1671              		.loc 1 637 25
 1672 015e 0023     		movs	r3, #0
 1673 0160 3B62     		str	r3, [r7, #32]
 638:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1674              		.loc 1 638 29
 1675 0162 0023     		movs	r3, #0
 1676 0164 7B62     		str	r3, [r7, #36]
 639:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1677              		.loc 1 639 3
 1678 0166 07F11403 		add	r3, r7, #20
 1679 016a 1946     		mov	r1, r3
 1680 016c 4FF09040 		mov	r0, #1207959552
 1681 0170 FFF7FEFF 		bl	HAL_GPIO_Init
 640:Core/Src/main.c **** 
 641:Core/Src/main.c ****   /*Configure GPIO pin : PH3 */
 642:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 1682              		.loc 1 642 23
ARM GAS  /tmp/ccgNVCWq.s 			page 42


 1683 0174 0823     		movs	r3, #8
 1684 0176 7B61     		str	r3, [r7, #20]
 643:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1685              		.loc 1 643 24
 1686 0178 0323     		movs	r3, #3
 1687 017a BB61     		str	r3, [r7, #24]
 644:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1688              		.loc 1 644 24
 1689 017c 0023     		movs	r3, #0
 1690 017e FB61     		str	r3, [r7, #28]
 645:Core/Src/main.c ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 1691              		.loc 1 645 3
 1692 0180 07F11403 		add	r3, r7, #20
 1693 0184 1946     		mov	r1, r3
 1694 0186 1648     		ldr	r0, .L78+12
 1695 0188 FFF7FEFF 		bl	HAL_GPIO_Init
 646:Core/Src/main.c **** 
 647:Core/Src/main.c ****   /* EXTI interrupt init*/
 648:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 1696              		.loc 1 648 3
 1697 018c 0022     		movs	r2, #0
 1698 018e 0521     		movs	r1, #5
 1699 0190 0920     		movs	r0, #9
 1700 0192 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 649:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 1701              		.loc 1 649 3
 1702 0196 0920     		movs	r0, #9
 1703 0198 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 1704              		.loc 1 651 3
 1705 019c 0022     		movs	r2, #0
 1706 019e 0521     		movs	r1, #5
 1707 01a0 0A20     		movs	r0, #10
 1708 01a2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 652:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 1709              		.loc 1 652 3
 1710 01a6 0A20     		movs	r0, #10
 1711 01a8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 653:Core/Src/main.c **** 
 654:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 1712              		.loc 1 654 3
 1713 01ac 0022     		movs	r2, #0
 1714 01ae 0521     		movs	r1, #5
 1715 01b0 1720     		movs	r0, #23
 1716 01b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 655:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 1717              		.loc 1 655 3
 1718 01b6 1720     		movs	r0, #23
 1719 01b8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 656:Core/Src/main.c **** 
 657:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 1720              		.loc 1 657 3
 1721 01bc 0022     		movs	r2, #0
 1722 01be 0521     		movs	r1, #5
 1723 01c0 2820     		movs	r0, #40
 1724 01c2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccgNVCWq.s 			page 43


 658:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 1725              		.loc 1 658 3
 1726 01c6 2820     		movs	r0, #40
 1727 01c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 659:Core/Src/main.c **** 
 660:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 661:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 662:Core/Src/main.c **** }
 1728              		.loc 1 662 1
 1729 01cc 00BF     		nop
 1730 01ce 2837     		adds	r7, r7, #40
 1731              	.LCFI54:
 1732              		.cfi_def_cfa_offset 8
 1733 01d0 BD46     		mov	sp, r7
 1734              	.LCFI55:
 1735              		.cfi_def_cfa_register 13
 1736              		@ sp needed
 1737 01d2 80BD     		pop	{r7, pc}
 1738              	.L79:
 1739              		.align	2
 1740              	.L78:
 1741 01d4 00100240 		.word	1073876992
 1742 01d8 00040048 		.word	1207960576
 1743 01dc 00080048 		.word	1207961600
 1744 01e0 001C0048 		.word	1207966720
 1745              		.cfi_endproc
 1746              	.LFE148:
 1748              		.section	.text.StartCanTask,"ax",%progbits
 1749              		.align	1
 1750              		.global	StartCanTask
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1755              	StartCanTask:
 1756              	.LFB149:
 663:Core/Src/main.c **** 
 664:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 665:Core/Src/main.c **** 
 666:Core/Src/main.c **** /* USER CODE END 4 */
 667:Core/Src/main.c **** 
 668:Core/Src/main.c **** /* USER CODE BEGIN Header_StartCanTask */
 669:Core/Src/main.c **** /**
 670:Core/Src/main.c ****  * @brief  Function implementing the CanTask thread.
 671:Core/Src/main.c ****  * @param  argument: Not used
 672:Core/Src/main.c ****  * @retval None
 673:Core/Src/main.c ****  */
 674:Core/Src/main.c **** /* USER CODE END Header_StartCanTask */
 675:Core/Src/main.c **** void StartCanTask(void *argument)
 676:Core/Src/main.c **** {
 1757              		.loc 1 676 1
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 8
 1760              		@ frame_needed = 1, uses_anonymous_args = 0
 1761 0000 80B5     		push	{r7, lr}
 1762              	.LCFI56:
 1763              		.cfi_def_cfa_offset 8
 1764              		.cfi_offset 7, -8
ARM GAS  /tmp/ccgNVCWq.s 			page 44


 1765              		.cfi_offset 14, -4
 1766 0002 82B0     		sub	sp, sp, #8
 1767              	.LCFI57:
 1768              		.cfi_def_cfa_offset 16
 1769 0004 00AF     		add	r7, sp, #0
 1770              	.LCFI58:
 1771              		.cfi_def_cfa_register 7
 1772 0006 7860     		str	r0, [r7, #4]
 1773              	.L81:
 677:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 678:Core/Src/main.c ****   /* Infinite loop */
 679:Core/Src/main.c ****   for (;;)
 680:Core/Src/main.c ****   {
 681:Core/Src/main.c ****     osDelay(10);
 1774              		.loc 1 681 5 discriminator 1
 1775 0008 0A20     		movs	r0, #10
 1776 000a FFF7FEFF 		bl	osDelay
 1777 000e FBE7     		b	.L81
 1778              		.cfi_endproc
 1779              	.LFE149:
 1781              		.section	.text.StartI2cTask,"ax",%progbits
 1782              		.align	1
 1783              		.global	StartI2cTask
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1788              	StartI2cTask:
 1789              	.LFB150:
 682:Core/Src/main.c ****   }
 683:Core/Src/main.c ****   /* USER CODE END 5 */
 684:Core/Src/main.c **** }
 685:Core/Src/main.c **** 
 686:Core/Src/main.c **** /* USER CODE BEGIN Header_StartI2cTask */
 687:Core/Src/main.c **** /**
 688:Core/Src/main.c ****  * @brief Function implementing the I2cTask thread.
 689:Core/Src/main.c ****  * @param argument: Not used
 690:Core/Src/main.c ****  * @retval None
 691:Core/Src/main.c ****  */
 692:Core/Src/main.c **** /* USER CODE END Header_StartI2cTask */
 693:Core/Src/main.c **** void StartI2cTask(void *argument)
 694:Core/Src/main.c **** {
 1790              		.loc 1 694 1
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 8
 1793              		@ frame_needed = 1, uses_anonymous_args = 0
 1794 0000 80B5     		push	{r7, lr}
 1795              	.LCFI59:
 1796              		.cfi_def_cfa_offset 8
 1797              		.cfi_offset 7, -8
 1798              		.cfi_offset 14, -4
 1799 0002 82B0     		sub	sp, sp, #8
 1800              	.LCFI60:
 1801              		.cfi_def_cfa_offset 16
 1802 0004 00AF     		add	r7, sp, #0
 1803              	.LCFI61:
 1804              		.cfi_def_cfa_register 7
 1805 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccgNVCWq.s 			page 45


 1806              	.L83:
 695:Core/Src/main.c ****   /* USER CODE BEGIN StartI2cTask */
 696:Core/Src/main.c ****   /* Infinite loop */
 697:Core/Src/main.c ****   for (;;)
 698:Core/Src/main.c ****   {
 699:Core/Src/main.c ****     osDelay(1);
 1807              		.loc 1 699 5 discriminator 1
 1808 0008 0120     		movs	r0, #1
 1809 000a FFF7FEFF 		bl	osDelay
 1810 000e FBE7     		b	.L83
 1811              		.cfi_endproc
 1812              	.LFE150:
 1814              		.section	.rodata
 1815 0052 0000     		.align	2
 1816              	.LC5:
 1817 0054 01020304 		.ascii	"\001\002\003\004\005\006\007\010"
 1817      05060708 
 1818              		.section	.text.StartFuelCellTask,"ax",%progbits
 1819              		.align	1
 1820              		.global	StartFuelCellTask
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1825              	StartFuelCellTask:
 1826              	.LFB151:
 700:Core/Src/main.c ****   }
 701:Core/Src/main.c ****   /* USER CODE END StartI2cTask */
 702:Core/Src/main.c **** }
 703:Core/Src/main.c **** 
 704:Core/Src/main.c **** /* USER CODE BEGIN Header_StartFuelCellTask */
 705:Core/Src/main.c **** /**
 706:Core/Src/main.c ****  * @brief Function implementing the FuelCellTask thread.
 707:Core/Src/main.c ****  * @param argument: Not used
 708:Core/Src/main.c ****  * @retval None
 709:Core/Src/main.c ****  */
 710:Core/Src/main.c **** /* USER CODE END Header_StartFuelCellTask */
 711:Core/Src/main.c **** void StartFuelCellTask(void *argument)
 712:Core/Src/main.c **** {
 1827              		.loc 1 712 1
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 24
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831 0000 80B5     		push	{r7, lr}
 1832              	.LCFI62:
 1833              		.cfi_def_cfa_offset 8
 1834              		.cfi_offset 7, -8
 1835              		.cfi_offset 14, -4
 1836 0002 86B0     		sub	sp, sp, #24
 1837              	.LCFI63:
 1838              		.cfi_def_cfa_offset 32
 1839 0004 00AF     		add	r7, sp, #0
 1840              	.LCFI64:
 1841              		.cfi_def_cfa_register 7
 1842 0006 7860     		str	r0, [r7, #4]
 713:Core/Src/main.c ****   /* USER CODE BEGIN StartFuelCellTask */
 714:Core/Src/main.c **** #define CAN_MESSAGE_TIMEOUT_MS 5000
 715:Core/Src/main.c **** #define CAN_ADD_TX_TIMEOUT_MS 5000
ARM GAS  /tmp/ccgNVCWq.s 			page 46


 716:Core/Src/main.c ****   osStatus_t os_stat;
 717:Core/Src/main.c ****   uint32_t fc_tick;
 718:Core/Src/main.c ****   HAL_StatusTypeDef hal_stat;
 719:Core/Src/main.c **** 
 720:Core/Src/main.c ****   TxHeaderFuelCellTask.IDE = CAN_ID_STD;
 1843              		.loc 1 720 28
 1844 0008 444B     		ldr	r3, .L101
 1845 000a 0022     		movs	r2, #0
 1846 000c 9A60     		str	r2, [r3, #8]
 721:Core/Src/main.c ****   TxHeaderFuelCellTask.RTR = CAN_RTR_DATA;
 1847              		.loc 1 721 28
 1848 000e 434B     		ldr	r3, .L101
 1849 0010 0022     		movs	r2, #0
 1850 0012 DA60     		str	r2, [r3, #12]
 722:Core/Src/main.c ****   TxHeaderFuelCellTask.ExtId = 0;
 1851              		.loc 1 722 30
 1852 0014 414B     		ldr	r3, .L101
 1853 0016 0022     		movs	r2, #0
 1854 0018 5A60     		str	r2, [r3, #4]
 723:Core/Src/main.c ****   TxHeaderFuelCellTask.TransmitGlobalTime = DISABLE;
 1855              		.loc 1 723 43
 1856 001a 404B     		ldr	r3, .L101
 1857 001c 0022     		movs	r2, #0
 1858 001e 1A75     		strb	r2, [r3, #20]
 1859              	.L98:
 724:Core/Src/main.c ****   /* Infinite loop */
 725:Core/Src/main.c ****   for (;;)
 726:Core/Src/main.c ****   {
 727:Core/Src/main.c ****     switch (fc_state)
 1860              		.loc 1 727 5
 1861 0020 3F4B     		ldr	r3, .L101+4
 1862 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1863 0024 042B     		cmp	r3, #4
 1864 0026 FBD8     		bhi	.L98
 1865 0028 01A2     		adr	r2, .L87
 1866 002a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1867 002e 00BF     		.p2align 2
 1868              	.L87:
 1869 0030 45000000 		.word	.L90+1
 1870 0034 5F000000 		.word	.L89+1
 1871 0038 FB000000 		.word	.L88+1
 1872 003c 21000000 		.word	.L98+1
 1873 0040 21000000 		.word	.L98+1
 1874              		.p2align 1
 1875              	.L90:
 1876              	.LBB10:
 728:Core/Src/main.c ****     {
 729:Core/Src/main.c ****     case FUEL_CELL_OFF_STATE:
 730:Core/Src/main.c ****       HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1877              		.loc 1 730 7
 1878 0044 0022     		movs	r2, #0
 1879 0046 0421     		movs	r1, #4
 1880 0048 4FF09040 		mov	r0, #1207959552
 1881 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 731:Core/Src/main.c ****       HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_RESET);
 1882              		.loc 1 731 7
 1883 0050 0022     		movs	r2, #0
ARM GAS  /tmp/ccgNVCWq.s 			page 47


 1884 0052 0221     		movs	r1, #2
 1885 0054 4FF09040 		mov	r0, #1207959552
 1886 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 732:Core/Src/main.c ****       // CAN message to relay board all relays off
 733:Core/Src/main.c ****       break;
 1887              		.loc 1 733 7
 1888 005c 5CE0     		b	.L85
 1889              	.L89:
 734:Core/Src/main.c ****     case FUEL_CELL_STRTUP_STATE:
 735:Core/Src/main.c ****       TxHeaderFuelCellTask.StdId = 0x103;
 1890              		.loc 1 735 34
 1891 005e 2F4B     		ldr	r3, .L101
 1892 0060 40F20312 		movw	r2, #259
 1893 0064 1A60     		str	r2, [r3]
 736:Core/Src/main.c ****       TxHeaderFuelCellTask.DLC = 8;
 1894              		.loc 1 736 32
 1895 0066 2D4B     		ldr	r3, .L101
 1896 0068 0822     		movs	r2, #8
 1897 006a 1A61     		str	r2, [r3, #16]
 737:Core/Src/main.c ****       uint8_t mymsg[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 1898              		.loc 1 737 15
 1899 006c 2D4A     		ldr	r2, .L101+8
 1900 006e 07F10803 		add	r3, r7, #8
 1901 0072 92E80300 		ldm	r2, {r0, r1}
 1902 0076 83E80300 		stm	r3, {r0, r1}
 738:Core/Src/main.c **** 
 739:Core/Src/main.c ****       // Try to add tx message
 740:Core/Src/main.c ****       fc_tick = HAL_GetTick();
 1903              		.loc 1 740 17
 1904 007a FFF7FEFF 		bl	HAL_GetTick
 1905 007e 7861     		str	r0, [r7, #20]
 1906              	.L93:
 741:Core/Src/main.c ****       do
 742:Core/Src/main.c ****       {
 743:Core/Src/main.c ****         hal_stat = HAL_CAN_AddTxMessage(&hcan1, &TxHeaderFuelCellTask, mymsg, &TxMailboxFuelCellTas
 1907              		.loc 1 743 20 discriminator 2
 1908 0080 07F10802 		add	r2, r7, #8
 1909 0084 284B     		ldr	r3, .L101+12
 1910 0086 2549     		ldr	r1, .L101
 1911 0088 2848     		ldr	r0, .L101+16
 1912 008a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1913 008e 0346     		mov	r3, r0
 1914 0090 FB74     		strb	r3, [r7, #19]
 744:Core/Src/main.c ****       } while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < CAN_ADD_TX_TIMEOUT_MS));
 1915              		.loc 1 744 7 discriminator 2
 1916 0092 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1917 0094 002B     		cmp	r3, #0
 1918 0096 08D0     		beq	.L92
 1919              		.loc 1 744 39 discriminator 1
 1920 0098 FFF7FEFF 		bl	HAL_GetTick
 1921 009c 0246     		mov	r2, r0
 1922              		.loc 1 744 53 discriminator 1
 1923 009e 7B69     		ldr	r3, [r7, #20]
 1924 00a0 D31A     		subs	r3, r2, r3
 1925              		.loc 1 744 35 discriminator 1
 1926 00a2 41F28732 		movw	r2, #4999
 1927 00a6 9342     		cmp	r3, r2
ARM GAS  /tmp/ccgNVCWq.s 			page 48


 1928 00a8 EAD9     		bls	.L93
 1929              	.L92:
 745:Core/Src/main.c **** 
 746:Core/Src/main.c ****       // Wait for tx message to be sent. If never successfully sent, timeout and return to off stat
 747:Core/Src/main.c ****       if (osSemaphoreAcquire(canMsgOkSemHandle, CAN_MESSAGE_TIMEOUT_MS) == osOK)
 1930              		.loc 1 747 11
 1931 00aa 214B     		ldr	r3, .L101+20
 1932 00ac 1B68     		ldr	r3, [r3]
 1933 00ae 41F28831 		movw	r1, #5000
 1934 00b2 1846     		mov	r0, r3
 1935 00b4 FFF7FEFF 		bl	osSemaphoreAcquire
 1936 00b8 0346     		mov	r3, r0
 1937              		.loc 1 747 10
 1938 00ba 002B     		cmp	r3, #0
 1939 00bc 19D1     		bne	.L94
 748:Core/Src/main.c ****       {
 749:Core/Src/main.c ****         HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_SET);
 1940              		.loc 1 749 9
 1941 00be 0122     		movs	r2, #1
 1942 00c0 0221     		movs	r1, #2
 1943 00c2 4FF09040 		mov	r0, #1207959552
 1944 00c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 750:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_SET);
 1945              		.loc 1 750 9
 1946 00ca 0122     		movs	r2, #1
 1947 00cc 0421     		movs	r1, #4
 1948 00ce 4FF09040 		mov	r0, #1207959552
 1949 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 751:Core/Src/main.c ****         osDelay(500);
 1950              		.loc 1 751 9
 1951 00d6 4FF4FA70 		mov	r0, #500
 1952 00da FFF7FEFF 		bl	osDelay
 752:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1953              		.loc 1 752 9
 1954 00de 0022     		movs	r2, #0
 1955 00e0 0421     		movs	r1, #4
 1956 00e2 4FF09040 		mov	r0, #1207959552
 1957 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 753:Core/Src/main.c ****         fc_state = FUEL_CELL_CHRGE_STATE;
 1958              		.loc 1 753 18
 1959 00ea 0D4B     		ldr	r3, .L101+4
 1960 00ec 0222     		movs	r2, #2
 1961 00ee 1A70     		strb	r2, [r3]
 754:Core/Src/main.c ****       }
 755:Core/Src/main.c ****       else
 756:Core/Src/main.c ****       {
 757:Core/Src/main.c ****         // Tx never added or didn't send succesfully in CAN_MESSAGE_TIMEOUT_MS
 758:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 759:Core/Src/main.c ****       }
 760:Core/Src/main.c ****       break;
 1962              		.loc 1 760 7
 1963 00f0 12E0     		b	.L85
 1964              	.L94:
 758:Core/Src/main.c ****       }
 1965              		.loc 1 758 18
 1966 00f2 0B4B     		ldr	r3, .L101+4
 1967 00f4 0022     		movs	r2, #0
ARM GAS  /tmp/ccgNVCWq.s 			page 49


 1968 00f6 1A70     		strb	r2, [r3]
 1969              		.loc 1 760 7
 1970 00f8 0EE0     		b	.L85
 1971              	.L88:
 761:Core/Src/main.c ****     case FUEL_CELL_CHRGE_STATE:
 762:Core/Src/main.c ****       if (canData.cap_voltage >= FULL_CAP_CHARGE_V)
 1972              		.loc 1 762 18
 1973 00fa 0E4B     		ldr	r3, .L101+24
 1974 00fc D3ED017A 		vldr.32	s15, [r3, #4]
 1975              		.loc 1 762 10
 1976 0100 B3EE027A 		vmov.f32	s14, #1.8e+1
 1977 0104 F4EEC77A 		vcmpe.f32	s15, s14
 1978 0108 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1979 010c 00DA     		bge	.L99
 763:Core/Src/main.c ****       {
 764:Core/Src/main.c ****         fc_state = FUEL_CELL_RUN_STATE;
 765:Core/Src/main.c ****       }
 766:Core/Src/main.c ****       // CAN message to relay board cap charge mode
 767:Core/Src/main.c ****       // Wait for caps to charge up
 768:Core/Src/main.c ****       // Move to run mode
 769:Core/Src/main.c ****       break;
 1980              		.loc 1 769 7
 1981 010e 02E0     		b	.L100
 1982              	.L99:
 764:Core/Src/main.c ****       }
 1983              		.loc 1 764 18
 1984 0110 034B     		ldr	r3, .L101+4
 1985 0112 0422     		movs	r2, #4
 1986 0114 1A70     		strb	r2, [r3]
 1987              	.L100:
 1988              		.loc 1 769 7
 1989 0116 00BF     		nop
 1990              	.L85:
 1991              	.LBE10:
 727:Core/Src/main.c ****     {
 1992              		.loc 1 727 5
 1993 0118 82E7     		b	.L98
 1994              	.L102:
 1995 011a 00BF     		.align	2
 1996              	.L101:
 1997 011c 00000000 		.word	TxHeaderFuelCellTask
 1998 0120 00000000 		.word	fc_state
 1999 0124 54000000 		.word	.LC5
 2000 0128 00000000 		.word	TxMailboxFuelCellTask
 2001 012c 00000000 		.word	hcan1
 2002 0130 00000000 		.word	canMsgOkSemHandle
 2003 0134 00000000 		.word	canData
 2004              		.cfi_endproc
 2005              	.LFE151:
 2007              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 2008              		.align	1
 2009              		.global	HAL_TIM_PeriodElapsedCallback
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2014              	HAL_TIM_PeriodElapsedCallback:
 2015              	.LFB152:
ARM GAS  /tmp/ccgNVCWq.s 			page 50


 770:Core/Src/main.c ****     case FUEL_CELL_RUN_STATE:
 771:Core/Src/main.c ****       // CAN message to relay board run mode
 772:Core/Src/main.c **** 
 773:Core/Src/main.c ****       break;
 774:Core/Src/main.c ****     }
 775:Core/Src/main.c ****   }
 776:Core/Src/main.c ****   /* USER CODE END StartFuelCellTask */
 777:Core/Src/main.c **** }
 778:Core/Src/main.c **** 
 779:Core/Src/main.c **** /**
 780:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 781:Core/Src/main.c ****  * @note   This function is called  when TIM1 interrupt took place, inside
 782:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 783:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 784:Core/Src/main.c ****  * @param  htim : TIM handle
 785:Core/Src/main.c ****  * @retval None
 786:Core/Src/main.c ****  */
 787:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 788:Core/Src/main.c **** {
 2016              		.loc 1 788 1
 2017              		.cfi_startproc
 2018              		@ args = 0, pretend = 0, frame = 8
 2019              		@ frame_needed = 1, uses_anonymous_args = 0
 2020 0000 80B5     		push	{r7, lr}
 2021              	.LCFI65:
 2022              		.cfi_def_cfa_offset 8
 2023              		.cfi_offset 7, -8
 2024              		.cfi_offset 14, -4
 2025 0002 82B0     		sub	sp, sp, #8
 2026              	.LCFI66:
 2027              		.cfi_def_cfa_offset 16
 2028 0004 00AF     		add	r7, sp, #0
 2029              	.LCFI67:
 2030              		.cfi_def_cfa_register 7
 2031 0006 7860     		str	r0, [r7, #4]
 789:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 790:Core/Src/main.c **** 
 791:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 792:Core/Src/main.c ****   if (htim->Instance == TIM1)
 2032              		.loc 1 792 11
 2033 0008 7B68     		ldr	r3, [r7, #4]
 2034 000a 1B68     		ldr	r3, [r3]
 2035              		.loc 1 792 6
 2036 000c 044A     		ldr	r2, .L106
 2037 000e 9342     		cmp	r3, r2
 2038 0010 01D1     		bne	.L105
 793:Core/Src/main.c ****   {
 794:Core/Src/main.c ****     HAL_IncTick();
 2039              		.loc 1 794 5
 2040 0012 FFF7FEFF 		bl	HAL_IncTick
 2041              	.L105:
 795:Core/Src/main.c ****   }
 796:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 797:Core/Src/main.c **** 
 798:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 799:Core/Src/main.c **** }
 2042              		.loc 1 799 1
ARM GAS  /tmp/ccgNVCWq.s 			page 51


 2043 0016 00BF     		nop
 2044 0018 0837     		adds	r7, r7, #8
 2045              	.LCFI68:
 2046              		.cfi_def_cfa_offset 8
 2047 001a BD46     		mov	sp, r7
 2048              	.LCFI69:
 2049              		.cfi_def_cfa_register 13
 2050              		@ sp needed
 2051 001c 80BD     		pop	{r7, pc}
 2052              	.L107:
 2053 001e 00BF     		.align	2
 2054              	.L106:
 2055 0020 002C0140 		.word	1073818624
 2056              		.cfi_endproc
 2057              	.LFE152:
 2059              		.section	.text.Error_Handler,"ax",%progbits
 2060              		.align	1
 2061              		.global	Error_Handler
 2062              		.syntax unified
 2063              		.thumb
 2064              		.thumb_func
 2066              	Error_Handler:
 2067              	.LFB153:
 800:Core/Src/main.c **** 
 801:Core/Src/main.c **** /**
 802:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 803:Core/Src/main.c ****  * @retval None
 804:Core/Src/main.c ****  */
 805:Core/Src/main.c **** void Error_Handler(void)
 806:Core/Src/main.c **** {
 2068              		.loc 1 806 1
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 1, uses_anonymous_args = 0
 2072              		@ link register save eliminated.
 2073 0000 80B4     		push	{r7}
 2074              	.LCFI70:
 2075              		.cfi_def_cfa_offset 4
 2076              		.cfi_offset 7, -4
 2077 0002 00AF     		add	r7, sp, #0
 2078              	.LCFI71:
 2079              		.cfi_def_cfa_register 7
 2080              	.LBB11:
 2081              	.LBB12:
 2082              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
ARM GAS  /tmp/ccgNVCWq.s 			page 52


  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgNVCWq.s 			page 53


  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
ARM GAS  /tmp/ccgNVCWq.s 			page 54


 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccgNVCWq.s 			page 55


 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 2083              		.loc 2 209 3
 2084              		.syntax unified
 2085              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2086 0004 72B6     		cpsid i
 2087              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 2088              		.loc 2 210 1
 2089              		.thumb
 2090              		.syntax unified
 2091 0006 00BF     		nop
 2092              	.L109:
 2093              	.LBE12:
 2094              	.LBE11:
 807:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 808:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 809:Core/Src/main.c ****   __disable_irq();
 810:Core/Src/main.c ****   while (1)
 2095              		.loc 1 810 9 discriminator 1
 2096 0008 FEE7     		b	.L109
 2097              		.cfi_endproc
 2098              	.LFE153:
 2100              		.text
 2101              	.Letext0:
 2102              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 2103              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 2104              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 2105              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2106              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2107              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 2108              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 2109              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
ARM GAS  /tmp/ccgNVCWq.s 			page 56


 2110              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 2111              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
 2112              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 2113              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 2114              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 2115              		.file 16 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 2116              		.file 17 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_types.h"
 2117              		.file 18 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/reent.h"
 2118              		.file 19 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/lock.h"
 2119              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 2120              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/ccgNVCWq.s 			page 57


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccgNVCWq.s:24     .bss.hcan1:0000000000000000 hcan1
     /tmp/ccgNVCWq.s:21     .bss.hcan1:0000000000000000 $d
     /tmp/ccgNVCWq.s:31     .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccgNVCWq.s:28     .bss.hi2c1:0000000000000000 $d
     /tmp/ccgNVCWq.s:38     .bss.huart1:0000000000000000 huart1
     /tmp/ccgNVCWq.s:35     .bss.huart1:0000000000000000 $d
     /tmp/ccgNVCWq.s:45     .bss.hdma_usart1_rx:0000000000000000 hdma_usart1_rx
     /tmp/ccgNVCWq.s:42     .bss.hdma_usart1_rx:0000000000000000 $d
     /tmp/ccgNVCWq.s:52     .bss.hdma_usart1_tx:0000000000000000 hdma_usart1_tx
     /tmp/ccgNVCWq.s:49     .bss.hdma_usart1_tx:0000000000000000 $d
     /tmp/ccgNVCWq.s:59     .bss.CanTaskHandle:0000000000000000 CanTaskHandle
     /tmp/ccgNVCWq.s:56     .bss.CanTaskHandle:0000000000000000 $d
     /tmp/ccgNVCWq.s:66     .bss.CanTaskBuffer:0000000000000000 CanTaskBuffer
     /tmp/ccgNVCWq.s:63     .bss.CanTaskBuffer:0000000000000000 $d
     /tmp/ccgNVCWq.s:73     .bss.CanTaskControlBlock:0000000000000000 CanTaskControlBlock
     /tmp/ccgNVCWq.s:70     .bss.CanTaskControlBlock:0000000000000000 $d
     /tmp/ccgNVCWq.s:84     .rodata.CanTask_attributes:0000000000000000 CanTask_attributes
     /tmp/ccgNVCWq.s:77     .rodata:0000000000000000 $d
     /tmp/ccgNVCWq.s:81     .rodata.CanTask_attributes:0000000000000000 $d
     /tmp/ccgNVCWq.s:98     .bss.I2cTaskHandle:0000000000000000 I2cTaskHandle
     /tmp/ccgNVCWq.s:95     .bss.I2cTaskHandle:0000000000000000 $d
     /tmp/ccgNVCWq.s:105    .bss.I2cTaskBuffer:0000000000000000 I2cTaskBuffer
     /tmp/ccgNVCWq.s:102    .bss.I2cTaskBuffer:0000000000000000 $d
     /tmp/ccgNVCWq.s:112    .bss.I2cTaskControlBlock:0000000000000000 I2cTaskControlBlock
     /tmp/ccgNVCWq.s:109    .bss.I2cTaskControlBlock:0000000000000000 $d
     /tmp/ccgNVCWq.s:123    .rodata.I2cTask_attributes:0000000000000000 I2cTask_attributes
     /tmp/ccgNVCWq.s:120    .rodata.I2cTask_attributes:0000000000000000 $d
     /tmp/ccgNVCWq.s:137    .bss.FuelCellTaskHandle:0000000000000000 FuelCellTaskHandle
     /tmp/ccgNVCWq.s:134    .bss.FuelCellTaskHandle:0000000000000000 $d
     /tmp/ccgNVCWq.s:144    .bss.FuelCellTaskBuffer:0000000000000000 FuelCellTaskBuffer
     /tmp/ccgNVCWq.s:141    .bss.FuelCellTaskBuffer:0000000000000000 $d
     /tmp/ccgNVCWq.s:151    .bss.FuelCellTaskControlBlock:0000000000000000 FuelCellTaskControlBlock
     /tmp/ccgNVCWq.s:148    .bss.FuelCellTaskControlBlock:0000000000000000 $d
     /tmp/ccgNVCWq.s:162    .rodata.FuelCellTask_attributes:0000000000000000 FuelCellTask_attributes
     /tmp/ccgNVCWq.s:159    .rodata.FuelCellTask_attributes:0000000000000000 $d
     /tmp/ccgNVCWq.s:176    .bss.canMsgOkSemHandle:0000000000000000 canMsgOkSemHandle
     /tmp/ccgNVCWq.s:173    .bss.canMsgOkSemHandle:0000000000000000 $d
     /tmp/ccgNVCWq.s:187    .rodata.canMsgOkSem_attributes:0000000000000000 canMsgOkSem_attributes
     /tmp/ccgNVCWq.s:184    .rodata.canMsgOkSem_attributes:0000000000000000 $d
     /tmp/ccgNVCWq.s:194    .bss.fc_state:0000000000000000 fc_state
     /tmp/ccgNVCWq.s:195    .bss.fc_state:0000000000000000 $d
     /tmp/ccgNVCWq.s:201    .bss.canData:0000000000000000 canData
     /tmp/ccgNVCWq.s:198    .bss.canData:0000000000000000 $d
     /tmp/ccgNVCWq.s:208    .bss.TxHeader:0000000000000000 TxHeader
     /tmp/ccgNVCWq.s:205    .bss.TxHeader:0000000000000000 $d
     /tmp/ccgNVCWq.s:215    .bss.TxHeaderFuelCellTask:0000000000000000 TxHeaderFuelCellTask
     /tmp/ccgNVCWq.s:212    .bss.TxHeaderFuelCellTask:0000000000000000 $d
     /tmp/ccgNVCWq.s:222    .bss.RxHeader:0000000000000000 RxHeader
     /tmp/ccgNVCWq.s:219    .bss.RxHeader:0000000000000000 $d
     /tmp/ccgNVCWq.s:229    .bss.TxMailbox:0000000000000000 TxMailbox
     /tmp/ccgNVCWq.s:226    .bss.TxMailbox:0000000000000000 $d
     /tmp/ccgNVCWq.s:236    .bss.TxMailboxFuelCellTask:0000000000000000 TxMailboxFuelCellTask
     /tmp/ccgNVCWq.s:233    .bss.TxMailboxFuelCellTask:0000000000000000 $d
     /tmp/ccgNVCWq.s:243    .bss.TxData:0000000000000000 TxData
     /tmp/ccgNVCWq.s:240    .bss.TxData:0000000000000000 $d
ARM GAS  /tmp/ccgNVCWq.s 			page 58


     /tmp/ccgNVCWq.s:250    .bss.RxData:0000000000000000 RxData
     /tmp/ccgNVCWq.s:247    .bss.RxData:0000000000000000 $d
     /tmp/ccgNVCWq.s:256    .bss.RxUARTbuff:0000000000000000 RxUARTbuff
     /tmp/ccgNVCWq.s:257    .bss.RxUARTbuff:0000000000000000 $d
     /tmp/ccgNVCWq.s:263    .bss.RxUARTData:0000000000000000 RxUARTData
     /tmp/ccgNVCWq.s:260    .bss.RxUARTData:0000000000000000 $d
     /tmp/ccgNVCWq.s:269    .bss.UartIndex:0000000000000000 UartIndex
     /tmp/ccgNVCWq.s:270    .bss.UartIndex:0000000000000000 $d
     /tmp/ccgNVCWq.s:275    .data.uselessvariable:0000000000000000 uselessvariable
     /tmp/ccgNVCWq.s:282    .bss.button_debounce:0000000000000000 button_debounce
     /tmp/ccgNVCWq.s:279    .bss.button_debounce:0000000000000000 $d
     /tmp/ccgNVCWq.s:285    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:291    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccgNVCWq.s:329    .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000001c $d
     /tmp/ccgNVCWq.s:335    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:341    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccgNVCWq.s:388    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000028 $d
     /tmp/ccgNVCWq.s:394    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:400    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccgNVCWq.s:447    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000028 $d
     /tmp/ccgNVCWq.s:453    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:459    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccgNVCWq.s:506    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000028 $d
     /tmp/ccgNVCWq.s:517    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:523    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccgNVCWq.s:630    .text.HAL_UART_RxCpltCallback:000000000000008c $d
     /tmp/ccgNVCWq.s:638    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccgNVCWq.s:644    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccgNVCWq.s:792    .text.HAL_GPIO_EXTI_Callback:00000000000000c0 $d
     /tmp/ccgNVCWq.s:798    .text.main:0000000000000000 $t
     /tmp/ccgNVCWq.s:804    .text.main:0000000000000000 main
     /tmp/ccgNVCWq.s:953    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccgNVCWq.s:1471   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccgNVCWq.s:1402   .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccgNVCWq.s:1083   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccgNVCWq.s:1221   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccgNVCWq.s:1321   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccgNVCWq.s:927    .text.main:00000000000000b8 $d
     /tmp/ccgNVCWq.s:1755   .text.StartCanTask:0000000000000000 StartCanTask
     /tmp/ccgNVCWq.s:1788   .text.StartI2cTask:0000000000000000 StartI2cTask
     /tmp/ccgNVCWq.s:1825   .text.StartFuelCellTask:0000000000000000 StartFuelCellTask
     /tmp/ccgNVCWq.s:947    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccgNVCWq.s:2066   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccgNVCWq.s:1078   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccgNVCWq.s:1210   .text.MX_CAN1_Init:00000000000000a8 $d
     /tmp/ccgNVCWq.s:1216   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccgNVCWq.s:1309   .text.MX_I2C1_Init:0000000000000074 $d
     /tmp/ccgNVCWq.s:1316   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccgNVCWq.s:1391   .text.MX_USART1_UART_Init:0000000000000058 $d
     /tmp/ccgNVCWq.s:1397   .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccgNVCWq.s:1461   .text.MX_DMA_Init:0000000000000048 $d
     /tmp/ccgNVCWq.s:1466   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccgNVCWq.s:1741   .text.MX_GPIO_Init:00000000000001d4 $d
     /tmp/ccgNVCWq.s:1749   .text.StartCanTask:0000000000000000 $t
     /tmp/ccgNVCWq.s:1782   .text.StartI2cTask:0000000000000000 $t
     /tmp/ccgNVCWq.s:1819   .text.StartFuelCellTask:0000000000000000 $t
     /tmp/ccgNVCWq.s:1869   .text.StartFuelCellTask:0000000000000030 $d
ARM GAS  /tmp/ccgNVCWq.s 			page 59


     /tmp/ccgNVCWq.s:1874   .text.StartFuelCellTask:0000000000000044 $t
     /tmp/ccgNVCWq.s:1997   .text.StartFuelCellTask:000000000000011c $d
     /tmp/ccgNVCWq.s:2008   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccgNVCWq.s:2014   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccgNVCWq.s:2055   .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccgNVCWq.s:2060   .text.Error_Handler:0000000000000000 $t
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39
                           .group:0000000000000000 wm4.main.h.60.84418a90fcd58ba06baa4da515eb273a
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.32.a1b57c0d46431311074569d60ca736af
                           .group:0000000000000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:0000000000000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:0000000000000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:0000000000000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:0000000000000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:0000000000000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
ARM GAS  /tmp/ccgNVCWq.s 			page 60


                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.reent.h.96.88022c5a22979c33a20a5d76964119ed
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a17c2bf78722c1d7b86ba8d45e5b5f29
                           .group:0000000000000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:0000000000000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:0000000000000000 wm4.cmsis_os.h.129.5f4adf2a422dfa714f64051974ebee7a
                           .group:0000000000000000 wm4.cmsis_os2.h.151.57db232dfe421e4f781dd02c42ee4360
                           .group:0000000000000000 wm4.cmsis_os.h.179.c36f217fbf28f1f2e754518bfb5a2ae8
                           .group:0000000000000000 wm4.cdefs.h.49.39045112216f6a021dbdffe3bf5accce
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
osSemaphoreRelease
HAL_UART_Transmit_DMA
HAL_UART_Receive_DMA
HAL_GetTick
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_GPIO_WritePin
osKernelInitialize
osSemaphoreNew
osThreadNew
osKernelStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_MCOConfig
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_Init
osDelay
HAL_CAN_AddTxMessage
osSemaphoreAcquire
HAL_IncTick
