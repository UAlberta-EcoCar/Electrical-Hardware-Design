ARM GAS  /tmp/ccLnzcom.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	hcan1
  20              		.section	.bss.hcan1,"aw",%nobits
  21              		.align	2
  24              	hcan1:
  25 0000 00000000 		.space	40
  25      00000000 
  25      00000000 
  25      00000000 
  25      00000000 
  26              		.global	hi2c1
  27              		.section	.bss.hi2c1,"aw",%nobits
  28              		.align	2
  31              	hi2c1:
  32 0000 00000000 		.space	84
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.global	huart1
  34              		.section	.bss.huart1,"aw",%nobits
  35              		.align	2
  38              	huart1:
  39 0000 00000000 		.space	132
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	CanTaskHandle
  41              		.section	.bss.CanTaskHandle,"aw",%nobits
  42              		.align	2
  45              	CanTaskHandle:
  46 0000 00000000 		.space	4
  47              		.global	CanTaskBuffer
  48              		.section	.bss.CanTaskBuffer,"aw",%nobits
  49              		.align	2
  52              	CanTaskBuffer:
  53 0000 00000000 		.space	512
  53      00000000 
  53      00000000 
ARM GAS  /tmp/ccLnzcom.s 			page 2


  53      00000000 
  53      00000000 
  54              		.global	CanTaskControlBlock
  55              		.section	.bss.CanTaskControlBlock,"aw",%nobits
  56              		.align	3
  59              	CanTaskControlBlock:
  60 0000 00000000 		.space	1160
  60      00000000 
  60      00000000 
  60      00000000 
  60      00000000 
  61              		.global	CanTask_attributes
  62              		.section	.rodata
  63              		.align	2
  64              	.LC0:
  65 0000 43616E54 		.ascii	"CanTask\000"
  65      61736B00 
  66              		.section	.rodata.CanTask_attributes,"a"
  67              		.align	2
  70              	CanTask_attributes:
  71 0000 00000000 		.word	.LC0
  72 0004 00000000 		.space	4
  73 0008 00000000 		.word	CanTaskControlBlock
  74 000c 88040000 		.word	1160
  75 0010 00000000 		.word	CanTaskBuffer
  76 0014 00020000 		.word	512
  77 0018 19000000 		.word	25
  78 001c 00000000 		.space	8
  78      00000000 
  79              		.global	I2cTaskHandle
  80              		.section	.bss.I2cTaskHandle,"aw",%nobits
  81              		.align	2
  84              	I2cTaskHandle:
  85 0000 00000000 		.space	4
  86              		.global	I2cTaskBuffer
  87              		.section	.bss.I2cTaskBuffer,"aw",%nobits
  88              		.align	2
  91              	I2cTaskBuffer:
  92 0000 00000000 		.space	512
  92      00000000 
  92      00000000 
  92      00000000 
  92      00000000 
  93              		.global	I2cTaskControlBlock
  94              		.section	.bss.I2cTaskControlBlock,"aw",%nobits
  95              		.align	3
  98              	I2cTaskControlBlock:
  99 0000 00000000 		.space	1160
  99      00000000 
  99      00000000 
  99      00000000 
  99      00000000 
 100              		.global	I2cTask_attributes
 101              		.section	.rodata
 102              		.align	2
 103              	.LC1:
 104 0008 49326354 		.ascii	"I2cTask\000"
ARM GAS  /tmp/ccLnzcom.s 			page 3


 104      61736B00 
 105              		.section	.rodata.I2cTask_attributes,"a"
 106              		.align	2
 109              	I2cTask_attributes:
 110 0000 08000000 		.word	.LC1
 111 0004 00000000 		.space	4
 112 0008 00000000 		.word	I2cTaskControlBlock
 113 000c 88040000 		.word	1160
 114 0010 00000000 		.word	I2cTaskBuffer
 115 0014 00020000 		.word	512
 116 0018 1A000000 		.word	26
 117 001c 00000000 		.space	8
 117      00000000 
 118              		.global	FuelCellTaskHandle
 119              		.section	.bss.FuelCellTaskHandle,"aw",%nobits
 120              		.align	2
 123              	FuelCellTaskHandle:
 124 0000 00000000 		.space	4
 125              		.global	FuelCellTaskBuffer
 126              		.section	.bss.FuelCellTaskBuffer,"aw",%nobits
 127              		.align	2
 130              	FuelCellTaskBuffer:
 131 0000 00000000 		.space	512
 131      00000000 
 131      00000000 
 131      00000000 
 131      00000000 
 132              		.global	FuelCellTaskControlBlock
 133              		.section	.bss.FuelCellTaskControlBlock,"aw",%nobits
 134              		.align	3
 137              	FuelCellTaskControlBlock:
 138 0000 00000000 		.space	1160
 138      00000000 
 138      00000000 
 138      00000000 
 138      00000000 
 139              		.global	FuelCellTask_attributes
 140              		.section	.rodata
 141              		.align	2
 142              	.LC2:
 143 0010 4675656C 		.ascii	"FuelCellTask\000"
 143      43656C6C 
 143      5461736B 
 143      00
 144              		.section	.rodata.FuelCellTask_attributes,"a"
 145              		.align	2
 148              	FuelCellTask_attributes:
 149 0000 10000000 		.word	.LC2
 150 0004 00000000 		.space	4
 151 0008 00000000 		.word	FuelCellTaskControlBlock
 152 000c 88040000 		.word	1160
 153 0010 00000000 		.word	FuelCellTaskBuffer
 154 0014 00020000 		.word	512
 155 0018 1B000000 		.word	27
 156 001c 00000000 		.space	8
 156      00000000 
 157              		.global	canMsgOkSemHandle
ARM GAS  /tmp/ccLnzcom.s 			page 4


 158              		.section	.bss.canMsgOkSemHandle,"aw",%nobits
 159              		.align	2
 162              	canMsgOkSemHandle:
 163 0000 00000000 		.space	4
 164              		.global	canMsgOkSem_attributes
 165              		.section	.rodata
 166 001d 000000   		.align	2
 167              	.LC3:
 168 0020 63616E4D 		.ascii	"canMsgOkSem\000"
 168      73674F6B 
 168      53656D00 
 169              		.section	.rodata.canMsgOkSem_attributes,"a"
 170              		.align	2
 173              	canMsgOkSem_attributes:
 174 0000 20000000 		.word	.LC3
 175 0004 00000000 		.space	12
 175      00000000 
 175      00000000 
 176              		.global	fc_state
 177              		.section	.bss.fc_state,"aw",%nobits
 180              	fc_state:
 181 0000 00       		.space	1
 182              		.global	accData
 183              		.section	.bss.accData,"aw",%nobits
 184              		.align	2
 187              	accData:
 188 0000 000000   		.space	3
 189              		.global	fcData
 190              		.section	.bss.fcData,"aw",%nobits
 191              		.align	2
 194              	fcData:
 195 0000 00000000 		.space	12
 195      00000000 
 195      00000000 
 196              		.global	canData
 197              		.section	.bss.canData,"aw",%nobits
 198              		.align	2
 201              	canData:
 202 0000 00000000 		.space	8
 202      00000000 
 203              		.global	TxHeader
 204              		.section	.bss.TxHeader,"aw",%nobits
 205              		.align	2
 208              	TxHeader:
 209 0000 00000000 		.space	24
 209      00000000 
 209      00000000 
 209      00000000 
 209      00000000 
 210              		.global	TxHeaderFuelCellTask
 211              		.section	.bss.TxHeaderFuelCellTask,"aw",%nobits
 212              		.align	2
 215              	TxHeaderFuelCellTask:
 216 0000 00000000 		.space	24
 216      00000000 
 216      00000000 
 216      00000000 
ARM GAS  /tmp/ccLnzcom.s 			page 5


 216      00000000 
 217              		.global	RxHeader
 218              		.section	.bss.RxHeader,"aw",%nobits
 219              		.align	2
 222              	RxHeader:
 223 0000 00000000 		.space	28
 223      00000000 
 223      00000000 
 223      00000000 
 223      00000000 
 224              		.global	TxMailbox
 225              		.section	.bss.TxMailbox,"aw",%nobits
 226              		.align	2
 229              	TxMailbox:
 230 0000 00000000 		.space	4
 231              		.global	TxMailboxFuelCellTask
 232              		.section	.bss.TxMailboxFuelCellTask,"aw",%nobits
 233              		.align	2
 236              	TxMailboxFuelCellTask:
 237 0000 00000000 		.space	4
 238              		.global	TxData
 239              		.section	.bss.TxData,"aw",%nobits
 240              		.align	2
 243              	TxData:
 244 0000 00000000 		.space	8
 244      00000000 
 245              		.global	RxData
 246              		.section	.bss.RxData,"aw",%nobits
 247              		.align	2
 250              	RxData:
 251 0000 00000000 		.space	8
 251      00000000 
 252              		.global	button_debounce
 253              		.section	.bss.button_debounce,"aw",%nobits
 254              		.align	2
 257              	button_debounce:
 258 0000 00000000 		.space	4
 259              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 260              		.align	1
 261              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 266              	HAL_CAN_RxFifo0MsgPendingCallback:
 267              	.LFB136:
 268              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
ARM GAS  /tmp/ccLnzcom.s 			page 6


  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** typedef StaticTask_t osStaticThreadDef_t;
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** typedef struct
  32:Core/Src/main.c **** {
  33:Core/Src/main.c ****   uint8_t x, y, z;
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** } ACCELEROMETER;
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** typedef struct
  38:Core/Src/main.c **** {
  39:Core/Src/main.c ****   uint8_t purge_state, supply_state;
  40:Core/Src/main.c ****   float internal_stack_temp, internal_stack_pressure;
  41:Core/Src/main.c ****   // Potentially some more data here
  42:Core/Src/main.c **** } FC;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** typedef struct
  45:Core/Src/main.c **** {
  46:Core/Src/main.c ****   // Data received from CAN
  47:Core/Src/main.c ****   uint8_t H2_OK;
  48:Core/Src/main.c ****   float cap_voltage;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** } CANBUS;
  51:Core/Src/main.c **** /* USER CODE END PTD */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  54:Core/Src/main.c **** /* USER CODE BEGIN PD */
  55:Core/Src/main.c **** #define FULL_CAP_CHARGE_V 18
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** #define FUEL_CELL_OFF_STATE 0x00
  58:Core/Src/main.c **** #define FUEL_CELL_STRTUP_STATE 0x01
  59:Core/Src/main.c **** #define FUEL_CELL_CHRGE_STATE 0x02
  60:Core/Src/main.c **** #define FUEL_CELL_RUN_STATE 0x04
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** #define CAN_TX_MAILBOX_NONE 0x00000000U // Remove reference to tx mailbox
  63:Core/Src/main.c **** /* USER CODE END PD */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  66:Core/Src/main.c **** /* USER CODE BEGIN PM */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* USER CODE END PM */
ARM GAS  /tmp/ccLnzcom.s 			page 7


  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  71:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** UART_HandleTypeDef huart1;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Definitions for CanTask */
  78:Core/Src/main.c **** osThreadId_t CanTaskHandle;
  79:Core/Src/main.c **** uint32_t CanTaskBuffer[128];
  80:Core/Src/main.c **** osStaticThreadDef_t CanTaskControlBlock;
  81:Core/Src/main.c **** const osThreadAttr_t CanTask_attributes = {
  82:Core/Src/main.c ****     .name = "CanTask",
  83:Core/Src/main.c ****     .cb_mem = &CanTaskControlBlock,
  84:Core/Src/main.c ****     .cb_size = sizeof(CanTaskControlBlock),
  85:Core/Src/main.c ****     .stack_mem = &CanTaskBuffer[0],
  86:Core/Src/main.c ****     .stack_size = sizeof(CanTaskBuffer),
  87:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal1,
  88:Core/Src/main.c **** };
  89:Core/Src/main.c **** /* Definitions for I2cTask */
  90:Core/Src/main.c **** osThreadId_t I2cTaskHandle;
  91:Core/Src/main.c **** uint32_t I2cTaskBuffer[128];
  92:Core/Src/main.c **** osStaticThreadDef_t I2cTaskControlBlock;
  93:Core/Src/main.c **** const osThreadAttr_t I2cTask_attributes = {
  94:Core/Src/main.c ****     .name = "I2cTask",
  95:Core/Src/main.c ****     .cb_mem = &I2cTaskControlBlock,
  96:Core/Src/main.c ****     .cb_size = sizeof(I2cTaskControlBlock),
  97:Core/Src/main.c ****     .stack_mem = &I2cTaskBuffer[0],
  98:Core/Src/main.c ****     .stack_size = sizeof(I2cTaskBuffer),
  99:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal2,
 100:Core/Src/main.c **** };
 101:Core/Src/main.c **** /* Definitions for FuelCellTask */
 102:Core/Src/main.c **** osThreadId_t FuelCellTaskHandle;
 103:Core/Src/main.c **** uint32_t FuelCellTaskBuffer[128];
 104:Core/Src/main.c **** osStaticThreadDef_t FuelCellTaskControlBlock;
 105:Core/Src/main.c **** const osThreadAttr_t FuelCellTask_attributes = {
 106:Core/Src/main.c ****     .name = "FuelCellTask",
 107:Core/Src/main.c ****     .cb_mem = &FuelCellTaskControlBlock,
 108:Core/Src/main.c ****     .cb_size = sizeof(FuelCellTaskControlBlock),
 109:Core/Src/main.c ****     .stack_mem = &FuelCellTaskBuffer[0],
 110:Core/Src/main.c ****     .stack_size = sizeof(FuelCellTaskBuffer),
 111:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal3,
 112:Core/Src/main.c **** };
 113:Core/Src/main.c **** /* Definitions for canMsgOkSem */
 114:Core/Src/main.c **** osSemaphoreId_t canMsgOkSemHandle;
 115:Core/Src/main.c **** const osSemaphoreAttr_t canMsgOkSem_attributes = {
 116:Core/Src/main.c ****     .name = "canMsgOkSem"};
 117:Core/Src/main.c **** /* USER CODE BEGIN PV */
 118:Core/Src/main.c **** uint8_t fc_state = FUEL_CELL_OFF_STATE;
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** ACCELEROMETER accData;
 121:Core/Src/main.c **** FC fcData;
 122:Core/Src/main.c **** CANBUS canData;
 123:Core/Src/main.c **** 
 124:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader, TxHeaderFuelCellTask;
 125:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
ARM GAS  /tmp/ccLnzcom.s 			page 8


 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** uint32_t TxMailbox, TxMailboxFuelCellTask;
 128:Core/Src/main.c **** uint8_t TxData[8];
 129:Core/Src/main.c **** uint8_t RxData[8];
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** uint32_t button_debounce;
 132:Core/Src/main.c **** /* USER CODE END PV */
 133:Core/Src/main.c **** 
 134:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 135:Core/Src/main.c **** void SystemClock_Config(void);
 136:Core/Src/main.c **** static void MX_GPIO_Init(void);
 137:Core/Src/main.c **** static void MX_CAN1_Init(void);
 138:Core/Src/main.c **** static void MX_I2C1_Init(void);
 139:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 140:Core/Src/main.c **** void StartCanTask(void *argument);
 141:Core/Src/main.c **** void StartI2cTask(void *argument);
 142:Core/Src/main.c **** void StartFuelCellTask(void *argument);
 143:Core/Src/main.c **** 
 144:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 145:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 146:Core/Src/main.c **** {
 269              		.loc 1 146 1
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 8
 272              		@ frame_needed = 1, uses_anonymous_args = 0
 273 0000 80B5     		push	{r7, lr}
 274              	.LCFI0:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 7, -8
 277              		.cfi_offset 14, -4
 278 0002 82B0     		sub	sp, sp, #8
 279              	.LCFI1:
 280              		.cfi_def_cfa_offset 16
 281 0004 00AF     		add	r7, sp, #0
 282              	.LCFI2:
 283              		.cfi_def_cfa_register 7
 284 0006 7860     		str	r0, [r7, #4]
 147:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 285              		.loc 1 147 3
 286 0008 044B     		ldr	r3, .L2
 287 000a 054A     		ldr	r2, .L2+4
 288 000c 0021     		movs	r1, #0
 289 000e 7868     		ldr	r0, [r7, #4]
 290 0010 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 148:Core/Src/main.c **** }
 291              		.loc 1 148 1
 292 0014 00BF     		nop
 293 0016 0837     		adds	r7, r7, #8
 294              	.LCFI3:
 295              		.cfi_def_cfa_offset 8
 296 0018 BD46     		mov	sp, r7
 297              	.LCFI4:
 298              		.cfi_def_cfa_register 13
 299              		@ sp needed
 300 001a 80BD     		pop	{r7, pc}
 301              	.L3:
 302              		.align	2
ARM GAS  /tmp/ccLnzcom.s 			page 9


 303              	.L2:
 304 001c 00000000 		.word	RxData
 305 0020 00000000 		.word	RxHeader
 306              		.cfi_endproc
 307              	.LFE136:
 309              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 310              		.align	1
 311              		.global	HAL_CAN_TxMailbox0CompleteCallback
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 316              	HAL_CAN_TxMailbox0CompleteCallback:
 317              	.LFB137:
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** /* Transmit Completed Callbacks for Message Sent Confirmations */
 151:Core/Src/main.c **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 152:Core/Src/main.c **** {
 318              		.loc 1 152 1
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322 0000 80B5     		push	{r7, lr}
 323              	.LCFI5:
 324              		.cfi_def_cfa_offset 8
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 82B0     		sub	sp, sp, #8
 328              	.LCFI6:
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI7:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 153:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX0)
 334              		.loc 1 153 29
 335 0008 074B     		ldr	r3, .L7
 336 000a 1B68     		ldr	r3, [r3]
 337              		.loc 1 153 6
 338 000c 012B     		cmp	r3, #1
 339 000e 07D1     		bne	.L6
 154:Core/Src/main.c ****   {
 155:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 340              		.loc 1 155 27
 341 0010 054B     		ldr	r3, .L7
 342 0012 0022     		movs	r2, #0
 343 0014 1A60     		str	r2, [r3]
 156:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 344              		.loc 1 156 5
 345 0016 054B     		ldr	r3, .L7+4
 346 0018 1B68     		ldr	r3, [r3]
 347 001a 1846     		mov	r0, r3
 348 001c FFF7FEFF 		bl	osSemaphoreRelease
 349              	.L6:
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c **** }
 350              		.loc 1 158 1
 351 0020 00BF     		nop
ARM GAS  /tmp/ccLnzcom.s 			page 10


 352 0022 0837     		adds	r7, r7, #8
 353              	.LCFI8:
 354              		.cfi_def_cfa_offset 8
 355 0024 BD46     		mov	sp, r7
 356              	.LCFI9:
 357              		.cfi_def_cfa_register 13
 358              		@ sp needed
 359 0026 80BD     		pop	{r7, pc}
 360              	.L8:
 361              		.align	2
 362              	.L7:
 363 0028 00000000 		.word	TxMailboxFuelCellTask
 364 002c 00000000 		.word	canMsgOkSemHandle
 365              		.cfi_endproc
 366              	.LFE137:
 368              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 369              		.align	1
 370              		.global	HAL_CAN_TxMailbox1CompleteCallback
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 375              	HAL_CAN_TxMailbox1CompleteCallback:
 376              	.LFB138:
 159:Core/Src/main.c **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 160:Core/Src/main.c **** {
 377              		.loc 1 160 1
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 8
 380              		@ frame_needed = 1, uses_anonymous_args = 0
 381 0000 80B5     		push	{r7, lr}
 382              	.LCFI10:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              	.LCFI11:
 388              		.cfi_def_cfa_offset 16
 389 0004 00AF     		add	r7, sp, #0
 390              	.LCFI12:
 391              		.cfi_def_cfa_register 7
 392 0006 7860     		str	r0, [r7, #4]
 161:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX1)
 393              		.loc 1 161 29
 394 0008 074B     		ldr	r3, .L12
 395 000a 1B68     		ldr	r3, [r3]
 396              		.loc 1 161 6
 397 000c 022B     		cmp	r3, #2
 398 000e 07D1     		bne	.L11
 162:Core/Src/main.c ****   {
 163:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 399              		.loc 1 163 27
 400 0010 054B     		ldr	r3, .L12
 401 0012 0022     		movs	r2, #0
 402 0014 1A60     		str	r2, [r3]
 164:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 403              		.loc 1 164 5
 404 0016 054B     		ldr	r3, .L12+4
ARM GAS  /tmp/ccLnzcom.s 			page 11


 405 0018 1B68     		ldr	r3, [r3]
 406 001a 1846     		mov	r0, r3
 407 001c FFF7FEFF 		bl	osSemaphoreRelease
 408              	.L11:
 165:Core/Src/main.c ****   }
 166:Core/Src/main.c **** }
 409              		.loc 1 166 1
 410 0020 00BF     		nop
 411 0022 0837     		adds	r7, r7, #8
 412              	.LCFI13:
 413              		.cfi_def_cfa_offset 8
 414 0024 BD46     		mov	sp, r7
 415              	.LCFI14:
 416              		.cfi_def_cfa_register 13
 417              		@ sp needed
 418 0026 80BD     		pop	{r7, pc}
 419              	.L13:
 420              		.align	2
 421              	.L12:
 422 0028 00000000 		.word	TxMailboxFuelCellTask
 423 002c 00000000 		.word	canMsgOkSemHandle
 424              		.cfi_endproc
 425              	.LFE138:
 427              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 428              		.align	1
 429              		.global	HAL_CAN_TxMailbox2CompleteCallback
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	HAL_CAN_TxMailbox2CompleteCallback:
 435              	.LFB139:
 167:Core/Src/main.c **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 168:Core/Src/main.c **** {
 436              		.loc 1 168 1
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0000 80B5     		push	{r7, lr}
 441              	.LCFI15:
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 82B0     		sub	sp, sp, #8
 446              	.LCFI16:
 447              		.cfi_def_cfa_offset 16
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI17:
 450              		.cfi_def_cfa_register 7
 451 0006 7860     		str	r0, [r7, #4]
 169:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX2)
 452              		.loc 1 169 29
 453 0008 074B     		ldr	r3, .L17
 454 000a 1B68     		ldr	r3, [r3]
 455              		.loc 1 169 6
 456 000c 042B     		cmp	r3, #4
 457 000e 07D1     		bne	.L16
 170:Core/Src/main.c ****   {
ARM GAS  /tmp/ccLnzcom.s 			page 12


 171:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 458              		.loc 1 171 27
 459 0010 054B     		ldr	r3, .L17
 460 0012 0022     		movs	r2, #0
 461 0014 1A60     		str	r2, [r3]
 172:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 462              		.loc 1 172 5
 463 0016 054B     		ldr	r3, .L17+4
 464 0018 1B68     		ldr	r3, [r3]
 465 001a 1846     		mov	r0, r3
 466 001c FFF7FEFF 		bl	osSemaphoreRelease
 467              	.L16:
 173:Core/Src/main.c ****   }
 174:Core/Src/main.c **** }
 468              		.loc 1 174 1
 469 0020 00BF     		nop
 470 0022 0837     		adds	r7, r7, #8
 471              	.LCFI18:
 472              		.cfi_def_cfa_offset 8
 473 0024 BD46     		mov	sp, r7
 474              	.LCFI19:
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 0026 80BD     		pop	{r7, pc}
 478              	.L18:
 479              		.align	2
 480              	.L17:
 481 0028 00000000 		.word	TxMailboxFuelCellTask
 482 002c 00000000 		.word	canMsgOkSemHandle
 483              		.cfi_endproc
 484              	.LFE139:
 486              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 487              		.align	1
 488              		.global	HAL_GPIO_EXTI_Callback
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 493              	HAL_GPIO_EXTI_Callback:
 494              	.LFB140:
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 177:Core/Src/main.c **** {
 495              		.loc 1 177 1
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 8
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0000 80B5     		push	{r7, lr}
 500              	.LCFI20:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 7, -8
 503              		.cfi_offset 14, -4
 504 0002 82B0     		sub	sp, sp, #8
 505              	.LCFI21:
 506              		.cfi_def_cfa_offset 16
 507 0004 00AF     		add	r7, sp, #0
 508              	.LCFI22:
 509              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccLnzcom.s 			page 13


 510 0006 0346     		mov	r3, r0
 511 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 178:Core/Src/main.c ****   switch (GPIO_Pin)
 512              		.loc 1 178 3
 513 000a FB88     		ldrh	r3, [r7, #6]
 514 000c B3F5004F 		cmp	r3, #32768
 515 0010 45D0     		beq	.L32
 516 0012 B3F5004F 		cmp	r3, #32768
 517 0016 44DC     		bgt	.L33
 518 0018 B3F5804F 		cmp	r3, #16384
 519 001c 0FD0     		beq	.L22
 520 001e B3F5804F 		cmp	r3, #16384
 521 0022 3EDC     		bgt	.L33
 522 0024 402B     		cmp	r3, #64
 523 0026 36D0     		beq	.L23
 524 0028 402B     		cmp	r3, #64
 525 002a 3ADC     		bgt	.L33
 526 002c 202B     		cmp	r3, #32
 527 002e 3AD0     		beq	.L34
 528 0030 202B     		cmp	r3, #32
 529 0032 36DC     		bgt	.L33
 530 0034 082B     		cmp	r3, #8
 531 0036 20D0     		beq	.L25
 532 0038 102B     		cmp	r3, #16
 533 003a 36D0     		beq	.L35
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****   case BRD_STRT_Pin:
 181:Core/Src/main.c ****     if (HAL_GetTick() - button_debounce > 1000)
 182:Core/Src/main.c ****     {
 183:Core/Src/main.c ****       if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE)) // If 
 184:Core/Src/main.c ****       {
 185:Core/Src/main.c ****         button_debounce = HAL_GetTick();
 186:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 187:Core/Src/main.c ****       }
 188:Core/Src/main.c ****       else
 189:Core/Src/main.c ****       {
 190:Core/Src/main.c ****         HAL_GetTick();
 191:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 192:Core/Src/main.c ****       }
 193:Core/Src/main.c ****     }
 194:Core/Src/main.c ****     break;
 195:Core/Src/main.c ****   case BRD_PRGE_Pin:
 196:Core/Src/main.c ****     /* Do something */
 197:Core/Src/main.c ****     break;
 198:Core/Src/main.c ****   case EXT_STRT_Pin:
 199:Core/Src/main.c ****     if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE))
 200:Core/Src/main.c ****     {
 201:Core/Src/main.c ****       fc_state = FUEL_CELL_OFF_STATE;
 202:Core/Src/main.c ****     }
 203:Core/Src/main.c ****     else
 204:Core/Src/main.c ****     {
 205:Core/Src/main.c ****       fc_state = FUEL_CELL_STRTUP_STATE;
 206:Core/Src/main.c ****     }
 207:Core/Src/main.c ****     break;
 208:Core/Src/main.c ****   case ACC_INT1_Pin:
 209:Core/Src/main.c ****     /* Do something */
 210:Core/Src/main.c ****     break;
ARM GAS  /tmp/ccLnzcom.s 			page 14


 211:Core/Src/main.c ****   case ACC_INT2_Pin:
 212:Core/Src/main.c ****     /* Do something */
 213:Core/Src/main.c ****     break;
 214:Core/Src/main.c ****   case EXT_STOP_Pin:
 215:Core/Src/main.c ****     /* Do something */
 216:Core/Src/main.c ****     fc_state = FUEL_CELL_OFF_STATE;
 217:Core/Src/main.c ****     break;
 218:Core/Src/main.c ****   default:
 219:Core/Src/main.c ****     /* Should never happen */
 220:Core/Src/main.c ****     break;
 534              		.loc 1 220 5
 535 003c 31E0     		b	.L33
 536              	.L22:
 181:Core/Src/main.c ****     {
 537              		.loc 1 181 9
 538 003e FFF7FEFF 		bl	HAL_GetTick
 539 0042 0246     		mov	r2, r0
 181:Core/Src/main.c ****     {
 540              		.loc 1 181 23
 541 0044 1C4B     		ldr	r3, .L38
 542 0046 1B68     		ldr	r3, [r3]
 543 0048 D31A     		subs	r3, r2, r3
 181:Core/Src/main.c ****     {
 544              		.loc 1 181 8
 545 004a B3F57A7F 		cmp	r3, #1000
 546 004e 2ED9     		bls	.L36
 183:Core/Src/main.c ****       {
 547              		.loc 1 183 20
 548 0050 1A4B     		ldr	r3, .L38+4
 549 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 550 0054 03F00703 		and	r3, r3, #7
 183:Core/Src/main.c ****       {
 551              		.loc 1 183 10
 552 0058 002B     		cmp	r3, #0
 553 005a 08D0     		beq	.L28
 185:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 554              		.loc 1 185 27
 555 005c FFF7FEFF 		bl	HAL_GetTick
 556 0060 0346     		mov	r3, r0
 185:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 557              		.loc 1 185 25
 558 0062 154A     		ldr	r2, .L38
 559 0064 1360     		str	r3, [r2]
 186:Core/Src/main.c ****       }
 560              		.loc 1 186 18
 561 0066 154B     		ldr	r3, .L38+4
 562 0068 0022     		movs	r2, #0
 563 006a 1A70     		strb	r2, [r3]
 194:Core/Src/main.c ****   case BRD_PRGE_Pin:
 564              		.loc 1 194 5
 565 006c 1FE0     		b	.L36
 566              	.L28:
 190:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 567              		.loc 1 190 9
 568 006e FFF7FEFF 		bl	HAL_GetTick
 191:Core/Src/main.c ****       }
 569              		.loc 1 191 18
ARM GAS  /tmp/ccLnzcom.s 			page 15


 570 0072 124B     		ldr	r3, .L38+4
 571 0074 0122     		movs	r2, #1
 572 0076 1A70     		strb	r2, [r3]
 194:Core/Src/main.c ****   case BRD_PRGE_Pin:
 573              		.loc 1 194 5
 574 0078 19E0     		b	.L36
 575              	.L25:
 199:Core/Src/main.c ****     {
 576              		.loc 1 199 18
 577 007a 104B     		ldr	r3, .L38+4
 578 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 579 007e 03F00703 		and	r3, r3, #7
 199:Core/Src/main.c ****     {
 580              		.loc 1 199 8
 581 0082 002B     		cmp	r3, #0
 582 0084 03D0     		beq	.L30
 201:Core/Src/main.c ****     }
 583              		.loc 1 201 16
 584 0086 0D4B     		ldr	r3, .L38+4
 585 0088 0022     		movs	r2, #0
 586 008a 1A70     		strb	r2, [r3]
 207:Core/Src/main.c ****   case ACC_INT1_Pin:
 587              		.loc 1 207 5
 588 008c 10E0     		b	.L29
 589              	.L30:
 205:Core/Src/main.c ****     }
 590              		.loc 1 205 16
 591 008e 0B4B     		ldr	r3, .L38+4
 592 0090 0122     		movs	r2, #1
 593 0092 1A70     		strb	r2, [r3]
 207:Core/Src/main.c ****   case ACC_INT1_Pin:
 594              		.loc 1 207 5
 595 0094 0CE0     		b	.L29
 596              	.L23:
 216:Core/Src/main.c ****     break;
 597              		.loc 1 216 14
 598 0096 094B     		ldr	r3, .L38+4
 599 0098 0022     		movs	r2, #0
 600 009a 1A70     		strb	r2, [r3]
 217:Core/Src/main.c ****   default:
 601              		.loc 1 217 5
 602 009c 08E0     		b	.L29
 603              	.L32:
 197:Core/Src/main.c ****   case EXT_STRT_Pin:
 604              		.loc 1 197 5
 605 009e 00BF     		nop
 606 00a0 06E0     		b	.L37
 607              	.L33:
 608              		.loc 1 220 5
 609 00a2 00BF     		nop
 610 00a4 04E0     		b	.L37
 611              	.L34:
 213:Core/Src/main.c ****   case EXT_STOP_Pin:
 612              		.loc 1 213 5
 613 00a6 00BF     		nop
 614 00a8 02E0     		b	.L37
 615              	.L35:
ARM GAS  /tmp/ccLnzcom.s 			page 16


 210:Core/Src/main.c ****   case ACC_INT2_Pin:
 616              		.loc 1 210 5
 617 00aa 00BF     		nop
 618 00ac 00E0     		b	.L37
 619              	.L36:
 194:Core/Src/main.c ****   case BRD_PRGE_Pin:
 620              		.loc 1 194 5
 621 00ae 00BF     		nop
 622              	.L29:
 623              	.L37:
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c **** }
 624              		.loc 1 222 1
 625 00b0 00BF     		nop
 626 00b2 0837     		adds	r7, r7, #8
 627              	.LCFI23:
 628              		.cfi_def_cfa_offset 8
 629 00b4 BD46     		mov	sp, r7
 630              	.LCFI24:
 631              		.cfi_def_cfa_register 13
 632              		@ sp needed
 633 00b6 80BD     		pop	{r7, pc}
 634              	.L39:
 635              		.align	2
 636              	.L38:
 637 00b8 00000000 		.word	button_debounce
 638 00bc 00000000 		.word	fc_state
 639              		.cfi_endproc
 640              	.LFE140:
 642              		.section	.text.main,"ax",%progbits
 643              		.align	1
 644              		.global	main
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	main:
 650              	.LFB141:
 223:Core/Src/main.c **** /* USER CODE END PFP */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 226:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** /* USER CODE END 0 */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** /**
 231:Core/Src/main.c ****  * @brief  The application entry point.
 232:Core/Src/main.c ****  * @retval int
 233:Core/Src/main.c ****  */
 234:Core/Src/main.c **** int main(void)
 235:Core/Src/main.c **** {
 651              		.loc 1 235 1
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655 0000 80B5     		push	{r7, lr}
 656              	.LCFI25:
 657              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLnzcom.s 			page 17


 658              		.cfi_offset 7, -8
 659              		.cfi_offset 14, -4
 660 0002 00AF     		add	r7, sp, #0
 661              	.LCFI26:
 662              		.cfi_def_cfa_register 7
 236:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE END 1 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 243:Core/Src/main.c ****   HAL_Init();
 663              		.loc 1 243 3
 664 0004 FFF7FEFF 		bl	HAL_Init
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END Init */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* Configure the system clock */
 250:Core/Src/main.c ****   SystemClock_Config();
 665              		.loc 1 250 3
 666 0008 FFF7FEFF 		bl	SystemClock_Config
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END SysInit */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* Initialize all configured peripherals */
 257:Core/Src/main.c ****   MX_GPIO_Init();
 667              		.loc 1 257 3
 668 000c FFF7FEFF 		bl	MX_GPIO_Init
 258:Core/Src/main.c ****   MX_CAN1_Init();
 669              		.loc 1 258 3
 670 0010 FFF7FEFF 		bl	MX_CAN1_Init
 259:Core/Src/main.c ****   MX_I2C1_Init();
 671              		.loc 1 259 3
 672 0014 FFF7FEFF 		bl	MX_I2C1_Init
 260:Core/Src/main.c ****   MX_USART1_UART_Init();
 673              		.loc 1 260 3
 674 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 261:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 262:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 675              		.loc 1 262 3
 676 001c 2048     		ldr	r0, .L44
 677 001e FFF7FEFF 		bl	HAL_CAN_Start
 263:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 678              		.loc 1 263 3
 679 0022 0221     		movs	r1, #2
 680 0024 1E48     		ldr	r0, .L44
 681 0026 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 264:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 682              		.loc 1 264 3
 683 002a 0121     		movs	r1, #1
 684 002c 1C48     		ldr	r0, .L44
 685 002e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
ARM GAS  /tmp/ccLnzcom.s 			page 18


 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   button_debounce = HAL_GetTick();
 686              		.loc 1 266 21
 687 0032 FFF7FEFF 		bl	HAL_GetTick
 688 0036 0346     		mov	r3, r0
 689              		.loc 1 266 19
 690 0038 1A4A     		ldr	r2, .L44+4
 691 003a 1360     		str	r3, [r2]
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* Init scheduler */
 271:Core/Src/main.c ****   osKernelInitialize();
 692              		.loc 1 271 3
 693 003c FFF7FEFF 		bl	osKernelInitialize
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 274:Core/Src/main.c ****   /* add mutexes, ... */
 275:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* Create the semaphores(s) */
 278:Core/Src/main.c ****   /* creation of canMsgOkSem */
 279:Core/Src/main.c ****   canMsgOkSemHandle = osSemaphoreNew(1, 0, &canMsgOkSem_attributes);
 694              		.loc 1 279 23
 695 0040 194A     		ldr	r2, .L44+8
 696 0042 0021     		movs	r1, #0
 697 0044 0120     		movs	r0, #1
 698 0046 FFF7FEFF 		bl	osSemaphoreNew
 699 004a 0346     		mov	r3, r0
 700              		.loc 1 279 21
 701 004c 174A     		ldr	r2, .L44+12
 702 004e 1360     		str	r3, [r2]
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 282:Core/Src/main.c ****   /* add semaphores, ... */
 283:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 286:Core/Src/main.c ****   /* start timers, add new ones, ... */
 287:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 290:Core/Src/main.c ****   /* add queues, ... */
 291:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* Create the thread(s) */
 294:Core/Src/main.c ****   /* creation of CanTask */
 295:Core/Src/main.c ****   CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 703              		.loc 1 295 19
 704 0050 174A     		ldr	r2, .L44+16
 705 0052 0021     		movs	r1, #0
 706 0054 1748     		ldr	r0, .L44+20
 707 0056 FFF7FEFF 		bl	osThreadNew
 708 005a 0346     		mov	r3, r0
 709              		.loc 1 295 17
 710 005c 164A     		ldr	r2, .L44+24
 711 005e 1360     		str	r3, [r2]
ARM GAS  /tmp/ccLnzcom.s 			page 19


 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* creation of I2cTask */
 298:Core/Src/main.c ****   I2cTaskHandle = osThreadNew(StartI2cTask, NULL, &I2cTask_attributes);
 712              		.loc 1 298 19
 713 0060 164A     		ldr	r2, .L44+28
 714 0062 0021     		movs	r1, #0
 715 0064 1648     		ldr	r0, .L44+32
 716 0066 FFF7FEFF 		bl	osThreadNew
 717 006a 0346     		mov	r3, r0
 718              		.loc 1 298 17
 719 006c 154A     		ldr	r2, .L44+36
 720 006e 1360     		str	r3, [r2]
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* creation of FuelCellTask */
 301:Core/Src/main.c ****   FuelCellTaskHandle = osThreadNew(StartFuelCellTask, NULL, &FuelCellTask_attributes);
 721              		.loc 1 301 24
 722 0070 154A     		ldr	r2, .L44+40
 723 0072 0021     		movs	r1, #0
 724 0074 1548     		ldr	r0, .L44+44
 725 0076 FFF7FEFF 		bl	osThreadNew
 726 007a 0346     		mov	r3, r0
 727              		.loc 1 301 22
 728 007c 144A     		ldr	r2, .L44+48
 729 007e 1360     		str	r3, [r2]
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 304:Core/Src/main.c ****   if (CanTaskHandle == NULL || I2cTaskHandle == NULL || FuelCellTaskHandle == NULL)
 730              		.loc 1 304 21
 731 0080 0D4B     		ldr	r3, .L44+24
 732 0082 1B68     		ldr	r3, [r3]
 733              		.loc 1 304 6
 734 0084 002B     		cmp	r3, #0
 735 0086 07D0     		beq	.L41
 736              		.loc 1 304 46 discriminator 1
 737 0088 0E4B     		ldr	r3, .L44+36
 738 008a 1B68     		ldr	r3, [r3]
 739              		.loc 1 304 29 discriminator 1
 740 008c 002B     		cmp	r3, #0
 741 008e 03D0     		beq	.L41
 742              		.loc 1 304 76 discriminator 2
 743 0090 0F4B     		ldr	r3, .L44+48
 744 0092 1B68     		ldr	r3, [r3]
 745              		.loc 1 304 54 discriminator 2
 746 0094 002B     		cmp	r3, #0
 747 0096 00D1     		bne	.L42
 748              	.L41:
 305:Core/Src/main.c ****   {
 306:Core/Src/main.c ****     while (1)
 749              		.loc 1 306 11 discriminator 1
 750 0098 FEE7     		b	.L41
 751              	.L42:
 307:Core/Src/main.c ****       ;
 308:Core/Src/main.c ****   }
 309:Core/Src/main.c ****   /* add threads, ... */
 310:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
ARM GAS  /tmp/ccLnzcom.s 			page 20


 313:Core/Src/main.c ****   /* add events, ... */
 314:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* Start scheduler */
 317:Core/Src/main.c ****   osKernelStart();
 752              		.loc 1 317 3
 753 009a FFF7FEFF 		bl	osKernelStart
 754              	.L43:
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 320:Core/Src/main.c ****   /* Infinite loop */
 321:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 322:Core/Src/main.c ****   while (1)
 755              		.loc 1 322 9 discriminator 2
 756 009e FEE7     		b	.L43
 757              	.L45:
 758              		.align	2
 759              	.L44:
 760 00a0 00000000 		.word	hcan1
 761 00a4 00000000 		.word	button_debounce
 762 00a8 00000000 		.word	canMsgOkSem_attributes
 763 00ac 00000000 		.word	canMsgOkSemHandle
 764 00b0 00000000 		.word	CanTask_attributes
 765 00b4 00000000 		.word	StartCanTask
 766 00b8 00000000 		.word	CanTaskHandle
 767 00bc 00000000 		.word	I2cTask_attributes
 768 00c0 00000000 		.word	StartI2cTask
 769 00c4 00000000 		.word	I2cTaskHandle
 770 00c8 00000000 		.word	FuelCellTask_attributes
 771 00cc 00000000 		.word	StartFuelCellTask
 772 00d0 00000000 		.word	FuelCellTaskHandle
 773              		.cfi_endproc
 774              	.LFE141:
 776              		.section	.text.SystemClock_Config,"ax",%progbits
 777              		.align	1
 778              		.global	SystemClock_Config
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 783              	SystemClock_Config:
 784              	.LFB142:
 323:Core/Src/main.c ****   {
 324:Core/Src/main.c ****     /* USER CODE END WHILE */
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   /* USER CODE END 3 */
 329:Core/Src/main.c **** }
 330:Core/Src/main.c **** 
 331:Core/Src/main.c **** /**
 332:Core/Src/main.c ****  * @brief System Clock Configuration
 333:Core/Src/main.c ****  * @retval None
 334:Core/Src/main.c ****  */
 335:Core/Src/main.c **** void SystemClock_Config(void)
 336:Core/Src/main.c **** {
 785              		.loc 1 336 1
 786              		.cfi_startproc
ARM GAS  /tmp/ccLnzcom.s 			page 21


 787              		@ args = 0, pretend = 0, frame = 88
 788              		@ frame_needed = 1, uses_anonymous_args = 0
 789 0000 80B5     		push	{r7, lr}
 790              	.LCFI27:
 791              		.cfi_def_cfa_offset 8
 792              		.cfi_offset 7, -8
 793              		.cfi_offset 14, -4
 794 0002 96B0     		sub	sp, sp, #88
 795              	.LCFI28:
 796              		.cfi_def_cfa_offset 96
 797 0004 00AF     		add	r7, sp, #0
 798              	.LCFI29:
 799              		.cfi_def_cfa_register 7
 337:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800              		.loc 1 337 22
 801 0006 07F11403 		add	r3, r7, #20
 802 000a 4422     		movs	r2, #68
 803 000c 0021     		movs	r1, #0
 804 000e 1846     		mov	r0, r3
 805 0010 FFF7FEFF 		bl	memset
 338:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 806              		.loc 1 338 22
 807 0014 3B46     		mov	r3, r7
 808 0016 0022     		movs	r2, #0
 809 0018 1A60     		str	r2, [r3]
 810 001a 5A60     		str	r2, [r3, #4]
 811 001c 9A60     		str	r2, [r3, #8]
 812 001e DA60     		str	r2, [r3, #12]
 813 0020 1A61     		str	r2, [r3, #16]
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 341:Core/Src/main.c ****    */
 342:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 814              		.loc 1 342 7
 815 0022 4FF40070 		mov	r0, #512
 816 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 817 002a 0346     		mov	r3, r0
 818              		.loc 1 342 6
 819 002c 002B     		cmp	r3, #0
 820 002e 01D0     		beq	.L47
 343:Core/Src/main.c ****   {
 344:Core/Src/main.c ****     Error_Handler();
 821              		.loc 1 344 5
 822 0030 FFF7FEFF 		bl	Error_Handler
 823              	.L47:
 345:Core/Src/main.c ****   }
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 348:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 349:Core/Src/main.c ****    */
 350:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 824              		.loc 1 350 36
 825 0034 0123     		movs	r3, #1
 826 0036 7B61     		str	r3, [r7, #20]
 351:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 827              		.loc 1 351 30
 828 0038 4FF4A023 		mov	r3, #327680
ARM GAS  /tmp/ccLnzcom.s 			page 22


 829 003c BB61     		str	r3, [r7, #24]
 352:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 830              		.loc 1 352 34
 831 003e 0223     		movs	r3, #2
 832 0040 FB63     		str	r3, [r7, #60]
 353:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 833              		.loc 1 353 35
 834 0042 0323     		movs	r3, #3
 835 0044 3B64     		str	r3, [r7, #64]
 354:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 836              		.loc 1 354 30
 837 0046 0123     		movs	r3, #1
 838 0048 7B64     		str	r3, [r7, #68]
 355:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
 839              		.loc 1 355 30
 840 004a 1423     		movs	r3, #20
 841 004c BB64     		str	r3, [r7, #72]
 356:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 842              		.loc 1 356 30
 843 004e 0723     		movs	r3, #7
 844 0050 FB64     		str	r3, [r7, #76]
 357:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 845              		.loc 1 357 30
 846 0052 0223     		movs	r3, #2
 847 0054 3B65     		str	r3, [r7, #80]
 358:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 848              		.loc 1 358 30
 849 0056 0223     		movs	r3, #2
 850 0058 7B65     		str	r3, [r7, #84]
 359:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 851              		.loc 1 359 7
 852 005a 07F11403 		add	r3, r7, #20
 853 005e 1846     		mov	r0, r3
 854 0060 FFF7FEFF 		bl	HAL_RCC_OscConfig
 855 0064 0346     		mov	r3, r0
 856              		.loc 1 359 6
 857 0066 002B     		cmp	r3, #0
 858 0068 01D0     		beq	.L48
 360:Core/Src/main.c ****   {
 361:Core/Src/main.c ****     Error_Handler();
 859              		.loc 1 361 5
 860 006a FFF7FEFF 		bl	Error_Handler
 861              	.L48:
 362:Core/Src/main.c ****   }
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 365:Core/Src/main.c ****    */
 366:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 862              		.loc 1 366 31
 863 006e 0F23     		movs	r3, #15
 864 0070 3B60     		str	r3, [r7]
 367:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 865              		.loc 1 367 34
 866 0072 0323     		movs	r3, #3
 867 0074 7B60     		str	r3, [r7, #4]
 368:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 868              		.loc 1 368 35
ARM GAS  /tmp/ccLnzcom.s 			page 23


 869 0076 0023     		movs	r3, #0
 870 0078 BB60     		str	r3, [r7, #8]
 369:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 871              		.loc 1 369 36
 872 007a 0023     		movs	r3, #0
 873 007c FB60     		str	r3, [r7, #12]
 370:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 874              		.loc 1 370 36
 875 007e 0023     		movs	r3, #0
 876 0080 3B61     		str	r3, [r7, #16]
 371:Core/Src/main.c **** 
 372:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 877              		.loc 1 372 7
 878 0082 3B46     		mov	r3, r7
 879 0084 0421     		movs	r1, #4
 880 0086 1846     		mov	r0, r3
 881 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 882 008c 0346     		mov	r3, r0
 883              		.loc 1 372 6
 884 008e 002B     		cmp	r3, #0
 885 0090 01D0     		beq	.L49
 373:Core/Src/main.c ****   {
 374:Core/Src/main.c ****     Error_Handler();
 886              		.loc 1 374 5
 887 0092 FFF7FEFF 		bl	Error_Handler
 888              	.L49:
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);
 889              		.loc 1 376 3
 890 0096 4FF04052 		mov	r2, #805306368
 891 009a 4FF08061 		mov	r1, #67108864
 892 009e 0020     		movs	r0, #0
 893 00a0 FFF7FEFF 		bl	HAL_RCC_MCOConfig
 377:Core/Src/main.c **** }
 894              		.loc 1 377 1
 895 00a4 00BF     		nop
 896 00a6 5837     		adds	r7, r7, #88
 897              	.LCFI30:
 898              		.cfi_def_cfa_offset 8
 899 00a8 BD46     		mov	sp, r7
 900              	.LCFI31:
 901              		.cfi_def_cfa_register 13
 902              		@ sp needed
 903 00aa 80BD     		pop	{r7, pc}
 904              		.cfi_endproc
 905              	.LFE142:
 907              		.section	.text.MX_CAN1_Init,"ax",%progbits
 908              		.align	1
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 913              	MX_CAN1_Init:
 914              	.LFB143:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /**
 380:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 381:Core/Src/main.c ****  * @param None
ARM GAS  /tmp/ccLnzcom.s 			page 24


 382:Core/Src/main.c ****  * @retval None
 383:Core/Src/main.c ****  */
 384:Core/Src/main.c **** static void MX_CAN1_Init(void)
 385:Core/Src/main.c **** {
 915              		.loc 1 385 1
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 40
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI32:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 8AB0     		sub	sp, sp, #40
 925              	.LCFI33:
 926              		.cfi_def_cfa_offset 48
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI34:
 929              		.cfi_def_cfa_register 7
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 394:Core/Src/main.c ****   hcan1.Instance = CAN1;
 930              		.loc 1 394 18
 931 0006 284B     		ldr	r3, .L54
 932 0008 284A     		ldr	r2, .L54+4
 933 000a 1A60     		str	r2, [r3]
 395:Core/Src/main.c ****   hcan1.Init.Prescaler = 16;
 934              		.loc 1 395 24
 935 000c 264B     		ldr	r3, .L54
 936 000e 1022     		movs	r2, #16
 937 0010 5A60     		str	r2, [r3, #4]
 396:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 938              		.loc 1 396 19
 939 0012 254B     		ldr	r3, .L54
 940 0014 4FF08042 		mov	r2, #1073741824
 941 0018 9A60     		str	r2, [r3, #8]
 397:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 942              		.loc 1 397 28
 943 001a 234B     		ldr	r3, .L54
 944 001c 0022     		movs	r2, #0
 945 001e DA60     		str	r2, [r3, #12]
 398:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 946              		.loc 1 398 23
 947 0020 214B     		ldr	r3, .L54
 948 0022 4FF40032 		mov	r2, #131072
 949 0026 1A61     		str	r2, [r3, #16]
 399:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 950              		.loc 1 399 23
 951 0028 1F4B     		ldr	r3, .L54
 952 002a 0022     		movs	r2, #0
 953 002c 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccLnzcom.s 			page 25


 400:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 954              		.loc 1 400 32
 955 002e 1E4B     		ldr	r3, .L54
 956 0030 0022     		movs	r2, #0
 957 0032 1A76     		strb	r2, [r3, #24]
 401:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 958              		.loc 1 401 25
 959 0034 1C4B     		ldr	r3, .L54
 960 0036 0022     		movs	r2, #0
 961 0038 5A76     		strb	r2, [r3, #25]
 402:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 962              		.loc 1 402 25
 963 003a 1B4B     		ldr	r3, .L54
 964 003c 0022     		movs	r2, #0
 965 003e 9A76     		strb	r2, [r3, #26]
 403:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 966              		.loc 1 403 33
 967 0040 194B     		ldr	r3, .L54
 968 0042 0022     		movs	r2, #0
 969 0044 DA76     		strb	r2, [r3, #27]
 404:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 970              		.loc 1 404 32
 971 0046 184B     		ldr	r3, .L54
 972 0048 0022     		movs	r2, #0
 973 004a 1A77     		strb	r2, [r3, #28]
 405:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 974              		.loc 1 405 35
 975 004c 164B     		ldr	r3, .L54
 976 004e 0022     		movs	r2, #0
 977 0050 5A77     		strb	r2, [r3, #29]
 406:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 978              		.loc 1 406 7
 979 0052 1548     		ldr	r0, .L54
 980 0054 FFF7FEFF 		bl	HAL_CAN_Init
 981 0058 0346     		mov	r3, r0
 982              		.loc 1 406 6
 983 005a 002B     		cmp	r3, #0
 984 005c 01D0     		beq	.L51
 407:Core/Src/main.c ****   {
 408:Core/Src/main.c ****     Error_Handler();
 985              		.loc 1 408 5
 986 005e FFF7FEFF 		bl	Error_Handler
 987              	.L51:
 409:Core/Src/main.c ****   }
 410:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 411:Core/Src/main.c ****   CAN_FilterTypeDef sf;
 412:Core/Src/main.c ****   // Accept StdID's 0x100 through 0x1FF
 413:Core/Src/main.c ****   sf.FilterIdHigh = 0x100 << 5;
 988              		.loc 1 413 19
 989 0062 4FF40053 		mov	r3, #8192
 990 0066 3B60     		str	r3, [r7]
 414:Core/Src/main.c ****   sf.FilterMaskIdHigh = 0x700 << 5;
 991              		.loc 1 414 23
 992 0068 4FF46043 		mov	r3, #57344
 993 006c BB60     		str	r3, [r7, #8]
 415:Core/Src/main.c ****   sf.FilterIdLow = 0x0000;
 994              		.loc 1 415 18
ARM GAS  /tmp/ccLnzcom.s 			page 26


 995 006e 0023     		movs	r3, #0
 996 0070 7B60     		str	r3, [r7, #4]
 416:Core/Src/main.c ****   sf.FilterMaskIdLow = 0x0000;
 997              		.loc 1 416 22
 998 0072 0023     		movs	r3, #0
 999 0074 FB60     		str	r3, [r7, #12]
 417:Core/Src/main.c ****   sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 1000              		.loc 1 417 27
 1001 0076 0023     		movs	r3, #0
 1002 0078 3B61     		str	r3, [r7, #16]
 418:Core/Src/main.c ****   sf.FilterBank = 0;
 1003              		.loc 1 418 17
 1004 007a 0023     		movs	r3, #0
 1005 007c 7B61     		str	r3, [r7, #20]
 419:Core/Src/main.c ****   sf.FilterMode = CAN_FILTERMODE_IDMASK;
 1006              		.loc 1 419 17
 1007 007e 0023     		movs	r3, #0
 1008 0080 BB61     		str	r3, [r7, #24]
 420:Core/Src/main.c ****   sf.FilterScale = CAN_FILTERSCALE_32BIT;
 1009              		.loc 1 420 18
 1010 0082 0123     		movs	r3, #1
 1011 0084 FB61     		str	r3, [r7, #28]
 421:Core/Src/main.c ****   sf.FilterActivation = CAN_FILTER_ENABLE;
 1012              		.loc 1 421 23
 1013 0086 0123     		movs	r3, #1
 1014 0088 3B62     		str	r3, [r7, #32]
 422:Core/Src/main.c ****   if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 1015              		.loc 1 422 7
 1016 008a 3B46     		mov	r3, r7
 1017 008c 1946     		mov	r1, r3
 1018 008e 0648     		ldr	r0, .L54
 1019 0090 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1020 0094 0346     		mov	r3, r0
 1021              		.loc 1 422 6
 1022 0096 002B     		cmp	r3, #0
 1023 0098 01D0     		beq	.L53
 423:Core/Src/main.c ****   {
 424:Core/Src/main.c ****     Error_Handler();
 1024              		.loc 1 424 5
 1025 009a FFF7FEFF 		bl	Error_Handler
 1026              	.L53:
 425:Core/Src/main.c ****   }
 426:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 427:Core/Src/main.c **** }
 1027              		.loc 1 427 1
 1028 009e 00BF     		nop
 1029 00a0 2837     		adds	r7, r7, #40
 1030              	.LCFI35:
 1031              		.cfi_def_cfa_offset 8
 1032 00a2 BD46     		mov	sp, r7
 1033              	.LCFI36:
 1034              		.cfi_def_cfa_register 13
 1035              		@ sp needed
 1036 00a4 80BD     		pop	{r7, pc}
 1037              	.L55:
 1038 00a6 00BF     		.align	2
 1039              	.L54:
ARM GAS  /tmp/ccLnzcom.s 			page 27


 1040 00a8 00000000 		.word	hcan1
 1041 00ac 00640040 		.word	1073767424
 1042              		.cfi_endproc
 1043              	.LFE143:
 1045              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1046              		.align	1
 1047              		.syntax unified
 1048              		.thumb
 1049              		.thumb_func
 1051              	MX_I2C1_Init:
 1052              	.LFB144:
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** /**
 430:Core/Src/main.c ****  * @brief I2C1 Initialization Function
 431:Core/Src/main.c ****  * @param None
 432:Core/Src/main.c ****  * @retval None
 433:Core/Src/main.c ****  */
 434:Core/Src/main.c **** static void MX_I2C1_Init(void)
 435:Core/Src/main.c **** {
 1053              		.loc 1 435 1
 1054              		.cfi_startproc
 1055              		@ args = 0, pretend = 0, frame = 0
 1056              		@ frame_needed = 1, uses_anonymous_args = 0
 1057 0000 80B5     		push	{r7, lr}
 1058              	.LCFI37:
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 0002 00AF     		add	r7, sp, #0
 1063              	.LCFI38:
 1064              		.cfi_def_cfa_register 7
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 442:Core/Src/main.c **** 
 443:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 444:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 1065              		.loc 1 444 18
 1066 0004 1B4B     		ldr	r3, .L61
 1067 0006 1C4A     		ldr	r2, .L61+4
 1068 0008 1A60     		str	r2, [r3]
 445:Core/Src/main.c ****   hi2c1.Init.Timing = 0x10909CEC;
 1069              		.loc 1 445 21
 1070 000a 1A4B     		ldr	r3, .L61
 1071 000c 1B4A     		ldr	r2, .L61+8
 1072 000e 5A60     		str	r2, [r3, #4]
 446:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1073              		.loc 1 446 26
 1074 0010 184B     		ldr	r3, .L61
 1075 0012 0022     		movs	r2, #0
 1076 0014 9A60     		str	r2, [r3, #8]
 447:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1077              		.loc 1 447 29
 1078 0016 174B     		ldr	r3, .L61
ARM GAS  /tmp/ccLnzcom.s 			page 28


 1079 0018 0122     		movs	r2, #1
 1080 001a DA60     		str	r2, [r3, #12]
 448:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1081              		.loc 1 448 30
 1082 001c 154B     		ldr	r3, .L61
 1083 001e 0022     		movs	r2, #0
 1084 0020 1A61     		str	r2, [r3, #16]
 449:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1085              		.loc 1 449 26
 1086 0022 144B     		ldr	r3, .L61
 1087 0024 0022     		movs	r2, #0
 1088 0026 5A61     		str	r2, [r3, #20]
 450:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1089              		.loc 1 450 31
 1090 0028 124B     		ldr	r3, .L61
 1091 002a 0022     		movs	r2, #0
 1092 002c 9A61     		str	r2, [r3, #24]
 451:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1093              		.loc 1 451 30
 1094 002e 114B     		ldr	r3, .L61
 1095 0030 0022     		movs	r2, #0
 1096 0032 DA61     		str	r2, [r3, #28]
 452:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1097              		.loc 1 452 28
 1098 0034 0F4B     		ldr	r3, .L61
 1099 0036 0022     		movs	r2, #0
 1100 0038 1A62     		str	r2, [r3, #32]
 453:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1101              		.loc 1 453 7
 1102 003a 0E48     		ldr	r0, .L61
 1103 003c FFF7FEFF 		bl	HAL_I2C_Init
 1104 0040 0346     		mov	r3, r0
 1105              		.loc 1 453 6
 1106 0042 002B     		cmp	r3, #0
 1107 0044 01D0     		beq	.L57
 454:Core/Src/main.c ****   {
 455:Core/Src/main.c ****     Error_Handler();
 1108              		.loc 1 455 5
 1109 0046 FFF7FEFF 		bl	Error_Handler
 1110              	.L57:
 456:Core/Src/main.c ****   }
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****   /** Configure Analogue filter
 459:Core/Src/main.c ****    */
 460:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 1111              		.loc 1 460 7
 1112 004a 0021     		movs	r1, #0
 1113 004c 0948     		ldr	r0, .L61
 1114 004e FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 1115 0052 0346     		mov	r3, r0
 1116              		.loc 1 460 6
 1117 0054 002B     		cmp	r3, #0
 1118 0056 01D0     		beq	.L58
 461:Core/Src/main.c ****   {
 462:Core/Src/main.c ****     Error_Handler();
 1119              		.loc 1 462 5
 1120 0058 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccLnzcom.s 			page 29


 1121              	.L58:
 463:Core/Src/main.c ****   }
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /** Configure Digital filter
 466:Core/Src/main.c ****    */
 467:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 1122              		.loc 1 467 7
 1123 005c 0021     		movs	r1, #0
 1124 005e 0548     		ldr	r0, .L61
 1125 0060 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 1126 0064 0346     		mov	r3, r0
 1127              		.loc 1 467 6
 1128 0066 002B     		cmp	r3, #0
 1129 0068 01D0     		beq	.L60
 468:Core/Src/main.c ****   {
 469:Core/Src/main.c ****     Error_Handler();
 1130              		.loc 1 469 5
 1131 006a FFF7FEFF 		bl	Error_Handler
 1132              	.L60:
 470:Core/Src/main.c ****   }
 471:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 474:Core/Src/main.c **** }
 1133              		.loc 1 474 1
 1134 006e 00BF     		nop
 1135 0070 80BD     		pop	{r7, pc}
 1136              	.L62:
 1137 0072 00BF     		.align	2
 1138              	.L61:
 1139 0074 00000000 		.word	hi2c1
 1140 0078 00540040 		.word	1073763328
 1141 007c EC9C9010 		.word	277912812
 1142              		.cfi_endproc
 1143              	.LFE144:
 1145              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1146              		.align	1
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1151              	MX_USART1_UART_Init:
 1152              	.LFB145:
 475:Core/Src/main.c **** 
 476:Core/Src/main.c **** /**
 477:Core/Src/main.c ****  * @brief USART1 Initialization Function
 478:Core/Src/main.c ****  * @param None
 479:Core/Src/main.c ****  * @retval None
 480:Core/Src/main.c ****  */
 481:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 482:Core/Src/main.c **** {
 1153              		.loc 1 482 1
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 1, uses_anonymous_args = 0
 1157 0000 80B5     		push	{r7, lr}
 1158              	.LCFI39:
 1159              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLnzcom.s 			page 30


 1160              		.cfi_offset 7, -8
 1161              		.cfi_offset 14, -4
 1162 0002 00AF     		add	r7, sp, #0
 1163              	.LCFI40:
 1164              		.cfi_def_cfa_register 7
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 487:Core/Src/main.c **** 
 488:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 489:Core/Src/main.c **** 
 490:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 491:Core/Src/main.c ****   huart1.Instance = USART1;
 1165              		.loc 1 491 19
 1166 0004 144B     		ldr	r3, .L66
 1167 0006 154A     		ldr	r2, .L66+4
 1168 0008 1A60     		str	r2, [r3]
 492:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1169              		.loc 1 492 24
 1170 000a 134B     		ldr	r3, .L66
 1171 000c 4FF4E132 		mov	r2, #115200
 1172 0010 5A60     		str	r2, [r3, #4]
 493:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1173              		.loc 1 493 26
 1174 0012 114B     		ldr	r3, .L66
 1175 0014 0022     		movs	r2, #0
 1176 0016 9A60     		str	r2, [r3, #8]
 494:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1177              		.loc 1 494 24
 1178 0018 0F4B     		ldr	r3, .L66
 1179 001a 0022     		movs	r2, #0
 1180 001c DA60     		str	r2, [r3, #12]
 495:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1181              		.loc 1 495 22
 1182 001e 0E4B     		ldr	r3, .L66
 1183 0020 0022     		movs	r2, #0
 1184 0022 1A61     		str	r2, [r3, #16]
 496:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1185              		.loc 1 496 20
 1186 0024 0C4B     		ldr	r3, .L66
 1187 0026 0C22     		movs	r2, #12
 1188 0028 5A61     		str	r2, [r3, #20]
 497:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 1189              		.loc 1 497 25
 1190 002a 0B4B     		ldr	r3, .L66
 1191 002c 4FF44072 		mov	r2, #768
 1192 0030 9A61     		str	r2, [r3, #24]
 498:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1193              		.loc 1 498 28
 1194 0032 094B     		ldr	r3, .L66
 1195 0034 0022     		movs	r2, #0
 1196 0036 DA61     		str	r2, [r3, #28]
 499:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1197              		.loc 1 499 30
 1198 0038 074B     		ldr	r3, .L66
 1199 003a 0022     		movs	r2, #0
ARM GAS  /tmp/ccLnzcom.s 			page 31


 1200 003c 1A62     		str	r2, [r3, #32]
 500:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1201              		.loc 1 500 38
 1202 003e 064B     		ldr	r3, .L66
 1203 0040 0022     		movs	r2, #0
 1204 0042 5A62     		str	r2, [r3, #36]
 501:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1205              		.loc 1 501 7
 1206 0044 0448     		ldr	r0, .L66
 1207 0046 FFF7FEFF 		bl	HAL_UART_Init
 1208 004a 0346     		mov	r3, r0
 1209              		.loc 1 501 6
 1210 004c 002B     		cmp	r3, #0
 1211 004e 01D0     		beq	.L65
 502:Core/Src/main.c ****   {
 503:Core/Src/main.c ****     Error_Handler();
 1212              		.loc 1 503 5
 1213 0050 FFF7FEFF 		bl	Error_Handler
 1214              	.L65:
 504:Core/Src/main.c ****   }
 505:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 506:Core/Src/main.c **** 
 507:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 508:Core/Src/main.c **** }
 1215              		.loc 1 508 1
 1216 0054 00BF     		nop
 1217 0056 80BD     		pop	{r7, pc}
 1218              	.L67:
 1219              		.align	2
 1220              	.L66:
 1221 0058 00000000 		.word	huart1
 1222 005c 00380140 		.word	1073821696
 1223              		.cfi_endproc
 1224              	.LFE145:
 1226              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1227              		.align	1
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1232              	MX_GPIO_Init:
 1233              	.LFB146:
 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** /**
 511:Core/Src/main.c ****  * @brief GPIO Initialization Function
 512:Core/Src/main.c ****  * @param None
 513:Core/Src/main.c ****  * @retval None
 514:Core/Src/main.c ****  */
 515:Core/Src/main.c **** static void MX_GPIO_Init(void)
 516:Core/Src/main.c **** {
 1234              		.loc 1 516 1
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 40
 1237              		@ frame_needed = 1, uses_anonymous_args = 0
 1238 0000 80B5     		push	{r7, lr}
 1239              	.LCFI41:
 1240              		.cfi_def_cfa_offset 8
 1241              		.cfi_offset 7, -8
ARM GAS  /tmp/ccLnzcom.s 			page 32


 1242              		.cfi_offset 14, -4
 1243 0002 8AB0     		sub	sp, sp, #40
 1244              	.LCFI42:
 1245              		.cfi_def_cfa_offset 48
 1246 0004 00AF     		add	r7, sp, #0
 1247              	.LCFI43:
 1248              		.cfi_def_cfa_register 7
 517:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1249              		.loc 1 517 20
 1250 0006 07F11403 		add	r3, r7, #20
 1251 000a 0022     		movs	r2, #0
 1252 000c 1A60     		str	r2, [r3]
 1253 000e 5A60     		str	r2, [r3, #4]
 1254 0010 9A60     		str	r2, [r3, #8]
 1255 0012 DA60     		str	r2, [r3, #12]
 1256 0014 1A61     		str	r2, [r3, #16]
 1257              	.LBB4:
 518:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 519:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 520:Core/Src/main.c **** 
 521:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 522:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1258              		.loc 1 522 3
 1259 0016 6F4B     		ldr	r3, .L69
 1260 0018 DB6C     		ldr	r3, [r3, #76]
 1261 001a 6E4A     		ldr	r2, .L69
 1262 001c 43F00403 		orr	r3, r3, #4
 1263 0020 D364     		str	r3, [r2, #76]
 1264 0022 6C4B     		ldr	r3, .L69
 1265 0024 DB6C     		ldr	r3, [r3, #76]
 1266 0026 03F00403 		and	r3, r3, #4
 1267 002a 3B61     		str	r3, [r7, #16]
 1268 002c 3B69     		ldr	r3, [r7, #16]
 1269              	.LBE4:
 1270              	.LBB5:
 523:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1271              		.loc 1 523 3
 1272 002e 694B     		ldr	r3, .L69
 1273 0030 DB6C     		ldr	r3, [r3, #76]
 1274 0032 684A     		ldr	r2, .L69
 1275 0034 43F00103 		orr	r3, r3, #1
 1276 0038 D364     		str	r3, [r2, #76]
 1277 003a 664B     		ldr	r3, .L69
 1278 003c DB6C     		ldr	r3, [r3, #76]
 1279 003e 03F00103 		and	r3, r3, #1
 1280 0042 FB60     		str	r3, [r7, #12]
 1281 0044 FB68     		ldr	r3, [r7, #12]
 1282              	.LBE5:
 1283              	.LBB6:
 524:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1284              		.loc 1 524 3
 1285 0046 634B     		ldr	r3, .L69
 1286 0048 DB6C     		ldr	r3, [r3, #76]
 1287 004a 624A     		ldr	r2, .L69
 1288 004c 43F00203 		orr	r3, r3, #2
 1289 0050 D364     		str	r3, [r2, #76]
 1290 0052 604B     		ldr	r3, .L69
ARM GAS  /tmp/ccLnzcom.s 			page 33


 1291 0054 DB6C     		ldr	r3, [r3, #76]
 1292 0056 03F00203 		and	r3, r3, #2
 1293 005a BB60     		str	r3, [r7, #8]
 1294 005c BB68     		ldr	r3, [r7, #8]
 1295              	.LBE6:
 1296              	.LBB7:
 525:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1297              		.loc 1 525 3
 1298 005e 5D4B     		ldr	r3, .L69
 1299 0060 DB6C     		ldr	r3, [r3, #76]
 1300 0062 5C4A     		ldr	r2, .L69
 1301 0064 43F08003 		orr	r3, r3, #128
 1302 0068 D364     		str	r3, [r2, #76]
 1303 006a 5A4B     		ldr	r3, .L69
 1304 006c DB6C     		ldr	r3, [r3, #76]
 1305 006e 03F08003 		and	r3, r3, #128
 1306 0072 7B60     		str	r3, [r7, #4]
 1307 0074 7B68     		ldr	r3, [r7, #4]
 1308              	.LBE7:
 526:Core/Src/main.c **** 
 527:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 528:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin, GPIO_PIN_RESET);
 1309              		.loc 1 528 3
 1310 0076 0022     		movs	r2, #0
 1311 0078 48F20601 		movw	r1, #32774
 1312 007c 4FF09040 		mov	r0, #1207959552
 1313 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 531:Core/Src/main.c ****   HAL_GPIO_WritePin(FTDI_NRST_GPIO_Port, FTDI_NRST_Pin, GPIO_PIN_RESET);
 1314              		.loc 1 531 3
 1315 0084 0022     		movs	r2, #0
 1316 0086 0221     		movs	r1, #2
 1317 0088 5348     		ldr	r0, .L69+4
 1318 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   /*Configure GPIO pins : BRD_STRT_Pin BRD_PRGE_Pin */
 534:Core/Src/main.c ****   GPIO_InitStruct.Pin = BRD_STRT_Pin | BRD_PRGE_Pin;
 1319              		.loc 1 534 23
 1320 008e 4FF44043 		mov	r3, #49152
 1321 0092 7B61     		str	r3, [r7, #20]
 535:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1322              		.loc 1 535 24
 1323 0094 4FF40413 		mov	r3, #2162688
 1324 0098 BB61     		str	r3, [r7, #24]
 536:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1325              		.loc 1 536 24
 1326 009a 0123     		movs	r3, #1
 1327 009c FB61     		str	r3, [r7, #28]
 537:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1328              		.loc 1 537 3
 1329 009e 07F11403 		add	r3, r7, #20
 1330 00a2 1946     		mov	r1, r3
 1331 00a4 4D48     		ldr	r0, .L69+8
 1332 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /*Configure GPIO pins : SUPPLY_VLVE_Pin PURGE_VLVE_Pin CAN_STBY_Pin */
ARM GAS  /tmp/ccLnzcom.s 			page 34


 540:Core/Src/main.c ****   GPIO_InitStruct.Pin = SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin;
 1333              		.loc 1 540 23
 1334 00aa 48F20603 		movw	r3, #32774
 1335 00ae 7B61     		str	r3, [r7, #20]
 541:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1336              		.loc 1 541 24
 1337 00b0 0123     		movs	r3, #1
 1338 00b2 BB61     		str	r3, [r7, #24]
 542:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1339              		.loc 1 542 24
 1340 00b4 0223     		movs	r3, #2
 1341 00b6 FB61     		str	r3, [r7, #28]
 543:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1342              		.loc 1 543 25
 1343 00b8 0023     		movs	r3, #0
 1344 00ba 3B62     		str	r3, [r7, #32]
 544:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1345              		.loc 1 544 3
 1346 00bc 07F11403 		add	r3, r7, #20
 1347 00c0 1946     		mov	r1, r3
 1348 00c2 4FF09040 		mov	r0, #1207959552
 1349 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /*Configure GPIO pins : EXT_STRT_Pin EXT_STOP_Pin */
 547:Core/Src/main.c ****   GPIO_InitStruct.Pin = EXT_STRT_Pin | EXT_STOP_Pin;
 1350              		.loc 1 547 23
 1351 00ca 4823     		movs	r3, #72
 1352 00cc 7B61     		str	r3, [r7, #20]
 548:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1353              		.loc 1 548 24
 1354 00ce 4FF40413 		mov	r3, #2162688
 1355 00d2 BB61     		str	r3, [r7, #24]
 549:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1356              		.loc 1 549 24
 1357 00d4 0123     		movs	r3, #1
 1358 00d6 FB61     		str	r3, [r7, #28]
 550:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1359              		.loc 1 550 3
 1360 00d8 07F11403 		add	r3, r7, #20
 1361 00dc 1946     		mov	r1, r3
 1362 00de 4FF09040 		mov	r0, #1207959552
 1363 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
 553:Core/Src/main.c ****   GPIO_InitStruct.Pin = ACC_INT1_Pin | ACC_INT2_Pin;
 1364              		.loc 1 553 23
 1365 00e6 3023     		movs	r3, #48
 1366 00e8 7B61     		str	r3, [r7, #20]
 554:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 1367              		.loc 1 554 24
 1368 00ea 4FF48813 		mov	r3, #1114112
 1369 00ee BB61     		str	r3, [r7, #24]
 555:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1370              		.loc 1 555 24
 1371 00f0 0223     		movs	r3, #2
 1372 00f2 FB61     		str	r3, [r7, #28]
 556:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  /tmp/ccLnzcom.s 			page 35


 1373              		.loc 1 556 3
 1374 00f4 07F11403 		add	r3, r7, #20
 1375 00f8 1946     		mov	r1, r3
 1376 00fa 4FF09040 		mov	r0, #1207959552
 1377 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 557:Core/Src/main.c **** 
 558:Core/Src/main.c ****   /*Configure GPIO pin : PA7 */
 559:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 1378              		.loc 1 559 23
 1379 0102 8023     		movs	r3, #128
 1380 0104 7B61     		str	r3, [r7, #20]
 560:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1381              		.loc 1 560 24
 1382 0106 0323     		movs	r3, #3
 1383 0108 BB61     		str	r3, [r7, #24]
 561:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1384              		.loc 1 561 24
 1385 010a 0023     		movs	r3, #0
 1386 010c FB61     		str	r3, [r7, #28]
 562:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1387              		.loc 1 562 3
 1388 010e 07F11403 		add	r3, r7, #20
 1389 0112 1946     		mov	r1, r3
 1390 0114 4FF09040 		mov	r0, #1207959552
 1391 0118 FFF7FEFF 		bl	HAL_GPIO_Init
 563:Core/Src/main.c **** 
 564:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB5 */
 565:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_5;
 1392              		.loc 1 565 23
 1393 011c 2123     		movs	r3, #33
 1394 011e 7B61     		str	r3, [r7, #20]
 566:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1395              		.loc 1 566 24
 1396 0120 0323     		movs	r3, #3
 1397 0122 BB61     		str	r3, [r7, #24]
 567:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1398              		.loc 1 567 24
 1399 0124 0023     		movs	r3, #0
 1400 0126 FB61     		str	r3, [r7, #28]
 568:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1401              		.loc 1 568 3
 1402 0128 07F11403 		add	r3, r7, #20
 1403 012c 1946     		mov	r1, r3
 1404 012e 2A48     		ldr	r0, .L69+4
 1405 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 569:Core/Src/main.c **** 
 570:Core/Src/main.c ****   /*Configure GPIO pin : FTDI_NRST_Pin */
 571:Core/Src/main.c ****   GPIO_InitStruct.Pin = FTDI_NRST_Pin;
 1406              		.loc 1 571 23
 1407 0134 0223     		movs	r3, #2
 1408 0136 7B61     		str	r3, [r7, #20]
 572:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1409              		.loc 1 572 24
 1410 0138 0123     		movs	r3, #1
 1411 013a BB61     		str	r3, [r7, #24]
 573:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1412              		.loc 1 573 24
ARM GAS  /tmp/ccLnzcom.s 			page 36


 1413 013c 0123     		movs	r3, #1
 1414 013e FB61     		str	r3, [r7, #28]
 574:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1415              		.loc 1 574 25
 1416 0140 0023     		movs	r3, #0
 1417 0142 3B62     		str	r3, [r7, #32]
 575:Core/Src/main.c ****   HAL_GPIO_Init(FTDI_NRST_GPIO_Port, &GPIO_InitStruct);
 1418              		.loc 1 575 3
 1419 0144 07F11403 		add	r3, r7, #20
 1420 0148 1946     		mov	r1, r3
 1421 014a 2348     		ldr	r0, .L69+4
 1422 014c FFF7FEFF 		bl	HAL_GPIO_Init
 576:Core/Src/main.c **** 
 577:Core/Src/main.c ****   /*Configure GPIO pin : PA8 */
 578:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 1423              		.loc 1 578 23
 1424 0150 4FF48073 		mov	r3, #256
 1425 0154 7B61     		str	r3, [r7, #20]
 579:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1426              		.loc 1 579 24
 1427 0156 0223     		movs	r3, #2
 1428 0158 BB61     		str	r3, [r7, #24]
 580:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1429              		.loc 1 580 24
 1430 015a 0023     		movs	r3, #0
 1431 015c FB61     		str	r3, [r7, #28]
 581:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1432              		.loc 1 581 25
 1433 015e 0023     		movs	r3, #0
 1434 0160 3B62     		str	r3, [r7, #32]
 582:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1435              		.loc 1 582 29
 1436 0162 0023     		movs	r3, #0
 1437 0164 7B62     		str	r3, [r7, #36]
 583:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1438              		.loc 1 583 3
 1439 0166 07F11403 		add	r3, r7, #20
 1440 016a 1946     		mov	r1, r3
 1441 016c 4FF09040 		mov	r0, #1207959552
 1442 0170 FFF7FEFF 		bl	HAL_GPIO_Init
 584:Core/Src/main.c **** 
 585:Core/Src/main.c ****   /*Configure GPIO pin : PH3 */
 586:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 1443              		.loc 1 586 23
 1444 0174 0823     		movs	r3, #8
 1445 0176 7B61     		str	r3, [r7, #20]
 587:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1446              		.loc 1 587 24
 1447 0178 0323     		movs	r3, #3
 1448 017a BB61     		str	r3, [r7, #24]
 588:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1449              		.loc 1 588 24
 1450 017c 0023     		movs	r3, #0
 1451 017e FB61     		str	r3, [r7, #28]
 589:Core/Src/main.c ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 1452              		.loc 1 589 3
 1453 0180 07F11403 		add	r3, r7, #20
ARM GAS  /tmp/ccLnzcom.s 			page 37


 1454 0184 1946     		mov	r1, r3
 1455 0186 1648     		ldr	r0, .L69+12
 1456 0188 FFF7FEFF 		bl	HAL_GPIO_Init
 590:Core/Src/main.c **** 
 591:Core/Src/main.c ****   /* EXTI interrupt init*/
 592:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 1457              		.loc 1 592 3
 1458 018c 0022     		movs	r2, #0
 1459 018e 0521     		movs	r1, #5
 1460 0190 0920     		movs	r0, #9
 1461 0192 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 593:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 1462              		.loc 1 593 3
 1463 0196 0920     		movs	r0, #9
 1464 0198 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 594:Core/Src/main.c **** 
 595:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 1465              		.loc 1 595 3
 1466 019c 0022     		movs	r2, #0
 1467 019e 0521     		movs	r1, #5
 1468 01a0 0A20     		movs	r0, #10
 1469 01a2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 596:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 1470              		.loc 1 596 3
 1471 01a6 0A20     		movs	r0, #10
 1472 01a8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 597:Core/Src/main.c **** 
 598:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 1473              		.loc 1 598 3
 1474 01ac 0022     		movs	r2, #0
 1475 01ae 0521     		movs	r1, #5
 1476 01b0 1720     		movs	r0, #23
 1477 01b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 599:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 1478              		.loc 1 599 3
 1479 01b6 1720     		movs	r0, #23
 1480 01b8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 600:Core/Src/main.c **** 
 601:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 1481              		.loc 1 601 3
 1482 01bc 0022     		movs	r2, #0
 1483 01be 0521     		movs	r1, #5
 1484 01c0 2820     		movs	r0, #40
 1485 01c2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 602:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 1486              		.loc 1 602 3
 1487 01c6 2820     		movs	r0, #40
 1488 01c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 603:Core/Src/main.c **** 
 604:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 605:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 606:Core/Src/main.c **** }
 1489              		.loc 1 606 1
 1490 01cc 00BF     		nop
 1491 01ce 2837     		adds	r7, r7, #40
 1492              	.LCFI44:
 1493              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLnzcom.s 			page 38


 1494 01d0 BD46     		mov	sp, r7
 1495              	.LCFI45:
 1496              		.cfi_def_cfa_register 13
 1497              		@ sp needed
 1498 01d2 80BD     		pop	{r7, pc}
 1499              	.L70:
 1500              		.align	2
 1501              	.L69:
 1502 01d4 00100240 		.word	1073876992
 1503 01d8 00040048 		.word	1207960576
 1504 01dc 00080048 		.word	1207961600
 1505 01e0 001C0048 		.word	1207966720
 1506              		.cfi_endproc
 1507              	.LFE146:
 1509              		.section	.text.StartCanTask,"ax",%progbits
 1510              		.align	1
 1511              		.global	StartCanTask
 1512              		.syntax unified
 1513              		.thumb
 1514              		.thumb_func
 1516              	StartCanTask:
 1517              	.LFB147:
 607:Core/Src/main.c **** 
 608:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 609:Core/Src/main.c **** 
 610:Core/Src/main.c **** /* USER CODE END 4 */
 611:Core/Src/main.c **** 
 612:Core/Src/main.c **** /* USER CODE BEGIN Header_StartCanTask */
 613:Core/Src/main.c **** /**
 614:Core/Src/main.c ****  * @brief  Function implementing the CanTask thread.
 615:Core/Src/main.c ****  * @param  argument: Not used
 616:Core/Src/main.c ****  * @retval None
 617:Core/Src/main.c ****  */
 618:Core/Src/main.c **** /* USER CODE END Header_StartCanTask */
 619:Core/Src/main.c **** void StartCanTask(void *argument)
 620:Core/Src/main.c **** {
 1518              		.loc 1 620 1
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 8
 1521              		@ frame_needed = 1, uses_anonymous_args = 0
 1522 0000 80B5     		push	{r7, lr}
 1523              	.LCFI46:
 1524              		.cfi_def_cfa_offset 8
 1525              		.cfi_offset 7, -8
 1526              		.cfi_offset 14, -4
 1527 0002 82B0     		sub	sp, sp, #8
 1528              	.LCFI47:
 1529              		.cfi_def_cfa_offset 16
 1530 0004 00AF     		add	r7, sp, #0
 1531              	.LCFI48:
 1532              		.cfi_def_cfa_register 7
 1533 0006 7860     		str	r0, [r7, #4]
 1534              	.L72:
 621:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 622:Core/Src/main.c ****   /* Infinite loop */
 623:Core/Src/main.c ****   for (;;)
 624:Core/Src/main.c ****   {
ARM GAS  /tmp/ccLnzcom.s 			page 39


 625:Core/Src/main.c ****     osDelay(1);
 1535              		.loc 1 625 5 discriminator 1
 1536 0008 0120     		movs	r0, #1
 1537 000a FFF7FEFF 		bl	osDelay
 1538 000e FBE7     		b	.L72
 1539              		.cfi_endproc
 1540              	.LFE147:
 1542              		.section	.text.StartI2cTask,"ax",%progbits
 1543              		.align	1
 1544              		.global	StartI2cTask
 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1549              	StartI2cTask:
 1550              	.LFB148:
 626:Core/Src/main.c ****   }
 627:Core/Src/main.c ****   /* USER CODE END 5 */
 628:Core/Src/main.c **** }
 629:Core/Src/main.c **** 
 630:Core/Src/main.c **** /* USER CODE BEGIN Header_StartI2cTask */
 631:Core/Src/main.c **** /**
 632:Core/Src/main.c ****  * @brief Function implementing the I2cTask thread.
 633:Core/Src/main.c ****  * @param argument: Not used
 634:Core/Src/main.c ****  * @retval None
 635:Core/Src/main.c ****  */
 636:Core/Src/main.c **** /* USER CODE END Header_StartI2cTask */
 637:Core/Src/main.c **** void StartI2cTask(void *argument)
 638:Core/Src/main.c **** {
 1551              		.loc 1 638 1
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 8
 1554              		@ frame_needed = 1, uses_anonymous_args = 0
 1555 0000 80B5     		push	{r7, lr}
 1556              	.LCFI49:
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 7, -8
 1559              		.cfi_offset 14, -4
 1560 0002 82B0     		sub	sp, sp, #8
 1561              	.LCFI50:
 1562              		.cfi_def_cfa_offset 16
 1563 0004 00AF     		add	r7, sp, #0
 1564              	.LCFI51:
 1565              		.cfi_def_cfa_register 7
 1566 0006 7860     		str	r0, [r7, #4]
 1567              	.L74:
 639:Core/Src/main.c ****   /* USER CODE BEGIN StartI2cTask */
 640:Core/Src/main.c ****   /* Infinite loop */
 641:Core/Src/main.c ****   for (;;)
 642:Core/Src/main.c ****   {
 643:Core/Src/main.c ****     osDelay(1);
 1568              		.loc 1 643 5 discriminator 1
 1569 0008 0120     		movs	r0, #1
 1570 000a FFF7FEFF 		bl	osDelay
 1571 000e FBE7     		b	.L74
 1572              		.cfi_endproc
 1573              	.LFE148:
 1575              		.section	.rodata
ARM GAS  /tmp/ccLnzcom.s 			page 40


 1576              		.align	2
 1577              	.LC4:
 1578 002c 01020304 		.ascii	"\001\002\003\004\005\006\007\010"
 1578      05060708 
 1579              		.section	.text.StartFuelCellTask,"ax",%progbits
 1580              		.align	1
 1581              		.global	StartFuelCellTask
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1586              	StartFuelCellTask:
 1587              	.LFB149:
 644:Core/Src/main.c ****   }
 645:Core/Src/main.c ****   /* USER CODE END StartI2cTask */
 646:Core/Src/main.c **** }
 647:Core/Src/main.c **** 
 648:Core/Src/main.c **** /* USER CODE BEGIN Header_StartFuelCellTask */
 649:Core/Src/main.c **** /**
 650:Core/Src/main.c ****  * @brief Function implementing the FuelCellTask thread.
 651:Core/Src/main.c ****  * @param argument: Not used
 652:Core/Src/main.c ****  * @retval None
 653:Core/Src/main.c ****  */
 654:Core/Src/main.c **** /* USER CODE END Header_StartFuelCellTask */
 655:Core/Src/main.c **** void StartFuelCellTask(void *argument)
 656:Core/Src/main.c **** {
 1588              		.loc 1 656 1
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 24
 1591              		@ frame_needed = 1, uses_anonymous_args = 0
 1592 0000 80B5     		push	{r7, lr}
 1593              	.LCFI52:
 1594              		.cfi_def_cfa_offset 8
 1595              		.cfi_offset 7, -8
 1596              		.cfi_offset 14, -4
 1597 0002 86B0     		sub	sp, sp, #24
 1598              	.LCFI53:
 1599              		.cfi_def_cfa_offset 32
 1600 0004 00AF     		add	r7, sp, #0
 1601              	.LCFI54:
 1602              		.cfi_def_cfa_register 7
 1603 0006 7860     		str	r0, [r7, #4]
 657:Core/Src/main.c ****   /* USER CODE BEGIN StartFuelCellTask */
 658:Core/Src/main.c **** #define CAN_MESSAGE_TIMEOUT_MS 5000
 659:Core/Src/main.c **** #define CAN_ADD_TX_TIMEOUT_MS 5000
 660:Core/Src/main.c ****   osStatus_t os_stat;
 661:Core/Src/main.c ****   uint32_t fc_tick;
 662:Core/Src/main.c ****   HAL_StatusTypeDef hal_stat;
 663:Core/Src/main.c **** 
 664:Core/Src/main.c ****   TxHeaderFuelCellTask.IDE = CAN_ID_STD;
 1604              		.loc 1 664 28
 1605 0008 444B     		ldr	r3, .L92
 1606 000a 0022     		movs	r2, #0
 1607 000c 9A60     		str	r2, [r3, #8]
 665:Core/Src/main.c ****   TxHeaderFuelCellTask.RTR = CAN_RTR_DATA;
 1608              		.loc 1 665 28
 1609 000e 434B     		ldr	r3, .L92
 1610 0010 0022     		movs	r2, #0
ARM GAS  /tmp/ccLnzcom.s 			page 41


 1611 0012 DA60     		str	r2, [r3, #12]
 666:Core/Src/main.c ****   TxHeaderFuelCellTask.ExtId = 0;
 1612              		.loc 1 666 30
 1613 0014 414B     		ldr	r3, .L92
 1614 0016 0022     		movs	r2, #0
 1615 0018 5A60     		str	r2, [r3, #4]
 667:Core/Src/main.c ****   TxHeaderFuelCellTask.TransmitGlobalTime = DISABLE;
 1616              		.loc 1 667 43
 1617 001a 404B     		ldr	r3, .L92
 1618 001c 0022     		movs	r2, #0
 1619 001e 1A75     		strb	r2, [r3, #20]
 1620              	.L89:
 668:Core/Src/main.c ****   /* Infinite loop */
 669:Core/Src/main.c ****   for (;;)
 670:Core/Src/main.c ****   {
 671:Core/Src/main.c ****     switch (fc_state)
 1621              		.loc 1 671 5
 1622 0020 3F4B     		ldr	r3, .L92+4
 1623 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1624 0024 042B     		cmp	r3, #4
 1625 0026 FBD8     		bhi	.L89
 1626 0028 01A2     		adr	r2, .L78
 1627 002a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1628 002e 00BF     		.p2align 2
 1629              	.L78:
 1630 0030 45000000 		.word	.L81+1
 1631 0034 5F000000 		.word	.L80+1
 1632 0038 FB000000 		.word	.L79+1
 1633 003c 21000000 		.word	.L89+1
 1634 0040 21000000 		.word	.L89+1
 1635              		.p2align 1
 1636              	.L81:
 1637              	.LBB8:
 672:Core/Src/main.c ****     {
 673:Core/Src/main.c ****     case FUEL_CELL_OFF_STATE:
 674:Core/Src/main.c ****       HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1638              		.loc 1 674 7
 1639 0044 0022     		movs	r2, #0
 1640 0046 0421     		movs	r1, #4
 1641 0048 4FF09040 		mov	r0, #1207959552
 1642 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 675:Core/Src/main.c ****       HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_RESET);
 1643              		.loc 1 675 7
 1644 0050 0022     		movs	r2, #0
 1645 0052 0221     		movs	r1, #2
 1646 0054 4FF09040 		mov	r0, #1207959552
 1647 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 676:Core/Src/main.c ****       // CAN message to relay board all relays off
 677:Core/Src/main.c ****       break;
 1648              		.loc 1 677 7
 1649 005c 5CE0     		b	.L76
 1650              	.L80:
 678:Core/Src/main.c ****     case FUEL_CELL_STRTUP_STATE:
 679:Core/Src/main.c ****       TxHeaderFuelCellTask.StdId = 0x103;
 1651              		.loc 1 679 34
 1652 005e 2F4B     		ldr	r3, .L92
 1653 0060 40F20312 		movw	r2, #259
ARM GAS  /tmp/ccLnzcom.s 			page 42


 1654 0064 1A60     		str	r2, [r3]
 680:Core/Src/main.c ****       TxHeaderFuelCellTask.DLC = 8;
 1655              		.loc 1 680 32
 1656 0066 2D4B     		ldr	r3, .L92
 1657 0068 0822     		movs	r2, #8
 1658 006a 1A61     		str	r2, [r3, #16]
 681:Core/Src/main.c ****       uint8_t mymsg[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 1659              		.loc 1 681 15
 1660 006c 2D4A     		ldr	r2, .L92+8
 1661 006e 07F10803 		add	r3, r7, #8
 1662 0072 92E80300 		ldm	r2, {r0, r1}
 1663 0076 83E80300 		stm	r3, {r0, r1}
 682:Core/Src/main.c ****       // Try to add tx message
 683:Core/Src/main.c ****       fc_tick = HAL_GetTick();
 1664              		.loc 1 683 17
 1665 007a FFF7FEFF 		bl	HAL_GetTick
 1666 007e 7861     		str	r0, [r7, #20]
 1667              	.L84:
 684:Core/Src/main.c ****       do
 685:Core/Src/main.c ****       {
 686:Core/Src/main.c ****         hal_stat = HAL_CAN_AddTxMessage(&hcan1, &TxHeaderFuelCellTask, mymsg, &TxMailboxFuelCellTas
 1668              		.loc 1 686 20 discriminator 2
 1669 0080 07F10802 		add	r2, r7, #8
 1670 0084 284B     		ldr	r3, .L92+12
 1671 0086 2549     		ldr	r1, .L92
 1672 0088 2848     		ldr	r0, .L92+16
 1673 008a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1674 008e 0346     		mov	r3, r0
 1675 0090 FB74     		strb	r3, [r7, #19]
 687:Core/Src/main.c ****       } while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < CAN_ADD_TX_TIMEOUT_MS));
 1676              		.loc 1 687 7 discriminator 2
 1677 0092 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1678 0094 002B     		cmp	r3, #0
 1679 0096 08D0     		beq	.L83
 1680              		.loc 1 687 39 discriminator 1
 1681 0098 FFF7FEFF 		bl	HAL_GetTick
 1682 009c 0246     		mov	r2, r0
 1683              		.loc 1 687 53 discriminator 1
 1684 009e 7B69     		ldr	r3, [r7, #20]
 1685 00a0 D31A     		subs	r3, r2, r3
 1686              		.loc 1 687 35 discriminator 1
 1687 00a2 41F28732 		movw	r2, #4999
 1688 00a6 9342     		cmp	r3, r2
 1689 00a8 EAD9     		bls	.L84
 1690              	.L83:
 688:Core/Src/main.c **** 
 689:Core/Src/main.c ****       // Wait for tx message to be sent. If never successfully sent, timeout and return to off stat
 690:Core/Src/main.c ****       if (osSemaphoreAcquire(canMsgOkSemHandle, CAN_MESSAGE_TIMEOUT_MS) == osOK)
 1691              		.loc 1 690 11
 1692 00aa 214B     		ldr	r3, .L92+20
 1693 00ac 1B68     		ldr	r3, [r3]
 1694 00ae 41F28831 		movw	r1, #5000
 1695 00b2 1846     		mov	r0, r3
 1696 00b4 FFF7FEFF 		bl	osSemaphoreAcquire
 1697 00b8 0346     		mov	r3, r0
 1698              		.loc 1 690 10
 1699 00ba 002B     		cmp	r3, #0
ARM GAS  /tmp/ccLnzcom.s 			page 43


 1700 00bc 19D1     		bne	.L85
 691:Core/Src/main.c ****       {
 692:Core/Src/main.c ****         HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_SET);
 1701              		.loc 1 692 9
 1702 00be 0122     		movs	r2, #1
 1703 00c0 0221     		movs	r1, #2
 1704 00c2 4FF09040 		mov	r0, #1207959552
 1705 00c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 693:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_SET);
 1706              		.loc 1 693 9
 1707 00ca 0122     		movs	r2, #1
 1708 00cc 0421     		movs	r1, #4
 1709 00ce 4FF09040 		mov	r0, #1207959552
 1710 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 694:Core/Src/main.c ****         osDelay(500);
 1711              		.loc 1 694 9
 1712 00d6 4FF4FA70 		mov	r0, #500
 1713 00da FFF7FEFF 		bl	osDelay
 695:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1714              		.loc 1 695 9
 1715 00de 0022     		movs	r2, #0
 1716 00e0 0421     		movs	r1, #4
 1717 00e2 4FF09040 		mov	r0, #1207959552
 1718 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 696:Core/Src/main.c ****         fc_state = FUEL_CELL_CHRGE_STATE;
 1719              		.loc 1 696 18
 1720 00ea 0D4B     		ldr	r3, .L92+4
 1721 00ec 0222     		movs	r2, #2
 1722 00ee 1A70     		strb	r2, [r3]
 697:Core/Src/main.c ****       }
 698:Core/Src/main.c ****       else
 699:Core/Src/main.c ****       {
 700:Core/Src/main.c ****         // Tx never added or didn't send succesfully in CAN_MESSAGE_TIMEOUT_MS
 701:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 702:Core/Src/main.c ****       }
 703:Core/Src/main.c ****       break;
 1723              		.loc 1 703 7
 1724 00f0 12E0     		b	.L76
 1725              	.L85:
 701:Core/Src/main.c ****       }
 1726              		.loc 1 701 18
 1727 00f2 0B4B     		ldr	r3, .L92+4
 1728 00f4 0022     		movs	r2, #0
 1729 00f6 1A70     		strb	r2, [r3]
 1730              		.loc 1 703 7
 1731 00f8 0EE0     		b	.L76
 1732              	.L79:
 704:Core/Src/main.c ****     case FUEL_CELL_CHRGE_STATE:
 705:Core/Src/main.c ****       if (canData.cap_voltage >= FULL_CAP_CHARGE_V)
 1733              		.loc 1 705 18
 1734 00fa 0E4B     		ldr	r3, .L92+24
 1735 00fc D3ED017A 		vldr.32	s15, [r3, #4]
 1736              		.loc 1 705 10
 1737 0100 B3EE027A 		vmov.f32	s14, #1.8e+1
 1738 0104 F4EEC77A 		vcmpe.f32	s15, s14
 1739 0108 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1740 010c 00DA     		bge	.L90
ARM GAS  /tmp/ccLnzcom.s 			page 44


 706:Core/Src/main.c ****       {
 707:Core/Src/main.c ****         fc_state = FUEL_CELL_RUN_STATE;
 708:Core/Src/main.c ****       }
 709:Core/Src/main.c ****       // CAN message to relay board cap charge mode
 710:Core/Src/main.c ****       // Wait for caps to charge up
 711:Core/Src/main.c ****       // Move to run mode
 712:Core/Src/main.c ****       break;
 1741              		.loc 1 712 7
 1742 010e 02E0     		b	.L91
 1743              	.L90:
 707:Core/Src/main.c ****       }
 1744              		.loc 1 707 18
 1745 0110 034B     		ldr	r3, .L92+4
 1746 0112 0422     		movs	r2, #4
 1747 0114 1A70     		strb	r2, [r3]
 1748              	.L91:
 1749              		.loc 1 712 7
 1750 0116 00BF     		nop
 1751              	.L76:
 1752              	.LBE8:
 671:Core/Src/main.c ****     {
 1753              		.loc 1 671 5
 1754 0118 82E7     		b	.L89
 1755              	.L93:
 1756 011a 00BF     		.align	2
 1757              	.L92:
 1758 011c 00000000 		.word	TxHeaderFuelCellTask
 1759 0120 00000000 		.word	fc_state
 1760 0124 2C000000 		.word	.LC4
 1761 0128 00000000 		.word	TxMailboxFuelCellTask
 1762 012c 00000000 		.word	hcan1
 1763 0130 00000000 		.word	canMsgOkSemHandle
 1764 0134 00000000 		.word	canData
 1765              		.cfi_endproc
 1766              	.LFE149:
 1768              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1769              		.align	1
 1770              		.global	HAL_TIM_PeriodElapsedCallback
 1771              		.syntax unified
 1772              		.thumb
 1773              		.thumb_func
 1775              	HAL_TIM_PeriodElapsedCallback:
 1776              	.LFB150:
 713:Core/Src/main.c ****     case FUEL_CELL_RUN_STATE:
 714:Core/Src/main.c ****       // CAN message to relay board run mode
 715:Core/Src/main.c **** 
 716:Core/Src/main.c ****       break;
 717:Core/Src/main.c ****     }
 718:Core/Src/main.c ****   }
 719:Core/Src/main.c ****   /* USER CODE END StartFuelCellTask */
 720:Core/Src/main.c **** }
 721:Core/Src/main.c **** 
 722:Core/Src/main.c **** /**
 723:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 724:Core/Src/main.c ****  * @note   This function is called  when TIM1 interrupt took place, inside
 725:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 726:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
ARM GAS  /tmp/ccLnzcom.s 			page 45


 727:Core/Src/main.c ****  * @param  htim : TIM handle
 728:Core/Src/main.c ****  * @retval None
 729:Core/Src/main.c ****  */
 730:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 731:Core/Src/main.c **** {
 1777              		.loc 1 731 1
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 8
 1780              		@ frame_needed = 1, uses_anonymous_args = 0
 1781 0000 80B5     		push	{r7, lr}
 1782              	.LCFI55:
 1783              		.cfi_def_cfa_offset 8
 1784              		.cfi_offset 7, -8
 1785              		.cfi_offset 14, -4
 1786 0002 82B0     		sub	sp, sp, #8
 1787              	.LCFI56:
 1788              		.cfi_def_cfa_offset 16
 1789 0004 00AF     		add	r7, sp, #0
 1790              	.LCFI57:
 1791              		.cfi_def_cfa_register 7
 1792 0006 7860     		str	r0, [r7, #4]
 732:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 733:Core/Src/main.c **** 
 734:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 735:Core/Src/main.c ****   if (htim->Instance == TIM1)
 1793              		.loc 1 735 11
 1794 0008 7B68     		ldr	r3, [r7, #4]
 1795 000a 1B68     		ldr	r3, [r3]
 1796              		.loc 1 735 6
 1797 000c 044A     		ldr	r2, .L97
 1798 000e 9342     		cmp	r3, r2
 1799 0010 01D1     		bne	.L96
 736:Core/Src/main.c ****   {
 737:Core/Src/main.c ****     HAL_IncTick();
 1800              		.loc 1 737 5
 1801 0012 FFF7FEFF 		bl	HAL_IncTick
 1802              	.L96:
 738:Core/Src/main.c ****   }
 739:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 740:Core/Src/main.c **** 
 741:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 742:Core/Src/main.c **** }
 1803              		.loc 1 742 1
 1804 0016 00BF     		nop
 1805 0018 0837     		adds	r7, r7, #8
 1806              	.LCFI58:
 1807              		.cfi_def_cfa_offset 8
 1808 001a BD46     		mov	sp, r7
 1809              	.LCFI59:
 1810              		.cfi_def_cfa_register 13
 1811              		@ sp needed
 1812 001c 80BD     		pop	{r7, pc}
 1813              	.L98:
 1814 001e 00BF     		.align	2
 1815              	.L97:
 1816 0020 002C0140 		.word	1073818624
 1817              		.cfi_endproc
ARM GAS  /tmp/ccLnzcom.s 			page 46


 1818              	.LFE150:
 1820              		.section	.text.Error_Handler,"ax",%progbits
 1821              		.align	1
 1822              		.global	Error_Handler
 1823              		.syntax unified
 1824              		.thumb
 1825              		.thumb_func
 1827              	Error_Handler:
 1828              	.LFB151:
 743:Core/Src/main.c **** 
 744:Core/Src/main.c **** /**
 745:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 746:Core/Src/main.c ****  * @retval None
 747:Core/Src/main.c ****  */
 748:Core/Src/main.c **** void Error_Handler(void)
 749:Core/Src/main.c **** {
 1829              		.loc 1 749 1
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 1, uses_anonymous_args = 0
 1833              		@ link register save eliminated.
 1834 0000 80B4     		push	{r7}
 1835              	.LCFI60:
 1836              		.cfi_def_cfa_offset 4
 1837              		.cfi_offset 7, -4
 1838 0002 00AF     		add	r7, sp, #0
 1839              	.LCFI61:
 1840              		.cfi_def_cfa_register 7
 1841              	.LBB9:
 1842              	.LBB10:
 1843              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  /tmp/ccLnzcom.s 			page 47


  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccLnzcom.s 			page 48


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccLnzcom.s 			page 49


 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccLnzcom.s 			page 50


 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1844              		.loc 2 209 3
 1845              		.syntax unified
 1846              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1847 0004 72B6     		cpsid i
 1848              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1849              		.loc 2 210 1
 1850              		.thumb
 1851              		.syntax unified
 1852 0006 00BF     		nop
 1853              	.L100:
 1854              	.LBE10:
 1855              	.LBE9:
 750:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 751:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 752:Core/Src/main.c ****   __disable_irq();
 753:Core/Src/main.c ****   while (1)
 1856              		.loc 1 753 9 discriminator 1
 1857 0008 FEE7     		b	.L100
 1858              		.cfi_endproc
 1859              	.LFE151:
 1861              		.text
 1862              	.Letext0:
 1863              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 1864              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 1865              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 1866              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1867              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1868              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 1869              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 1870              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 1871              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 1872              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
 1873              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 1874              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 1875              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1876              		.file 16 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1877              		.file 17 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_types.h"
 1878              		.file 18 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/reent.h"
 1879              		.file 19 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/lock.h"
 1880              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1881              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/ccLnzcom.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccLnzcom.s:24     .bss.hcan1:0000000000000000 hcan1
     /tmp/ccLnzcom.s:21     .bss.hcan1:0000000000000000 $d
     /tmp/ccLnzcom.s:31     .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccLnzcom.s:28     .bss.hi2c1:0000000000000000 $d
     /tmp/ccLnzcom.s:38     .bss.huart1:0000000000000000 huart1
     /tmp/ccLnzcom.s:35     .bss.huart1:0000000000000000 $d
     /tmp/ccLnzcom.s:45     .bss.CanTaskHandle:0000000000000000 CanTaskHandle
     /tmp/ccLnzcom.s:42     .bss.CanTaskHandle:0000000000000000 $d
     /tmp/ccLnzcom.s:52     .bss.CanTaskBuffer:0000000000000000 CanTaskBuffer
     /tmp/ccLnzcom.s:49     .bss.CanTaskBuffer:0000000000000000 $d
     /tmp/ccLnzcom.s:59     .bss.CanTaskControlBlock:0000000000000000 CanTaskControlBlock
     /tmp/ccLnzcom.s:56     .bss.CanTaskControlBlock:0000000000000000 $d
     /tmp/ccLnzcom.s:70     .rodata.CanTask_attributes:0000000000000000 CanTask_attributes
     /tmp/ccLnzcom.s:63     .rodata:0000000000000000 $d
     /tmp/ccLnzcom.s:67     .rodata.CanTask_attributes:0000000000000000 $d
     /tmp/ccLnzcom.s:84     .bss.I2cTaskHandle:0000000000000000 I2cTaskHandle
     /tmp/ccLnzcom.s:81     .bss.I2cTaskHandle:0000000000000000 $d
     /tmp/ccLnzcom.s:91     .bss.I2cTaskBuffer:0000000000000000 I2cTaskBuffer
     /tmp/ccLnzcom.s:88     .bss.I2cTaskBuffer:0000000000000000 $d
     /tmp/ccLnzcom.s:98     .bss.I2cTaskControlBlock:0000000000000000 I2cTaskControlBlock
     /tmp/ccLnzcom.s:95     .bss.I2cTaskControlBlock:0000000000000000 $d
     /tmp/ccLnzcom.s:109    .rodata.I2cTask_attributes:0000000000000000 I2cTask_attributes
     /tmp/ccLnzcom.s:106    .rodata.I2cTask_attributes:0000000000000000 $d
     /tmp/ccLnzcom.s:123    .bss.FuelCellTaskHandle:0000000000000000 FuelCellTaskHandle
     /tmp/ccLnzcom.s:120    .bss.FuelCellTaskHandle:0000000000000000 $d
     /tmp/ccLnzcom.s:130    .bss.FuelCellTaskBuffer:0000000000000000 FuelCellTaskBuffer
     /tmp/ccLnzcom.s:127    .bss.FuelCellTaskBuffer:0000000000000000 $d
     /tmp/ccLnzcom.s:137    .bss.FuelCellTaskControlBlock:0000000000000000 FuelCellTaskControlBlock
     /tmp/ccLnzcom.s:134    .bss.FuelCellTaskControlBlock:0000000000000000 $d
     /tmp/ccLnzcom.s:148    .rodata.FuelCellTask_attributes:0000000000000000 FuelCellTask_attributes
     /tmp/ccLnzcom.s:145    .rodata.FuelCellTask_attributes:0000000000000000 $d
     /tmp/ccLnzcom.s:162    .bss.canMsgOkSemHandle:0000000000000000 canMsgOkSemHandle
     /tmp/ccLnzcom.s:159    .bss.canMsgOkSemHandle:0000000000000000 $d
     /tmp/ccLnzcom.s:173    .rodata.canMsgOkSem_attributes:0000000000000000 canMsgOkSem_attributes
     /tmp/ccLnzcom.s:170    .rodata.canMsgOkSem_attributes:0000000000000000 $d
     /tmp/ccLnzcom.s:180    .bss.fc_state:0000000000000000 fc_state
     /tmp/ccLnzcom.s:181    .bss.fc_state:0000000000000000 $d
     /tmp/ccLnzcom.s:187    .bss.accData:0000000000000000 accData
     /tmp/ccLnzcom.s:184    .bss.accData:0000000000000000 $d
     /tmp/ccLnzcom.s:194    .bss.fcData:0000000000000000 fcData
     /tmp/ccLnzcom.s:191    .bss.fcData:0000000000000000 $d
     /tmp/ccLnzcom.s:201    .bss.canData:0000000000000000 canData
     /tmp/ccLnzcom.s:198    .bss.canData:0000000000000000 $d
     /tmp/ccLnzcom.s:208    .bss.TxHeader:0000000000000000 TxHeader
     /tmp/ccLnzcom.s:205    .bss.TxHeader:0000000000000000 $d
     /tmp/ccLnzcom.s:215    .bss.TxHeaderFuelCellTask:0000000000000000 TxHeaderFuelCellTask
     /tmp/ccLnzcom.s:212    .bss.TxHeaderFuelCellTask:0000000000000000 $d
     /tmp/ccLnzcom.s:222    .bss.RxHeader:0000000000000000 RxHeader
     /tmp/ccLnzcom.s:219    .bss.RxHeader:0000000000000000 $d
     /tmp/ccLnzcom.s:229    .bss.TxMailbox:0000000000000000 TxMailbox
     /tmp/ccLnzcom.s:226    .bss.TxMailbox:0000000000000000 $d
     /tmp/ccLnzcom.s:236    .bss.TxMailboxFuelCellTask:0000000000000000 TxMailboxFuelCellTask
     /tmp/ccLnzcom.s:233    .bss.TxMailboxFuelCellTask:0000000000000000 $d
     /tmp/ccLnzcom.s:243    .bss.TxData:0000000000000000 TxData
     /tmp/ccLnzcom.s:240    .bss.TxData:0000000000000000 $d
ARM GAS  /tmp/ccLnzcom.s 			page 52


     /tmp/ccLnzcom.s:250    .bss.RxData:0000000000000000 RxData
     /tmp/ccLnzcom.s:247    .bss.RxData:0000000000000000 $d
     /tmp/ccLnzcom.s:257    .bss.button_debounce:0000000000000000 button_debounce
     /tmp/ccLnzcom.s:254    .bss.button_debounce:0000000000000000 $d
     /tmp/ccLnzcom.s:260    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccLnzcom.s:266    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccLnzcom.s:304    .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000001c $d
     /tmp/ccLnzcom.s:310    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccLnzcom.s:316    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccLnzcom.s:363    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000028 $d
     /tmp/ccLnzcom.s:369    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccLnzcom.s:375    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccLnzcom.s:422    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000028 $d
     /tmp/ccLnzcom.s:428    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccLnzcom.s:434    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccLnzcom.s:481    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000028 $d
     /tmp/ccLnzcom.s:487    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/ccLnzcom.s:493    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/ccLnzcom.s:637    .text.HAL_GPIO_EXTI_Callback:00000000000000b8 $d
     /tmp/ccLnzcom.s:643    .text.main:0000000000000000 $t
     /tmp/ccLnzcom.s:649    .text.main:0000000000000000 main
     /tmp/ccLnzcom.s:783    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccLnzcom.s:1232   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccLnzcom.s:913    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccLnzcom.s:1051   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccLnzcom.s:1151   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccLnzcom.s:760    .text.main:00000000000000a0 $d
     /tmp/ccLnzcom.s:1516   .text.StartCanTask:0000000000000000 StartCanTask
     /tmp/ccLnzcom.s:1549   .text.StartI2cTask:0000000000000000 StartI2cTask
     /tmp/ccLnzcom.s:1586   .text.StartFuelCellTask:0000000000000000 StartFuelCellTask
     /tmp/ccLnzcom.s:777    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccLnzcom.s:1827   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccLnzcom.s:908    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccLnzcom.s:1040   .text.MX_CAN1_Init:00000000000000a8 $d
     /tmp/ccLnzcom.s:1046   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccLnzcom.s:1139   .text.MX_I2C1_Init:0000000000000074 $d
     /tmp/ccLnzcom.s:1146   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccLnzcom.s:1221   .text.MX_USART1_UART_Init:0000000000000058 $d
     /tmp/ccLnzcom.s:1227   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccLnzcom.s:1502   .text.MX_GPIO_Init:00000000000001d4 $d
     /tmp/ccLnzcom.s:1510   .text.StartCanTask:0000000000000000 $t
     /tmp/ccLnzcom.s:1543   .text.StartI2cTask:0000000000000000 $t
     /tmp/ccLnzcom.s:1580   .text.StartFuelCellTask:0000000000000000 $t
     /tmp/ccLnzcom.s:1630   .text.StartFuelCellTask:0000000000000030 $d
     /tmp/ccLnzcom.s:1635   .text.StartFuelCellTask:0000000000000044 $t
     /tmp/ccLnzcom.s:1758   .text.StartFuelCellTask:000000000000011c $d
     /tmp/ccLnzcom.s:1769   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccLnzcom.s:1775   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccLnzcom.s:1816   .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccLnzcom.s:1821   .text.Error_Handler:0000000000000000 $t
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
ARM GAS  /tmp/ccLnzcom.s 			page 53


                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39
                           .group:0000000000000000 wm4.main.h.60.84418a90fcd58ba06baa4da515eb273a
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.32.a1b57c0d46431311074569d60ca736af
                           .group:0000000000000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:0000000000000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:0000000000000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:0000000000000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:0000000000000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:0000000000000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.reent.h.96.88022c5a22979c33a20a5d76964119ed
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a17c2bf78722c1d7b86ba8d45e5b5f29
                           .group:0000000000000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:0000000000000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:0000000000000000 wm4.cmsis_os.h.129.5f4adf2a422dfa714f64051974ebee7a
                           .group:0000000000000000 wm4.cmsis_os2.h.151.57db232dfe421e4f781dd02c42ee4360
                           .group:0000000000000000 wm4.cmsis_os.h.179.c36f217fbf28f1f2e754518bfb5a2ae8
ARM GAS  /tmp/ccLnzcom.s 			page 54



UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
osSemaphoreRelease
HAL_GetTick
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
osKernelInitialize
osSemaphoreNew
osThreadNew
osKernelStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_MCOConfig
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_CAN_AddTxMessage
osSemaphoreAcquire
HAL_IncTick
