ARM GAS  /tmp/cccn0NVy.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	FC
  20              		.section	.bss.FC,"aw",%nobits
  21              		.align	2
  24              	FC:
  25 0000 00000000 		.space	12
  25      00000000 
  25      00000000 
  26              		.global	CANPackets
  27              		.section	.bss.CANPackets,"aw",%nobits
  28              		.align	2
  31              	CANPackets:
  32 0000 00000000 		.space	8
  32      00000000 
  33              		.global	hcan1
  34              		.section	.bss.hcan1,"aw",%nobits
  35              		.align	2
  38              	hcan1:
  39 0000 00000000 		.space	40
  39      00000000 
  39      00000000 
  39      00000000 
  39      00000000 
  40              		.global	hi2c1
  41              		.section	.bss.hi2c1,"aw",%nobits
  42              		.align	2
  45              	hi2c1:
  46 0000 00000000 		.space	84
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.global	huart1
  48              		.section	.bss.huart1,"aw",%nobits
  49              		.align	2
  52              	huart1:
  53 0000 00000000 		.space	132
  53      00000000 
  53      00000000 
  53      00000000 
ARM GAS  /tmp/cccn0NVy.s 			page 2


  53      00000000 
  54              		.global	CanTaskHandle
  55              		.section	.bss.CanTaskHandle,"aw",%nobits
  56              		.align	2
  59              	CanTaskHandle:
  60 0000 00000000 		.space	4
  61              		.global	CanTaskBuffer
  62              		.section	.bss.CanTaskBuffer,"aw",%nobits
  63              		.align	2
  66              	CanTaskBuffer:
  67 0000 00000000 		.space	512
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.global	CanTaskControlBlock
  69              		.section	.bss.CanTaskControlBlock,"aw",%nobits
  70              		.align	3
  73              	CanTaskControlBlock:
  74 0000 00000000 		.space	1160
  74      00000000 
  74      00000000 
  74      00000000 
  74      00000000 
  75              		.global	CanTask_attributes
  76              		.section	.rodata
  77              		.align	2
  78              	.LC0:
  79 0000 43616E54 		.ascii	"CanTask\000"
  79      61736B00 
  80              		.section	.rodata.CanTask_attributes,"a"
  81              		.align	2
  84              	CanTask_attributes:
  85 0000 00000000 		.word	.LC0
  86 0004 00000000 		.space	4
  87 0008 00000000 		.word	CanTaskControlBlock
  88 000c 88040000 		.word	1160
  89 0010 00000000 		.word	CanTaskBuffer
  90 0014 00020000 		.word	512
  91 0018 19000000 		.word	25
  92 001c 00000000 		.space	8
  92      00000000 
  93              		.global	I2cTaskHandle
  94              		.section	.bss.I2cTaskHandle,"aw",%nobits
  95              		.align	2
  98              	I2cTaskHandle:
  99 0000 00000000 		.space	4
 100              		.global	I2cTaskBuffer
 101              		.section	.bss.I2cTaskBuffer,"aw",%nobits
 102              		.align	2
 105              	I2cTaskBuffer:
 106 0000 00000000 		.space	512
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.global	I2cTaskControlBlock
ARM GAS  /tmp/cccn0NVy.s 			page 3


 108              		.section	.bss.I2cTaskControlBlock,"aw",%nobits
 109              		.align	3
 112              	I2cTaskControlBlock:
 113 0000 00000000 		.space	1160
 113      00000000 
 113      00000000 
 113      00000000 
 113      00000000 
 114              		.global	I2cTask_attributes
 115              		.section	.rodata
 116              		.align	2
 117              	.LC1:
 118 0008 49326354 		.ascii	"I2cTask\000"
 118      61736B00 
 119              		.section	.rodata.I2cTask_attributes,"a"
 120              		.align	2
 123              	I2cTask_attributes:
 124 0000 08000000 		.word	.LC1
 125 0004 00000000 		.space	4
 126 0008 00000000 		.word	I2cTaskControlBlock
 127 000c 88040000 		.word	1160
 128 0010 00000000 		.word	I2cTaskBuffer
 129 0014 00020000 		.word	512
 130 0018 1A000000 		.word	26
 131 001c 00000000 		.space	8
 131      00000000 
 132              		.global	FuelCellTaskHandle
 133              		.section	.bss.FuelCellTaskHandle,"aw",%nobits
 134              		.align	2
 137              	FuelCellTaskHandle:
 138 0000 00000000 		.space	4
 139              		.global	FuelCellTaskBuffer
 140              		.section	.bss.FuelCellTaskBuffer,"aw",%nobits
 141              		.align	2
 144              	FuelCellTaskBuffer:
 145 0000 00000000 		.space	512
 145      00000000 
 145      00000000 
 145      00000000 
 145      00000000 
 146              		.global	FuelCellTaskControlBlock
 147              		.section	.bss.FuelCellTaskControlBlock,"aw",%nobits
 148              		.align	3
 151              	FuelCellTaskControlBlock:
 152 0000 00000000 		.space	1160
 152      00000000 
 152      00000000 
 152      00000000 
 152      00000000 
 153              		.global	FuelCellTask_attributes
 154              		.section	.rodata
 155              		.align	2
 156              	.LC2:
 157 0010 4675656C 		.ascii	"FuelCellTask\000"
 157      43656C6C 
 157      5461736B 
 157      00
ARM GAS  /tmp/cccn0NVy.s 			page 4


 158              		.section	.rodata.FuelCellTask_attributes,"a"
 159              		.align	2
 162              	FuelCellTask_attributes:
 163 0000 10000000 		.word	.LC2
 164 0004 00000000 		.space	4
 165 0008 00000000 		.word	FuelCellTaskControlBlock
 166 000c 88040000 		.word	1160
 167 0010 00000000 		.word	FuelCellTaskBuffer
 168 0014 00020000 		.word	512
 169 0018 1B000000 		.word	27
 170 001c 00000000 		.space	8
 170      00000000 
 171              		.global	canMsgOkSemHandle
 172              		.section	.bss.canMsgOkSemHandle,"aw",%nobits
 173              		.align	2
 176              	canMsgOkSemHandle:
 177 0000 00000000 		.space	4
 178              		.global	canMsgOkSem_attributes
 179              		.section	.rodata
 180 001d 000000   		.align	2
 181              	.LC3:
 182 0020 63616E4D 		.ascii	"canMsgOkSem\000"
 182      73674F6B 
 182      53656D00 
 183              		.section	.rodata.canMsgOkSem_attributes,"a"
 184              		.align	2
 187              	canMsgOkSem_attributes:
 188 0000 20000000 		.word	.LC3
 189 0004 00000000 		.space	12
 189      00000000 
 189      00000000 
 190              		.global	fc_state
 191              		.section	.bss.fc_state,"aw",%nobits
 194              	fc_state:
 195 0000 00       		.space	1
 196              		.global	accData
 197              		.section	.bss.accData,"aw",%nobits
 198              		.align	2
 201              	accData:
 202 0000 000000   		.space	3
 203              		.global	canData
 204              		.section	.bss.canData,"aw",%nobits
 205              		.align	2
 208              	canData:
 209 0000 00000000 		.space	8
 209      00000000 
 210              		.global	TxHeader
 211              		.section	.bss.TxHeader,"aw",%nobits
 212              		.align	2
 215              	TxHeader:
 216 0000 00000000 		.space	24
 216      00000000 
 216      00000000 
 216      00000000 
 216      00000000 
 217              		.global	TxHeaderFuelCellTask
 218              		.section	.bss.TxHeaderFuelCellTask,"aw",%nobits
ARM GAS  /tmp/cccn0NVy.s 			page 5


 219              		.align	2
 222              	TxHeaderFuelCellTask:
 223 0000 00000000 		.space	24
 223      00000000 
 223      00000000 
 223      00000000 
 223      00000000 
 224              		.global	RxHeader
 225              		.section	.bss.RxHeader,"aw",%nobits
 226              		.align	2
 229              	RxHeader:
 230 0000 00000000 		.space	28
 230      00000000 
 230      00000000 
 230      00000000 
 230      00000000 
 231              		.global	TxMailbox
 232              		.section	.bss.TxMailbox,"aw",%nobits
 233              		.align	2
 236              	TxMailbox:
 237 0000 00000000 		.space	4
 238              		.global	TxMailboxFuelCellTask
 239              		.section	.bss.TxMailboxFuelCellTask,"aw",%nobits
 240              		.align	2
 243              	TxMailboxFuelCellTask:
 244 0000 00000000 		.space	4
 245              		.global	TxData
 246              		.section	.bss.TxData,"aw",%nobits
 247              		.align	2
 250              	TxData:
 251 0000 00000000 		.space	8
 251      00000000 
 252              		.global	RxData
 253              		.section	.bss.RxData,"aw",%nobits
 254              		.align	2
 257              	RxData:
 258 0000 00000000 		.space	8
 258      00000000 
 259              		.global	button_debounce
 260              		.section	.bss.button_debounce,"aw",%nobits
 261              		.align	2
 264              	button_debounce:
 265 0000 00000000 		.space	4
 266              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 267              		.align	1
 268              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 269              		.syntax unified
 270              		.thumb
 271              		.thumb_func
 273              	HAL_CAN_RxFifo0MsgPendingCallback:
 274              	.LFB136:
 275              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
ARM GAS  /tmp/cccn0NVy.s 			page 6


   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "cmsis_os.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** typedef StaticTask_t osStaticThreadDef_t;
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** typedef struct
  32:Core/Src/main.c **** {
  33:Core/Src/main.c ****   uint8_t x, y, z;
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** } ACCELEROMETER;
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** struct FCData
  38:Core/Src/main.c **** {
  39:Core/Src/main.c ****   uint8_t purge_state, supply_state;
  40:Core/Src/main.c ****   float internal_stack_temp, internal_stack_pressure;
  41:Core/Src/main.c ****   // Potentially some more data here
  42:Core/Src/main.c **** };
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** struct FCData FC;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** struct CANPack
  47:Core/Src/main.c **** {
  48:Core/Src/main.c ****   struct FCData* pFC;
  49:Core/Src/main.c ****   uint8_t FCData_ID;
  50:Core/Src/main.c **** };
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** struct CANPack CANPackets;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** typedef struct
  55:Core/Src/main.c **** {
  56:Core/Src/main.c ****   // Data received from CAN
  57:Core/Src/main.c ****   uint8_t H2_OK;
  58:Core/Src/main.c ****   float cap_voltage;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** } CANBUS;
  61:Core/Src/main.c **** /* USER CODE END PTD */
  62:Core/Src/main.c **** 
ARM GAS  /tmp/cccn0NVy.s 			page 7


  63:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  64:Core/Src/main.c **** /* USER CODE BEGIN PD */
  65:Core/Src/main.c **** #define FULL_CAP_CHARGE_V 18
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** #define FUEL_CELL_OFF_STATE 0x00
  68:Core/Src/main.c **** #define FUEL_CELL_STRTUP_STATE 0x01
  69:Core/Src/main.c **** #define FUEL_CELL_CHRGE_STATE 0x02
  70:Core/Src/main.c **** #define FUEL_CELL_RUN_STATE 0x04
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** #define CAN_TX_MAILBOX_NONE 0x00000000U // Remove reference to tx mailbox
  73:Core/Src/main.c **** /* USER CODE END PD */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  76:Core/Src/main.c **** /* USER CODE BEGIN PM */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END PM */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  81:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** UART_HandleTypeDef huart1;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* Definitions for CanTask */
  88:Core/Src/main.c **** osThreadId_t CanTaskHandle;
  89:Core/Src/main.c **** uint32_t CanTaskBuffer[128];
  90:Core/Src/main.c **** osStaticThreadDef_t CanTaskControlBlock;
  91:Core/Src/main.c **** const osThreadAttr_t CanTask_attributes = {
  92:Core/Src/main.c ****     .name = "CanTask",
  93:Core/Src/main.c ****     .cb_mem = &CanTaskControlBlock,
  94:Core/Src/main.c ****     .cb_size = sizeof(CanTaskControlBlock),
  95:Core/Src/main.c ****     .stack_mem = &CanTaskBuffer[0],
  96:Core/Src/main.c ****     .stack_size = sizeof(CanTaskBuffer),
  97:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal1,
  98:Core/Src/main.c **** };
  99:Core/Src/main.c **** /* Definitions for I2cTask */
 100:Core/Src/main.c **** osThreadId_t I2cTaskHandle;
 101:Core/Src/main.c **** uint32_t I2cTaskBuffer[128];
 102:Core/Src/main.c **** osStaticThreadDef_t I2cTaskControlBlock;
 103:Core/Src/main.c **** const osThreadAttr_t I2cTask_attributes = {
 104:Core/Src/main.c ****     .name = "I2cTask",
 105:Core/Src/main.c ****     .cb_mem = &I2cTaskControlBlock,
 106:Core/Src/main.c ****     .cb_size = sizeof(I2cTaskControlBlock),
 107:Core/Src/main.c ****     .stack_mem = &I2cTaskBuffer[0],
 108:Core/Src/main.c ****     .stack_size = sizeof(I2cTaskBuffer),
 109:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal2,
 110:Core/Src/main.c **** };
 111:Core/Src/main.c **** /* Definitions for FuelCellTask */
 112:Core/Src/main.c **** osThreadId_t FuelCellTaskHandle;
 113:Core/Src/main.c **** uint32_t FuelCellTaskBuffer[128];
 114:Core/Src/main.c **** osStaticThreadDef_t FuelCellTaskControlBlock;
 115:Core/Src/main.c **** const osThreadAttr_t FuelCellTask_attributes = {
 116:Core/Src/main.c ****     .name = "FuelCellTask",
 117:Core/Src/main.c ****     .cb_mem = &FuelCellTaskControlBlock,
 118:Core/Src/main.c ****     .cb_size = sizeof(FuelCellTaskControlBlock),
 119:Core/Src/main.c ****     .stack_mem = &FuelCellTaskBuffer[0],
ARM GAS  /tmp/cccn0NVy.s 			page 8


 120:Core/Src/main.c ****     .stack_size = sizeof(FuelCellTaskBuffer),
 121:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal3,
 122:Core/Src/main.c **** };
 123:Core/Src/main.c **** /* Definitions for canMsgOkSem */
 124:Core/Src/main.c **** osSemaphoreId_t canMsgOkSemHandle;
 125:Core/Src/main.c **** const osSemaphoreAttr_t canMsgOkSem_attributes = {
 126:Core/Src/main.c ****     .name = "canMsgOkSem"};
 127:Core/Src/main.c **** /* USER CODE BEGIN PV */
 128:Core/Src/main.c **** uint8_t fc_state = FUEL_CELL_OFF_STATE;
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** ACCELEROMETER accData;
 131:Core/Src/main.c **** CANBUS canData;
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** CAN_TxHeaderTypeDef TxHeader, TxHeaderFuelCellTask;
 134:Core/Src/main.c **** CAN_RxHeaderTypeDef RxHeader;
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** uint32_t TxMailbox, TxMailboxFuelCellTask;
 137:Core/Src/main.c **** uint8_t TxData[8];
 138:Core/Src/main.c **** uint8_t RxData[8];
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** uint32_t button_debounce;
 141:Core/Src/main.c **** /* USER CODE END PV */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 144:Core/Src/main.c **** void SystemClock_Config(void);
 145:Core/Src/main.c **** static void MX_GPIO_Init(void);
 146:Core/Src/main.c **** static void MX_CAN1_Init(void);
 147:Core/Src/main.c **** static void MX_I2C1_Init(void);
 148:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
 149:Core/Src/main.c **** void StartCanTask(void *argument);
 150:Core/Src/main.c **** void StartI2cTask(void *argument);
 151:Core/Src/main.c **** void StartFuelCellTask(void *argument);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 154:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 155:Core/Src/main.c **** {
 276              		.loc 1 155 1
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 8
 279              		@ frame_needed = 1, uses_anonymous_args = 0
 280 0000 80B5     		push	{r7, lr}
 281              	.LCFI0:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 0002 82B0     		sub	sp, sp, #8
 286              	.LCFI1:
 287              		.cfi_def_cfa_offset 16
 288 0004 00AF     		add	r7, sp, #0
 289              	.LCFI2:
 290              		.cfi_def_cfa_register 7
 291 0006 7860     		str	r0, [r7, #4]
 156:Core/Src/main.c ****   HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 292              		.loc 1 156 3
 293 0008 044B     		ldr	r3, .L2
 294 000a 054A     		ldr	r2, .L2+4
 295 000c 0021     		movs	r1, #0
ARM GAS  /tmp/cccn0NVy.s 			page 9


 296 000e 7868     		ldr	r0, [r7, #4]
 297 0010 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 157:Core/Src/main.c **** }
 298              		.loc 1 157 1
 299 0014 00BF     		nop
 300 0016 0837     		adds	r7, r7, #8
 301              	.LCFI3:
 302              		.cfi_def_cfa_offset 8
 303 0018 BD46     		mov	sp, r7
 304              	.LCFI4:
 305              		.cfi_def_cfa_register 13
 306              		@ sp needed
 307 001a 80BD     		pop	{r7, pc}
 308              	.L3:
 309              		.align	2
 310              	.L2:
 311 001c 00000000 		.word	RxData
 312 0020 00000000 		.word	RxHeader
 313              		.cfi_endproc
 314              	.LFE136:
 316              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 317              		.align	1
 318              		.global	HAL_CAN_TxMailbox0CompleteCallback
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	HAL_CAN_TxMailbox0CompleteCallback:
 324              	.LFB137:
 158:Core/Src/main.c **** 
 159:Core/Src/main.c **** /* Transmit Completed Callbacks for Message Sent Confirmations */
 160:Core/Src/main.c **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 161:Core/Src/main.c **** {
 325              		.loc 1 161 1
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 8
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 0000 80B5     		push	{r7, lr}
 330              	.LCFI5:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 7, -8
 333              		.cfi_offset 14, -4
 334 0002 82B0     		sub	sp, sp, #8
 335              	.LCFI6:
 336              		.cfi_def_cfa_offset 16
 337 0004 00AF     		add	r7, sp, #0
 338              	.LCFI7:
 339              		.cfi_def_cfa_register 7
 340 0006 7860     		str	r0, [r7, #4]
 162:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX0)
 341              		.loc 1 162 29
 342 0008 074B     		ldr	r3, .L7
 343 000a 1B68     		ldr	r3, [r3]
 344              		.loc 1 162 6
 345 000c 012B     		cmp	r3, #1
 346 000e 07D1     		bne	.L6
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
ARM GAS  /tmp/cccn0NVy.s 			page 10


 347              		.loc 1 164 27
 348 0010 054B     		ldr	r3, .L7
 349 0012 0022     		movs	r2, #0
 350 0014 1A60     		str	r2, [r3]
 165:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 351              		.loc 1 165 5
 352 0016 054B     		ldr	r3, .L7+4
 353 0018 1B68     		ldr	r3, [r3]
 354 001a 1846     		mov	r0, r3
 355 001c FFF7FEFF 		bl	osSemaphoreRelease
 356              	.L6:
 166:Core/Src/main.c ****   }
 167:Core/Src/main.c **** }
 357              		.loc 1 167 1
 358 0020 00BF     		nop
 359 0022 0837     		adds	r7, r7, #8
 360              	.LCFI8:
 361              		.cfi_def_cfa_offset 8
 362 0024 BD46     		mov	sp, r7
 363              	.LCFI9:
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 0026 80BD     		pop	{r7, pc}
 367              	.L8:
 368              		.align	2
 369              	.L7:
 370 0028 00000000 		.word	TxMailboxFuelCellTask
 371 002c 00000000 		.word	canMsgOkSemHandle
 372              		.cfi_endproc
 373              	.LFE137:
 375              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 376              		.align	1
 377              		.global	HAL_CAN_TxMailbox1CompleteCallback
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 382              	HAL_CAN_TxMailbox1CompleteCallback:
 383              	.LFB138:
 168:Core/Src/main.c **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 169:Core/Src/main.c **** {
 384              		.loc 1 169 1
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0000 80B5     		push	{r7, lr}
 389              	.LCFI10:
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 82B0     		sub	sp, sp, #8
 394              	.LCFI11:
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              	.LCFI12:
 398              		.cfi_def_cfa_register 7
 399 0006 7860     		str	r0, [r7, #4]
 170:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX1)
ARM GAS  /tmp/cccn0NVy.s 			page 11


 400              		.loc 1 170 29
 401 0008 074B     		ldr	r3, .L12
 402 000a 1B68     		ldr	r3, [r3]
 403              		.loc 1 170 6
 404 000c 022B     		cmp	r3, #2
 405 000e 07D1     		bne	.L11
 171:Core/Src/main.c ****   {
 172:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 406              		.loc 1 172 27
 407 0010 054B     		ldr	r3, .L12
 408 0012 0022     		movs	r2, #0
 409 0014 1A60     		str	r2, [r3]
 173:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 410              		.loc 1 173 5
 411 0016 054B     		ldr	r3, .L12+4
 412 0018 1B68     		ldr	r3, [r3]
 413 001a 1846     		mov	r0, r3
 414 001c FFF7FEFF 		bl	osSemaphoreRelease
 415              	.L11:
 174:Core/Src/main.c ****   }
 175:Core/Src/main.c **** }
 416              		.loc 1 175 1
 417 0020 00BF     		nop
 418 0022 0837     		adds	r7, r7, #8
 419              	.LCFI13:
 420              		.cfi_def_cfa_offset 8
 421 0024 BD46     		mov	sp, r7
 422              	.LCFI14:
 423              		.cfi_def_cfa_register 13
 424              		@ sp needed
 425 0026 80BD     		pop	{r7, pc}
 426              	.L13:
 427              		.align	2
 428              	.L12:
 429 0028 00000000 		.word	TxMailboxFuelCellTask
 430 002c 00000000 		.word	canMsgOkSemHandle
 431              		.cfi_endproc
 432              	.LFE138:
 434              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 435              		.align	1
 436              		.global	HAL_CAN_TxMailbox2CompleteCallback
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 441              	HAL_CAN_TxMailbox2CompleteCallback:
 442              	.LFB139:
 176:Core/Src/main.c **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 177:Core/Src/main.c **** {
 443              		.loc 1 177 1
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 0000 80B5     		push	{r7, lr}
 448              	.LCFI15:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
ARM GAS  /tmp/cccn0NVy.s 			page 12


 452 0002 82B0     		sub	sp, sp, #8
 453              	.LCFI16:
 454              		.cfi_def_cfa_offset 16
 455 0004 00AF     		add	r7, sp, #0
 456              	.LCFI17:
 457              		.cfi_def_cfa_register 7
 458 0006 7860     		str	r0, [r7, #4]
 178:Core/Src/main.c ****   if (TxMailboxFuelCellTask == CAN_TX_MAILBOX2)
 459              		.loc 1 178 29
 460 0008 074B     		ldr	r3, .L17
 461 000a 1B68     		ldr	r3, [r3]
 462              		.loc 1 178 6
 463 000c 042B     		cmp	r3, #4
 464 000e 07D1     		bne	.L16
 179:Core/Src/main.c ****   {
 180:Core/Src/main.c ****     TxMailboxFuelCellTask = CAN_TX_MAILBOX_NONE;
 465              		.loc 1 180 27
 466 0010 054B     		ldr	r3, .L17
 467 0012 0022     		movs	r2, #0
 468 0014 1A60     		str	r2, [r3]
 181:Core/Src/main.c ****     osSemaphoreRelease(canMsgOkSemHandle);
 469              		.loc 1 181 5
 470 0016 054B     		ldr	r3, .L17+4
 471 0018 1B68     		ldr	r3, [r3]
 472 001a 1846     		mov	r0, r3
 473 001c FFF7FEFF 		bl	osSemaphoreRelease
 474              	.L16:
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** }
 475              		.loc 1 183 1
 476 0020 00BF     		nop
 477 0022 0837     		adds	r7, r7, #8
 478              	.LCFI18:
 479              		.cfi_def_cfa_offset 8
 480 0024 BD46     		mov	sp, r7
 481              	.LCFI19:
 482              		.cfi_def_cfa_register 13
 483              		@ sp needed
 484 0026 80BD     		pop	{r7, pc}
 485              	.L18:
 486              		.align	2
 487              	.L17:
 488 0028 00000000 		.word	TxMailboxFuelCellTask
 489 002c 00000000 		.word	canMsgOkSemHandle
 490              		.cfi_endproc
 491              	.LFE139:
 493              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 494              		.align	1
 495              		.global	HAL_GPIO_EXTI_Callback
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 500              	HAL_GPIO_EXTI_Callback:
 501              	.LFB140:
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 186:Core/Src/main.c **** {
ARM GAS  /tmp/cccn0NVy.s 			page 13


 502              		.loc 1 186 1
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506 0000 80B5     		push	{r7, lr}
 507              	.LCFI20:
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 82B0     		sub	sp, sp, #8
 512              	.LCFI21:
 513              		.cfi_def_cfa_offset 16
 514 0004 00AF     		add	r7, sp, #0
 515              	.LCFI22:
 516              		.cfi_def_cfa_register 7
 517 0006 0346     		mov	r3, r0
 518 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 187:Core/Src/main.c ****   switch (GPIO_Pin)
 519              		.loc 1 187 3
 520 000a FB88     		ldrh	r3, [r7, #6]
 521 000c B3F5004F 		cmp	r3, #32768
 522 0010 45D0     		beq	.L32
 523 0012 B3F5004F 		cmp	r3, #32768
 524 0016 44DC     		bgt	.L33
 525 0018 B3F5804F 		cmp	r3, #16384
 526 001c 0FD0     		beq	.L22
 527 001e B3F5804F 		cmp	r3, #16384
 528 0022 3EDC     		bgt	.L33
 529 0024 402B     		cmp	r3, #64
 530 0026 36D0     		beq	.L23
 531 0028 402B     		cmp	r3, #64
 532 002a 3ADC     		bgt	.L33
 533 002c 202B     		cmp	r3, #32
 534 002e 3AD0     		beq	.L34
 535 0030 202B     		cmp	r3, #32
 536 0032 36DC     		bgt	.L33
 537 0034 082B     		cmp	r3, #8
 538 0036 20D0     		beq	.L25
 539 0038 102B     		cmp	r3, #16
 540 003a 36D0     		beq	.L35
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****   case BRD_STRT_Pin:
 190:Core/Src/main.c ****     if (HAL_GetTick() - button_debounce > 1000)
 191:Core/Src/main.c ****     {
 192:Core/Src/main.c ****       if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE)) // If 
 193:Core/Src/main.c ****       {
 194:Core/Src/main.c ****         button_debounce = HAL_GetTick();
 195:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 196:Core/Src/main.c ****       }
 197:Core/Src/main.c ****       else
 198:Core/Src/main.c ****       {
 199:Core/Src/main.c ****         HAL_GetTick();
 200:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 201:Core/Src/main.c ****       }
 202:Core/Src/main.c ****     }
 203:Core/Src/main.c ****     break;
 204:Core/Src/main.c ****   case BRD_PRGE_Pin:
ARM GAS  /tmp/cccn0NVy.s 			page 14


 205:Core/Src/main.c ****     /* Do something */
 206:Core/Src/main.c ****     break;
 207:Core/Src/main.c ****   case EXT_STRT_Pin:
 208:Core/Src/main.c ****     if (fc_state & (FUEL_CELL_STRTUP_STATE | FUEL_CELL_CHRGE_STATE | FUEL_CELL_RUN_STATE))
 209:Core/Src/main.c ****     {
 210:Core/Src/main.c ****       fc_state = FUEL_CELL_OFF_STATE;
 211:Core/Src/main.c ****     }
 212:Core/Src/main.c ****     else
 213:Core/Src/main.c ****     {
 214:Core/Src/main.c ****       fc_state = FUEL_CELL_STRTUP_STATE;
 215:Core/Src/main.c ****     }
 216:Core/Src/main.c ****     break;
 217:Core/Src/main.c ****   case ACC_INT1_Pin:
 218:Core/Src/main.c ****     /* Do something */
 219:Core/Src/main.c ****     break;
 220:Core/Src/main.c ****   case ACC_INT2_Pin:
 221:Core/Src/main.c ****     /* Do something */
 222:Core/Src/main.c ****     break;
 223:Core/Src/main.c ****   case EXT_STOP_Pin:
 224:Core/Src/main.c ****     /* Do something */
 225:Core/Src/main.c ****     fc_state = FUEL_CELL_OFF_STATE;
 226:Core/Src/main.c ****     break;
 227:Core/Src/main.c ****   default:
 228:Core/Src/main.c ****     /* Should never happen */
 229:Core/Src/main.c ****     break;
 541              		.loc 1 229 5
 542 003c 31E0     		b	.L33
 543              	.L22:
 190:Core/Src/main.c ****     {
 544              		.loc 1 190 9
 545 003e FFF7FEFF 		bl	HAL_GetTick
 546 0042 0246     		mov	r2, r0
 190:Core/Src/main.c ****     {
 547              		.loc 1 190 23
 548 0044 1C4B     		ldr	r3, .L38
 549 0046 1B68     		ldr	r3, [r3]
 550 0048 D31A     		subs	r3, r2, r3
 190:Core/Src/main.c ****     {
 551              		.loc 1 190 8
 552 004a B3F57A7F 		cmp	r3, #1000
 553 004e 2ED9     		bls	.L36
 192:Core/Src/main.c ****       {
 554              		.loc 1 192 20
 555 0050 1A4B     		ldr	r3, .L38+4
 556 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 557 0054 03F00703 		and	r3, r3, #7
 192:Core/Src/main.c ****       {
 558              		.loc 1 192 10
 559 0058 002B     		cmp	r3, #0
 560 005a 08D0     		beq	.L28
 194:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 561              		.loc 1 194 27
 562 005c FFF7FEFF 		bl	HAL_GetTick
 563 0060 0346     		mov	r3, r0
 194:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 564              		.loc 1 194 25
 565 0062 154A     		ldr	r2, .L38
ARM GAS  /tmp/cccn0NVy.s 			page 15


 566 0064 1360     		str	r3, [r2]
 195:Core/Src/main.c ****       }
 567              		.loc 1 195 18
 568 0066 154B     		ldr	r3, .L38+4
 569 0068 0022     		movs	r2, #0
 570 006a 1A70     		strb	r2, [r3]
 203:Core/Src/main.c ****   case BRD_PRGE_Pin:
 571              		.loc 1 203 5
 572 006c 1FE0     		b	.L36
 573              	.L28:
 199:Core/Src/main.c ****         fc_state = FUEL_CELL_STRTUP_STATE;
 574              		.loc 1 199 9
 575 006e FFF7FEFF 		bl	HAL_GetTick
 200:Core/Src/main.c ****       }
 576              		.loc 1 200 18
 577 0072 124B     		ldr	r3, .L38+4
 578 0074 0122     		movs	r2, #1
 579 0076 1A70     		strb	r2, [r3]
 203:Core/Src/main.c ****   case BRD_PRGE_Pin:
 580              		.loc 1 203 5
 581 0078 19E0     		b	.L36
 582              	.L25:
 208:Core/Src/main.c ****     {
 583              		.loc 1 208 18
 584 007a 104B     		ldr	r3, .L38+4
 585 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 007e 03F00703 		and	r3, r3, #7
 208:Core/Src/main.c ****     {
 587              		.loc 1 208 8
 588 0082 002B     		cmp	r3, #0
 589 0084 03D0     		beq	.L30
 210:Core/Src/main.c ****     }
 590              		.loc 1 210 16
 591 0086 0D4B     		ldr	r3, .L38+4
 592 0088 0022     		movs	r2, #0
 593 008a 1A70     		strb	r2, [r3]
 216:Core/Src/main.c ****   case ACC_INT1_Pin:
 594              		.loc 1 216 5
 595 008c 10E0     		b	.L29
 596              	.L30:
 214:Core/Src/main.c ****     }
 597              		.loc 1 214 16
 598 008e 0B4B     		ldr	r3, .L38+4
 599 0090 0122     		movs	r2, #1
 600 0092 1A70     		strb	r2, [r3]
 216:Core/Src/main.c ****   case ACC_INT1_Pin:
 601              		.loc 1 216 5
 602 0094 0CE0     		b	.L29
 603              	.L23:
 225:Core/Src/main.c ****     break;
 604              		.loc 1 225 14
 605 0096 094B     		ldr	r3, .L38+4
 606 0098 0022     		movs	r2, #0
 607 009a 1A70     		strb	r2, [r3]
 226:Core/Src/main.c ****   default:
 608              		.loc 1 226 5
 609 009c 08E0     		b	.L29
ARM GAS  /tmp/cccn0NVy.s 			page 16


 610              	.L32:
 206:Core/Src/main.c ****   case EXT_STRT_Pin:
 611              		.loc 1 206 5
 612 009e 00BF     		nop
 613 00a0 06E0     		b	.L37
 614              	.L33:
 615              		.loc 1 229 5
 616 00a2 00BF     		nop
 617 00a4 04E0     		b	.L37
 618              	.L34:
 222:Core/Src/main.c ****   case EXT_STOP_Pin:
 619              		.loc 1 222 5
 620 00a6 00BF     		nop
 621 00a8 02E0     		b	.L37
 622              	.L35:
 219:Core/Src/main.c ****   case ACC_INT2_Pin:
 623              		.loc 1 219 5
 624 00aa 00BF     		nop
 625 00ac 00E0     		b	.L37
 626              	.L36:
 203:Core/Src/main.c ****   case BRD_PRGE_Pin:
 627              		.loc 1 203 5
 628 00ae 00BF     		nop
 629              	.L29:
 630              	.L37:
 230:Core/Src/main.c ****   }
 231:Core/Src/main.c **** }
 631              		.loc 1 231 1
 632 00b0 00BF     		nop
 633 00b2 0837     		adds	r7, r7, #8
 634              	.LCFI23:
 635              		.cfi_def_cfa_offset 8
 636 00b4 BD46     		mov	sp, r7
 637              	.LCFI24:
 638              		.cfi_def_cfa_register 13
 639              		@ sp needed
 640 00b6 80BD     		pop	{r7, pc}
 641              	.L39:
 642              		.align	2
 643              	.L38:
 644 00b8 00000000 		.word	button_debounce
 645 00bc 00000000 		.word	fc_state
 646              		.cfi_endproc
 647              	.LFE140:
 649              		.section	.text.main,"ax",%progbits
 650              		.align	1
 651              		.global	main
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 656              	main:
 657              	.LFB141:
 232:Core/Src/main.c **** /* USER CODE END PFP */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 235:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 236:Core/Src/main.c **** 
ARM GAS  /tmp/cccn0NVy.s 			page 17


 237:Core/Src/main.c **** /* USER CODE END 0 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** /**
 240:Core/Src/main.c ****  * @brief  The application entry point.
 241:Core/Src/main.c ****  * @retval int
 242:Core/Src/main.c ****  */
 243:Core/Src/main.c **** int main(void)
 244:Core/Src/main.c **** {
 658              		.loc 1 244 1
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 1, uses_anonymous_args = 0
 662 0000 80B5     		push	{r7, lr}
 663              	.LCFI25:
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 00AF     		add	r7, sp, #0
 668              	.LCFI26:
 669              		.cfi_def_cfa_register 7
 245:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END 1 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 252:Core/Src/main.c ****   HAL_Init();
 670              		.loc 1 252 3
 671 0004 FFF7FEFF 		bl	HAL_Init
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END Init */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* Configure the system clock */
 259:Core/Src/main.c ****   SystemClock_Config();
 672              		.loc 1 259 3
 673 0008 FFF7FEFF 		bl	SystemClock_Config
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****   /* USER CODE END SysInit */
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /* Initialize all configured peripherals */
 266:Core/Src/main.c ****   MX_GPIO_Init();
 674              		.loc 1 266 3
 675 000c FFF7FEFF 		bl	MX_GPIO_Init
 267:Core/Src/main.c ****   MX_CAN1_Init();
 676              		.loc 1 267 3
 677 0010 FFF7FEFF 		bl	MX_CAN1_Init
 268:Core/Src/main.c ****   MX_I2C1_Init();
 678              		.loc 1 268 3
 679 0014 FFF7FEFF 		bl	MX_I2C1_Init
 269:Core/Src/main.c ****   MX_USART1_UART_Init();
 680              		.loc 1 269 3
 681 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
ARM GAS  /tmp/cccn0NVy.s 			page 18


 270:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 271:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 682              		.loc 1 271 3
 683 001c 2048     		ldr	r0, .L44
 684 001e FFF7FEFF 		bl	HAL_CAN_Start
 272:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 685              		.loc 1 272 3
 686 0022 0221     		movs	r1, #2
 687 0024 1E48     		ldr	r0, .L44
 688 0026 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 273:Core/Src/main.c ****   HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 689              		.loc 1 273 3
 690 002a 0121     		movs	r1, #1
 691 002c 1C48     		ldr	r0, .L44
 692 002e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   button_debounce = HAL_GetTick();
 693              		.loc 1 275 21
 694 0032 FFF7FEFF 		bl	HAL_GetTick
 695 0036 0346     		mov	r3, r0
 696              		.loc 1 275 19
 697 0038 1A4A     		ldr	r2, .L44+4
 698 003a 1360     		str	r3, [r2]
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END 2 */
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /* Init scheduler */
 280:Core/Src/main.c ****   osKernelInitialize();
 699              		.loc 1 280 3
 700 003c FFF7FEFF 		bl	osKernelInitialize
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 283:Core/Src/main.c ****   /* add mutexes, ... */
 284:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* Create the semaphores(s) */
 287:Core/Src/main.c ****   /* creation of canMsgOkSem */
 288:Core/Src/main.c ****   canMsgOkSemHandle = osSemaphoreNew(1, 0, &canMsgOkSem_attributes);
 701              		.loc 1 288 23
 702 0040 194A     		ldr	r2, .L44+8
 703 0042 0021     		movs	r1, #0
 704 0044 0120     		movs	r0, #1
 705 0046 FFF7FEFF 		bl	osSemaphoreNew
 706 004a 0346     		mov	r3, r0
 707              		.loc 1 288 21
 708 004c 174A     		ldr	r2, .L44+12
 709 004e 1360     		str	r3, [r2]
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 291:Core/Src/main.c ****   /* add semaphores, ... */
 292:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 295:Core/Src/main.c ****   /* start timers, add new ones, ... */
 296:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
ARM GAS  /tmp/cccn0NVy.s 			page 19


 299:Core/Src/main.c ****   /* add queues, ... */
 300:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* Create the thread(s) */
 303:Core/Src/main.c ****   /* creation of CanTask */
 304:Core/Src/main.c ****   CanTaskHandle = osThreadNew(StartCanTask, NULL, &CanTask_attributes);
 710              		.loc 1 304 19
 711 0050 174A     		ldr	r2, .L44+16
 712 0052 0021     		movs	r1, #0
 713 0054 1748     		ldr	r0, .L44+20
 714 0056 FFF7FEFF 		bl	osThreadNew
 715 005a 0346     		mov	r3, r0
 716              		.loc 1 304 17
 717 005c 164A     		ldr	r2, .L44+24
 718 005e 1360     		str	r3, [r2]
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* creation of I2cTask */
 307:Core/Src/main.c ****   I2cTaskHandle = osThreadNew(StartI2cTask, NULL, &I2cTask_attributes);
 719              		.loc 1 307 19
 720 0060 164A     		ldr	r2, .L44+28
 721 0062 0021     		movs	r1, #0
 722 0064 1648     		ldr	r0, .L44+32
 723 0066 FFF7FEFF 		bl	osThreadNew
 724 006a 0346     		mov	r3, r0
 725              		.loc 1 307 17
 726 006c 154A     		ldr	r2, .L44+36
 727 006e 1360     		str	r3, [r2]
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* creation of FuelCellTask */
 310:Core/Src/main.c ****   FuelCellTaskHandle = osThreadNew(StartFuelCellTask, NULL, &FuelCellTask_attributes);
 728              		.loc 1 310 24
 729 0070 154A     		ldr	r2, .L44+40
 730 0072 0021     		movs	r1, #0
 731 0074 1548     		ldr	r0, .L44+44
 732 0076 FFF7FEFF 		bl	osThreadNew
 733 007a 0346     		mov	r3, r0
 734              		.loc 1 310 22
 735 007c 144A     		ldr	r2, .L44+48
 736 007e 1360     		str	r3, [r2]
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 313:Core/Src/main.c ****   if (CanTaskHandle == NULL || I2cTaskHandle == NULL || FuelCellTaskHandle == NULL)
 737              		.loc 1 313 21
 738 0080 0D4B     		ldr	r3, .L44+24
 739 0082 1B68     		ldr	r3, [r3]
 740              		.loc 1 313 6
 741 0084 002B     		cmp	r3, #0
 742 0086 07D0     		beq	.L41
 743              		.loc 1 313 46 discriminator 1
 744 0088 0E4B     		ldr	r3, .L44+36
 745 008a 1B68     		ldr	r3, [r3]
 746              		.loc 1 313 29 discriminator 1
 747 008c 002B     		cmp	r3, #0
 748 008e 03D0     		beq	.L41
 749              		.loc 1 313 76 discriminator 2
 750 0090 0F4B     		ldr	r3, .L44+48
 751 0092 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cccn0NVy.s 			page 20


 752              		.loc 1 313 54 discriminator 2
 753 0094 002B     		cmp	r3, #0
 754 0096 00D1     		bne	.L42
 755              	.L41:
 314:Core/Src/main.c ****   {
 315:Core/Src/main.c ****     while (1)
 756              		.loc 1 315 11 discriminator 1
 757 0098 FEE7     		b	.L41
 758              	.L42:
 316:Core/Src/main.c ****       ;
 317:Core/Src/main.c ****   }
 318:Core/Src/main.c ****   /* add threads, ... */
 319:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 322:Core/Src/main.c ****   /* add events, ... */
 323:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* Start scheduler */
 326:Core/Src/main.c ****   osKernelStart();
 759              		.loc 1 326 3
 760 009a FFF7FEFF 		bl	osKernelStart
 761              	.L43:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 329:Core/Src/main.c ****   /* Infinite loop */
 330:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 331:Core/Src/main.c ****   while (1)
 762              		.loc 1 331 9 discriminator 2
 763 009e FEE7     		b	.L43
 764              	.L45:
 765              		.align	2
 766              	.L44:
 767 00a0 00000000 		.word	hcan1
 768 00a4 00000000 		.word	button_debounce
 769 00a8 00000000 		.word	canMsgOkSem_attributes
 770 00ac 00000000 		.word	canMsgOkSemHandle
 771 00b0 00000000 		.word	CanTask_attributes
 772 00b4 00000000 		.word	StartCanTask
 773 00b8 00000000 		.word	CanTaskHandle
 774 00bc 00000000 		.word	I2cTask_attributes
 775 00c0 00000000 		.word	StartI2cTask
 776 00c4 00000000 		.word	I2cTaskHandle
 777 00c8 00000000 		.word	FuelCellTask_attributes
 778 00cc 00000000 		.word	StartFuelCellTask
 779 00d0 00000000 		.word	FuelCellTaskHandle
 780              		.cfi_endproc
 781              	.LFE141:
 783              		.section	.text.SystemClock_Config,"ax",%progbits
 784              		.align	1
 785              		.global	SystemClock_Config
 786              		.syntax unified
 787              		.thumb
 788              		.thumb_func
 790              	SystemClock_Config:
 791              	.LFB142:
 332:Core/Src/main.c ****   {
ARM GAS  /tmp/cccn0NVy.s 			page 21


 333:Core/Src/main.c ****     /* USER CODE END WHILE */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 336:Core/Src/main.c ****   }
 337:Core/Src/main.c ****   /* USER CODE END 3 */
 338:Core/Src/main.c **** }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****  * @brief System Clock Configuration
 342:Core/Src/main.c ****  * @retval None
 343:Core/Src/main.c ****  */
 344:Core/Src/main.c **** void SystemClock_Config(void)
 345:Core/Src/main.c **** {
 792              		.loc 1 345 1
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 88
 795              		@ frame_needed = 1, uses_anonymous_args = 0
 796 0000 80B5     		push	{r7, lr}
 797              	.LCFI27:
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 7, -8
 800              		.cfi_offset 14, -4
 801 0002 96B0     		sub	sp, sp, #88
 802              	.LCFI28:
 803              		.cfi_def_cfa_offset 96
 804 0004 00AF     		add	r7, sp, #0
 805              	.LCFI29:
 806              		.cfi_def_cfa_register 7
 346:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 807              		.loc 1 346 22
 808 0006 07F11403 		add	r3, r7, #20
 809 000a 4422     		movs	r2, #68
 810 000c 0021     		movs	r1, #0
 811 000e 1846     		mov	r0, r3
 812 0010 FFF7FEFF 		bl	memset
 347:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 813              		.loc 1 347 22
 814 0014 3B46     		mov	r3, r7
 815 0016 0022     		movs	r2, #0
 816 0018 1A60     		str	r2, [r3]
 817 001a 5A60     		str	r2, [r3, #4]
 818 001c 9A60     		str	r2, [r3, #8]
 819 001e DA60     		str	r2, [r3, #12]
 820 0020 1A61     		str	r2, [r3, #16]
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 350:Core/Src/main.c ****    */
 351:Core/Src/main.c ****   if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 821              		.loc 1 351 7
 822 0022 4FF40070 		mov	r0, #512
 823 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 824 002a 0346     		mov	r3, r0
 825              		.loc 1 351 6
 826 002c 002B     		cmp	r3, #0
 827 002e 01D0     		beq	.L47
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/cccn0NVy.s 			page 22


 828              		.loc 1 353 5
 829 0030 FFF7FEFF 		bl	Error_Handler
 830              	.L47:
 354:Core/Src/main.c ****   }
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 357:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 358:Core/Src/main.c ****    */
 359:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 831              		.loc 1 359 36
 832 0034 0123     		movs	r3, #1
 833 0036 7B61     		str	r3, [r7, #20]
 360:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 834              		.loc 1 360 30
 835 0038 4FF4A023 		mov	r3, #327680
 836 003c BB61     		str	r3, [r7, #24]
 361:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 837              		.loc 1 361 34
 838 003e 0223     		movs	r3, #2
 839 0040 FB63     		str	r3, [r7, #60]
 362:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 840              		.loc 1 362 35
 841 0042 0323     		movs	r3, #3
 842 0044 3B64     		str	r3, [r7, #64]
 363:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 1;
 843              		.loc 1 363 30
 844 0046 0123     		movs	r3, #1
 845 0048 7B64     		str	r3, [r7, #68]
 364:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
 846              		.loc 1 364 30
 847 004a 1423     		movs	r3, #20
 848 004c BB64     		str	r3, [r7, #72]
 365:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 849              		.loc 1 365 30
 850 004e 0723     		movs	r3, #7
 851 0050 FB64     		str	r3, [r7, #76]
 366:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 852              		.loc 1 366 30
 853 0052 0223     		movs	r3, #2
 854 0054 3B65     		str	r3, [r7, #80]
 367:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 855              		.loc 1 367 30
 856 0056 0223     		movs	r3, #2
 857 0058 7B65     		str	r3, [r7, #84]
 368:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 858              		.loc 1 368 7
 859 005a 07F11403 		add	r3, r7, #20
 860 005e 1846     		mov	r0, r3
 861 0060 FFF7FEFF 		bl	HAL_RCC_OscConfig
 862 0064 0346     		mov	r3, r0
 863              		.loc 1 368 6
 864 0066 002B     		cmp	r3, #0
 865 0068 01D0     		beq	.L48
 369:Core/Src/main.c ****   {
 370:Core/Src/main.c ****     Error_Handler();
 866              		.loc 1 370 5
 867 006a FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cccn0NVy.s 			page 23


 868              	.L48:
 371:Core/Src/main.c ****   }
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 374:Core/Src/main.c ****    */
 375:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 869              		.loc 1 375 31
 870 006e 0F23     		movs	r3, #15
 871 0070 3B60     		str	r3, [r7]
 376:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 872              		.loc 1 376 34
 873 0072 0323     		movs	r3, #3
 874 0074 7B60     		str	r3, [r7, #4]
 377:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 875              		.loc 1 377 35
 876 0076 0023     		movs	r3, #0
 877 0078 BB60     		str	r3, [r7, #8]
 378:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 878              		.loc 1 378 36
 879 007a 0023     		movs	r3, #0
 880 007c FB60     		str	r3, [r7, #12]
 379:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 881              		.loc 1 379 36
 882 007e 0023     		movs	r3, #0
 883 0080 3B61     		str	r3, [r7, #16]
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 884              		.loc 1 381 7
 885 0082 3B46     		mov	r3, r7
 886 0084 0421     		movs	r1, #4
 887 0086 1846     		mov	r0, r3
 888 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 889 008c 0346     		mov	r3, r0
 890              		.loc 1 381 6
 891 008e 002B     		cmp	r3, #0
 892 0090 01D0     		beq	.L49
 382:Core/Src/main.c ****   {
 383:Core/Src/main.c ****     Error_Handler();
 893              		.loc 1 383 5
 894 0092 FFF7FEFF 		bl	Error_Handler
 895              	.L49:
 384:Core/Src/main.c ****   }
 385:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);
 896              		.loc 1 385 3
 897 0096 4FF04052 		mov	r2, #805306368
 898 009a 4FF08061 		mov	r1, #67108864
 899 009e 0020     		movs	r0, #0
 900 00a0 FFF7FEFF 		bl	HAL_RCC_MCOConfig
 386:Core/Src/main.c **** }
 901              		.loc 1 386 1
 902 00a4 00BF     		nop
 903 00a6 5837     		adds	r7, r7, #88
 904              	.LCFI30:
 905              		.cfi_def_cfa_offset 8
 906 00a8 BD46     		mov	sp, r7
 907              	.LCFI31:
 908              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cccn0NVy.s 			page 24


 909              		@ sp needed
 910 00aa 80BD     		pop	{r7, pc}
 911              		.cfi_endproc
 912              	.LFE142:
 914              		.section	.text.MX_CAN1_Init,"ax",%progbits
 915              		.align	1
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	MX_CAN1_Init:
 921              	.LFB143:
 387:Core/Src/main.c **** 
 388:Core/Src/main.c **** /**
 389:Core/Src/main.c ****  * @brief CAN1 Initialization Function
 390:Core/Src/main.c ****  * @param None
 391:Core/Src/main.c ****  * @retval None
 392:Core/Src/main.c ****  */
 393:Core/Src/main.c **** static void MX_CAN1_Init(void)
 394:Core/Src/main.c **** {
 922              		.loc 1 394 1
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 40
 925              		@ frame_needed = 1, uses_anonymous_args = 0
 926 0000 80B5     		push	{r7, lr}
 927              	.LCFI32:
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 7, -8
 930              		.cfi_offset 14, -4
 931 0002 8AB0     		sub	sp, sp, #40
 932              	.LCFI33:
 933              		.cfi_def_cfa_offset 48
 934 0004 00AF     		add	r7, sp, #0
 935              	.LCFI34:
 936              		.cfi_def_cfa_register 7
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 403:Core/Src/main.c ****   hcan1.Instance = CAN1;
 937              		.loc 1 403 18
 938 0006 284B     		ldr	r3, .L54
 939 0008 284A     		ldr	r2, .L54+4
 940 000a 1A60     		str	r2, [r3]
 404:Core/Src/main.c ****   hcan1.Init.Prescaler = 16;
 941              		.loc 1 404 24
 942 000c 264B     		ldr	r3, .L54
 943 000e 1022     		movs	r2, #16
 944 0010 5A60     		str	r2, [r3, #4]
 405:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 945              		.loc 1 405 19
 946 0012 254B     		ldr	r3, .L54
 947 0014 4FF08042 		mov	r2, #1073741824
 948 0018 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/cccn0NVy.s 			page 25


 406:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 949              		.loc 1 406 28
 950 001a 234B     		ldr	r3, .L54
 951 001c 0022     		movs	r2, #0
 952 001e DA60     		str	r2, [r3, #12]
 407:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 953              		.loc 1 407 23
 954 0020 214B     		ldr	r3, .L54
 955 0022 4FF40032 		mov	r2, #131072
 956 0026 1A61     		str	r2, [r3, #16]
 408:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 957              		.loc 1 408 23
 958 0028 1F4B     		ldr	r3, .L54
 959 002a 0022     		movs	r2, #0
 960 002c 5A61     		str	r2, [r3, #20]
 409:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 961              		.loc 1 409 32
 962 002e 1E4B     		ldr	r3, .L54
 963 0030 0022     		movs	r2, #0
 964 0032 1A76     		strb	r2, [r3, #24]
 410:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 965              		.loc 1 410 25
 966 0034 1C4B     		ldr	r3, .L54
 967 0036 0022     		movs	r2, #0
 968 0038 5A76     		strb	r2, [r3, #25]
 411:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 969              		.loc 1 411 25
 970 003a 1B4B     		ldr	r3, .L54
 971 003c 0022     		movs	r2, #0
 972 003e 9A76     		strb	r2, [r3, #26]
 412:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 973              		.loc 1 412 33
 974 0040 194B     		ldr	r3, .L54
 975 0042 0022     		movs	r2, #0
 976 0044 DA76     		strb	r2, [r3, #27]
 413:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 977              		.loc 1 413 32
 978 0046 184B     		ldr	r3, .L54
 979 0048 0022     		movs	r2, #0
 980 004a 1A77     		strb	r2, [r3, #28]
 414:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 981              		.loc 1 414 35
 982 004c 164B     		ldr	r3, .L54
 983 004e 0022     		movs	r2, #0
 984 0050 5A77     		strb	r2, [r3, #29]
 415:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 985              		.loc 1 415 7
 986 0052 1548     		ldr	r0, .L54
 987 0054 FFF7FEFF 		bl	HAL_CAN_Init
 988 0058 0346     		mov	r3, r0
 989              		.loc 1 415 6
 990 005a 002B     		cmp	r3, #0
 991 005c 01D0     		beq	.L51
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 992              		.loc 1 417 5
 993 005e FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cccn0NVy.s 			page 26


 994              	.L51:
 418:Core/Src/main.c ****   }
 419:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 420:Core/Src/main.c ****   CAN_FilterTypeDef sf;
 421:Core/Src/main.c ****   // Accept StdID's 0x100 through 0x1FF
 422:Core/Src/main.c ****   sf.FilterIdHigh = 0x100 << 5;
 995              		.loc 1 422 19
 996 0062 4FF40053 		mov	r3, #8192
 997 0066 3B60     		str	r3, [r7]
 423:Core/Src/main.c ****   sf.FilterMaskIdHigh = 0x700 << 5;
 998              		.loc 1 423 23
 999 0068 4FF46043 		mov	r3, #57344
 1000 006c BB60     		str	r3, [r7, #8]
 424:Core/Src/main.c ****   sf.FilterIdLow = 0x0000;
 1001              		.loc 1 424 18
 1002 006e 0023     		movs	r3, #0
 1003 0070 7B60     		str	r3, [r7, #4]
 425:Core/Src/main.c ****   sf.FilterMaskIdLow = 0x0000;
 1004              		.loc 1 425 22
 1005 0072 0023     		movs	r3, #0
 1006 0074 FB60     		str	r3, [r7, #12]
 426:Core/Src/main.c ****   sf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 1007              		.loc 1 426 27
 1008 0076 0023     		movs	r3, #0
 1009 0078 3B61     		str	r3, [r7, #16]
 427:Core/Src/main.c ****   sf.FilterBank = 0;
 1010              		.loc 1 427 17
 1011 007a 0023     		movs	r3, #0
 1012 007c 7B61     		str	r3, [r7, #20]
 428:Core/Src/main.c ****   sf.FilterMode = CAN_FILTERMODE_IDMASK;
 1013              		.loc 1 428 17
 1014 007e 0023     		movs	r3, #0
 1015 0080 BB61     		str	r3, [r7, #24]
 429:Core/Src/main.c ****   sf.FilterScale = CAN_FILTERSCALE_32BIT;
 1016              		.loc 1 429 18
 1017 0082 0123     		movs	r3, #1
 1018 0084 FB61     		str	r3, [r7, #28]
 430:Core/Src/main.c ****   sf.FilterActivation = CAN_FILTER_ENABLE;
 1019              		.loc 1 430 23
 1020 0086 0123     		movs	r3, #1
 1021 0088 3B62     		str	r3, [r7, #32]
 431:Core/Src/main.c ****   if (HAL_CAN_ConfigFilter(&hcan1, &sf) != HAL_OK)
 1022              		.loc 1 431 7
 1023 008a 3B46     		mov	r3, r7
 1024 008c 1946     		mov	r1, r3
 1025 008e 0648     		ldr	r0, .L54
 1026 0090 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 1027 0094 0346     		mov	r3, r0
 1028              		.loc 1 431 6
 1029 0096 002B     		cmp	r3, #0
 1030 0098 01D0     		beq	.L53
 432:Core/Src/main.c ****   {
 433:Core/Src/main.c ****     Error_Handler();
 1031              		.loc 1 433 5
 1032 009a FFF7FEFF 		bl	Error_Handler
 1033              	.L53:
 434:Core/Src/main.c ****   }
ARM GAS  /tmp/cccn0NVy.s 			page 27


 435:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 436:Core/Src/main.c **** }
 1034              		.loc 1 436 1
 1035 009e 00BF     		nop
 1036 00a0 2837     		adds	r7, r7, #40
 1037              	.LCFI35:
 1038              		.cfi_def_cfa_offset 8
 1039 00a2 BD46     		mov	sp, r7
 1040              	.LCFI36:
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 00a4 80BD     		pop	{r7, pc}
 1044              	.L55:
 1045 00a6 00BF     		.align	2
 1046              	.L54:
 1047 00a8 00000000 		.word	hcan1
 1048 00ac 00640040 		.word	1073767424
 1049              		.cfi_endproc
 1050              	.LFE143:
 1052              		.section	.text.MX_I2C1_Init,"ax",%progbits
 1053              		.align	1
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1058              	MX_I2C1_Init:
 1059              	.LFB144:
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** /**
 439:Core/Src/main.c ****  * @brief I2C1 Initialization Function
 440:Core/Src/main.c ****  * @param None
 441:Core/Src/main.c ****  * @retval None
 442:Core/Src/main.c ****  */
 443:Core/Src/main.c **** static void MX_I2C1_Init(void)
 444:Core/Src/main.c **** {
 1060              		.loc 1 444 1
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 1, uses_anonymous_args = 0
 1064 0000 80B5     		push	{r7, lr}
 1065              	.LCFI37:
 1066              		.cfi_def_cfa_offset 8
 1067              		.cfi_offset 7, -8
 1068              		.cfi_offset 14, -4
 1069 0002 00AF     		add	r7, sp, #0
 1070              	.LCFI38:
 1071              		.cfi_def_cfa_register 7
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 447:Core/Src/main.c **** 
 448:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 451:Core/Src/main.c **** 
 452:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 453:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 1072              		.loc 1 453 18
 1073 0004 1B4B     		ldr	r3, .L61
ARM GAS  /tmp/cccn0NVy.s 			page 28


 1074 0006 1C4A     		ldr	r2, .L61+4
 1075 0008 1A60     		str	r2, [r3]
 454:Core/Src/main.c ****   hi2c1.Init.Timing = 0x10909CEC;
 1076              		.loc 1 454 21
 1077 000a 1A4B     		ldr	r3, .L61
 1078 000c 1B4A     		ldr	r2, .L61+8
 1079 000e 5A60     		str	r2, [r3, #4]
 455:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 1080              		.loc 1 455 26
 1081 0010 184B     		ldr	r3, .L61
 1082 0012 0022     		movs	r2, #0
 1083 0014 9A60     		str	r2, [r3, #8]
 456:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 1084              		.loc 1 456 29
 1085 0016 174B     		ldr	r3, .L61
 1086 0018 0122     		movs	r2, #1
 1087 001a DA60     		str	r2, [r3, #12]
 457:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 1088              		.loc 1 457 30
 1089 001c 154B     		ldr	r3, .L61
 1090 001e 0022     		movs	r2, #0
 1091 0020 1A61     		str	r2, [r3, #16]
 458:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 1092              		.loc 1 458 26
 1093 0022 144B     		ldr	r3, .L61
 1094 0024 0022     		movs	r2, #0
 1095 0026 5A61     		str	r2, [r3, #20]
 459:Core/Src/main.c ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 1096              		.loc 1 459 31
 1097 0028 124B     		ldr	r3, .L61
 1098 002a 0022     		movs	r2, #0
 1099 002c 9A61     		str	r2, [r3, #24]
 460:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 1100              		.loc 1 460 30
 1101 002e 114B     		ldr	r3, .L61
 1102 0030 0022     		movs	r2, #0
 1103 0032 DA61     		str	r2, [r3, #28]
 461:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 1104              		.loc 1 461 28
 1105 0034 0F4B     		ldr	r3, .L61
 1106 0036 0022     		movs	r2, #0
 1107 0038 1A62     		str	r2, [r3, #32]
 462:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 1108              		.loc 1 462 7
 1109 003a 0E48     		ldr	r0, .L61
 1110 003c FFF7FEFF 		bl	HAL_I2C_Init
 1111 0040 0346     		mov	r3, r0
 1112              		.loc 1 462 6
 1113 0042 002B     		cmp	r3, #0
 1114 0044 01D0     		beq	.L57
 463:Core/Src/main.c ****   {
 464:Core/Src/main.c ****     Error_Handler();
 1115              		.loc 1 464 5
 1116 0046 FFF7FEFF 		bl	Error_Handler
 1117              	.L57:
 465:Core/Src/main.c ****   }
 466:Core/Src/main.c **** 
ARM GAS  /tmp/cccn0NVy.s 			page 29


 467:Core/Src/main.c ****   /** Configure Analogue filter
 468:Core/Src/main.c ****    */
 469:Core/Src/main.c ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 1118              		.loc 1 469 7
 1119 004a 0021     		movs	r1, #0
 1120 004c 0948     		ldr	r0, .L61
 1121 004e FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 1122 0052 0346     		mov	r3, r0
 1123              		.loc 1 469 6
 1124 0054 002B     		cmp	r3, #0
 1125 0056 01D0     		beq	.L58
 470:Core/Src/main.c ****   {
 471:Core/Src/main.c ****     Error_Handler();
 1126              		.loc 1 471 5
 1127 0058 FFF7FEFF 		bl	Error_Handler
 1128              	.L58:
 472:Core/Src/main.c ****   }
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /** Configure Digital filter
 475:Core/Src/main.c ****    */
 476:Core/Src/main.c ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 1129              		.loc 1 476 7
 1130 005c 0021     		movs	r1, #0
 1131 005e 0548     		ldr	r0, .L61
 1132 0060 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 1133 0064 0346     		mov	r3, r0
 1134              		.loc 1 476 6
 1135 0066 002B     		cmp	r3, #0
 1136 0068 01D0     		beq	.L60
 477:Core/Src/main.c ****   {
 478:Core/Src/main.c ****     Error_Handler();
 1137              		.loc 1 478 5
 1138 006a FFF7FEFF 		bl	Error_Handler
 1139              	.L60:
 479:Core/Src/main.c ****   }
 480:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 483:Core/Src/main.c **** }
 1140              		.loc 1 483 1
 1141 006e 00BF     		nop
 1142 0070 80BD     		pop	{r7, pc}
 1143              	.L62:
 1144 0072 00BF     		.align	2
 1145              	.L61:
 1146 0074 00000000 		.word	hi2c1
 1147 0078 00540040 		.word	1073763328
 1148 007c EC9C9010 		.word	277912812
 1149              		.cfi_endproc
 1150              	.LFE144:
 1152              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1153              		.align	1
 1154              		.syntax unified
 1155              		.thumb
 1156              		.thumb_func
 1158              	MX_USART1_UART_Init:
 1159              	.LFB145:
ARM GAS  /tmp/cccn0NVy.s 			page 30


 484:Core/Src/main.c **** 
 485:Core/Src/main.c **** /**
 486:Core/Src/main.c ****  * @brief USART1 Initialization Function
 487:Core/Src/main.c ****  * @param None
 488:Core/Src/main.c ****  * @retval None
 489:Core/Src/main.c ****  */
 490:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 491:Core/Src/main.c **** {
 1160              		.loc 1 491 1
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 0
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164 0000 80B5     		push	{r7, lr}
 1165              	.LCFI39:
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 7, -8
 1168              		.cfi_offset 14, -4
 1169 0002 00AF     		add	r7, sp, #0
 1170              	.LCFI40:
 1171              		.cfi_def_cfa_register 7
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 500:Core/Src/main.c ****   huart1.Instance = USART1;
 1172              		.loc 1 500 19
 1173 0004 144B     		ldr	r3, .L66
 1174 0006 154A     		ldr	r2, .L66+4
 1175 0008 1A60     		str	r2, [r3]
 501:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 1176              		.loc 1 501 24
 1177 000a 134B     		ldr	r3, .L66
 1178 000c 4FF4E132 		mov	r2, #115200
 1179 0010 5A60     		str	r2, [r3, #4]
 502:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1180              		.loc 1 502 26
 1181 0012 114B     		ldr	r3, .L66
 1182 0014 0022     		movs	r2, #0
 1183 0016 9A60     		str	r2, [r3, #8]
 503:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1184              		.loc 1 503 24
 1185 0018 0F4B     		ldr	r3, .L66
 1186 001a 0022     		movs	r2, #0
 1187 001c DA60     		str	r2, [r3, #12]
 504:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 1188              		.loc 1 504 22
 1189 001e 0E4B     		ldr	r3, .L66
 1190 0020 0022     		movs	r2, #0
 1191 0022 1A61     		str	r2, [r3, #16]
 505:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1192              		.loc 1 505 20
 1193 0024 0C4B     		ldr	r3, .L66
 1194 0026 0C22     		movs	r2, #12
ARM GAS  /tmp/cccn0NVy.s 			page 31


 1195 0028 5A61     		str	r2, [r3, #20]
 506:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 1196              		.loc 1 506 25
 1197 002a 0B4B     		ldr	r3, .L66
 1198 002c 4FF44072 		mov	r2, #768
 1199 0030 9A61     		str	r2, [r3, #24]
 507:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1200              		.loc 1 507 28
 1201 0032 094B     		ldr	r3, .L66
 1202 0034 0022     		movs	r2, #0
 1203 0036 DA61     		str	r2, [r3, #28]
 508:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1204              		.loc 1 508 30
 1205 0038 074B     		ldr	r3, .L66
 1206 003a 0022     		movs	r2, #0
 1207 003c 1A62     		str	r2, [r3, #32]
 509:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1208              		.loc 1 509 38
 1209 003e 064B     		ldr	r3, .L66
 1210 0040 0022     		movs	r2, #0
 1211 0042 5A62     		str	r2, [r3, #36]
 510:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1212              		.loc 1 510 7
 1213 0044 0448     		ldr	r0, .L66
 1214 0046 FFF7FEFF 		bl	HAL_UART_Init
 1215 004a 0346     		mov	r3, r0
 1216              		.loc 1 510 6
 1217 004c 002B     		cmp	r3, #0
 1218 004e 01D0     		beq	.L65
 511:Core/Src/main.c ****   {
 512:Core/Src/main.c ****     Error_Handler();
 1219              		.loc 1 512 5
 1220 0050 FFF7FEFF 		bl	Error_Handler
 1221              	.L65:
 513:Core/Src/main.c ****   }
 514:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 517:Core/Src/main.c **** }
 1222              		.loc 1 517 1
 1223 0054 00BF     		nop
 1224 0056 80BD     		pop	{r7, pc}
 1225              	.L67:
 1226              		.align	2
 1227              	.L66:
 1228 0058 00000000 		.word	huart1
 1229 005c 00380140 		.word	1073821696
 1230              		.cfi_endproc
 1231              	.LFE145:
 1233              		.section	.text.MX_GPIO_Init,"ax",%progbits
 1234              		.align	1
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1239              	MX_GPIO_Init:
 1240              	.LFB146:
 518:Core/Src/main.c **** 
ARM GAS  /tmp/cccn0NVy.s 			page 32


 519:Core/Src/main.c **** /**
 520:Core/Src/main.c ****  * @brief GPIO Initialization Function
 521:Core/Src/main.c ****  * @param None
 522:Core/Src/main.c ****  * @retval None
 523:Core/Src/main.c ****  */
 524:Core/Src/main.c **** static void MX_GPIO_Init(void)
 525:Core/Src/main.c **** {
 1241              		.loc 1 525 1
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 40
 1244              		@ frame_needed = 1, uses_anonymous_args = 0
 1245 0000 80B5     		push	{r7, lr}
 1246              	.LCFI41:
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 7, -8
 1249              		.cfi_offset 14, -4
 1250 0002 8AB0     		sub	sp, sp, #40
 1251              	.LCFI42:
 1252              		.cfi_def_cfa_offset 48
 1253 0004 00AF     		add	r7, sp, #0
 1254              	.LCFI43:
 1255              		.cfi_def_cfa_register 7
 526:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 1256              		.loc 1 526 20
 1257 0006 07F11403 		add	r3, r7, #20
 1258 000a 0022     		movs	r2, #0
 1259 000c 1A60     		str	r2, [r3]
 1260 000e 5A60     		str	r2, [r3, #4]
 1261 0010 9A60     		str	r2, [r3, #8]
 1262 0012 DA60     		str	r2, [r3, #12]
 1263 0014 1A61     		str	r2, [r3, #16]
 1264              	.LBB4:
 527:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 528:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 529:Core/Src/main.c **** 
 530:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 531:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 1265              		.loc 1 531 3
 1266 0016 6F4B     		ldr	r3, .L69
 1267 0018 DB6C     		ldr	r3, [r3, #76]
 1268 001a 6E4A     		ldr	r2, .L69
 1269 001c 43F00403 		orr	r3, r3, #4
 1270 0020 D364     		str	r3, [r2, #76]
 1271 0022 6C4B     		ldr	r3, .L69
 1272 0024 DB6C     		ldr	r3, [r3, #76]
 1273 0026 03F00403 		and	r3, r3, #4
 1274 002a 3B61     		str	r3, [r7, #16]
 1275 002c 3B69     		ldr	r3, [r7, #16]
 1276              	.LBE4:
 1277              	.LBB5:
 532:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 1278              		.loc 1 532 3
 1279 002e 694B     		ldr	r3, .L69
 1280 0030 DB6C     		ldr	r3, [r3, #76]
 1281 0032 684A     		ldr	r2, .L69
 1282 0034 43F00103 		orr	r3, r3, #1
 1283 0038 D364     		str	r3, [r2, #76]
ARM GAS  /tmp/cccn0NVy.s 			page 33


 1284 003a 664B     		ldr	r3, .L69
 1285 003c DB6C     		ldr	r3, [r3, #76]
 1286 003e 03F00103 		and	r3, r3, #1
 1287 0042 FB60     		str	r3, [r7, #12]
 1288 0044 FB68     		ldr	r3, [r7, #12]
 1289              	.LBE5:
 1290              	.LBB6:
 533:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 1291              		.loc 1 533 3
 1292 0046 634B     		ldr	r3, .L69
 1293 0048 DB6C     		ldr	r3, [r3, #76]
 1294 004a 624A     		ldr	r2, .L69
 1295 004c 43F00203 		orr	r3, r3, #2
 1296 0050 D364     		str	r3, [r2, #76]
 1297 0052 604B     		ldr	r3, .L69
 1298 0054 DB6C     		ldr	r3, [r3, #76]
 1299 0056 03F00203 		and	r3, r3, #2
 1300 005a BB60     		str	r3, [r7, #8]
 1301 005c BB68     		ldr	r3, [r7, #8]
 1302              	.LBE6:
 1303              	.LBB7:
 534:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 1304              		.loc 1 534 3
 1305 005e 5D4B     		ldr	r3, .L69
 1306 0060 DB6C     		ldr	r3, [r3, #76]
 1307 0062 5C4A     		ldr	r2, .L69
 1308 0064 43F08003 		orr	r3, r3, #128
 1309 0068 D364     		str	r3, [r2, #76]
 1310 006a 5A4B     		ldr	r3, .L69
 1311 006c DB6C     		ldr	r3, [r3, #76]
 1312 006e 03F08003 		and	r3, r3, #128
 1313 0072 7B60     		str	r3, [r7, #4]
 1314 0074 7B68     		ldr	r3, [r7, #4]
 1315              	.LBE7:
 535:Core/Src/main.c **** 
 536:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 537:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin, GPIO_PIN_RESET);
 1316              		.loc 1 537 3
 1317 0076 0022     		movs	r2, #0
 1318 0078 48F20601 		movw	r1, #32774
 1319 007c 4FF09040 		mov	r0, #1207959552
 1320 0080 FFF7FEFF 		bl	HAL_GPIO_WritePin
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 540:Core/Src/main.c ****   HAL_GPIO_WritePin(FTDI_NRST_GPIO_Port, FTDI_NRST_Pin, GPIO_PIN_RESET);
 1321              		.loc 1 540 3
 1322 0084 0022     		movs	r2, #0
 1323 0086 0221     		movs	r1, #2
 1324 0088 5348     		ldr	r0, .L69+4
 1325 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   /*Configure GPIO pins : BRD_STRT_Pin BRD_PRGE_Pin */
 543:Core/Src/main.c ****   GPIO_InitStruct.Pin = BRD_STRT_Pin | BRD_PRGE_Pin;
 1326              		.loc 1 543 23
 1327 008e 4FF44043 		mov	r3, #49152
 1328 0092 7B61     		str	r3, [r7, #20]
 544:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
ARM GAS  /tmp/cccn0NVy.s 			page 34


 1329              		.loc 1 544 24
 1330 0094 4FF40413 		mov	r3, #2162688
 1331 0098 BB61     		str	r3, [r7, #24]
 545:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1332              		.loc 1 545 24
 1333 009a 0123     		movs	r3, #1
 1334 009c FB61     		str	r3, [r7, #28]
 546:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 1335              		.loc 1 546 3
 1336 009e 07F11403 		add	r3, r7, #20
 1337 00a2 1946     		mov	r1, r3
 1338 00a4 4D48     		ldr	r0, .L69+8
 1339 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /*Configure GPIO pins : SUPPLY_VLVE_Pin PURGE_VLVE_Pin CAN_STBY_Pin */
 549:Core/Src/main.c ****   GPIO_InitStruct.Pin = SUPPLY_VLVE_Pin | PURGE_VLVE_Pin | CAN_STBY_Pin;
 1340              		.loc 1 549 23
 1341 00aa 48F20603 		movw	r3, #32774
 1342 00ae 7B61     		str	r3, [r7, #20]
 550:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1343              		.loc 1 550 24
 1344 00b0 0123     		movs	r3, #1
 1345 00b2 BB61     		str	r3, [r7, #24]
 551:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1346              		.loc 1 551 24
 1347 00b4 0223     		movs	r3, #2
 1348 00b6 FB61     		str	r3, [r7, #28]
 552:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1349              		.loc 1 552 25
 1350 00b8 0023     		movs	r3, #0
 1351 00ba 3B62     		str	r3, [r7, #32]
 553:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1352              		.loc 1 553 3
 1353 00bc 07F11403 		add	r3, r7, #20
 1354 00c0 1946     		mov	r1, r3
 1355 00c2 4FF09040 		mov	r0, #1207959552
 1356 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 554:Core/Src/main.c **** 
 555:Core/Src/main.c ****   /*Configure GPIO pins : EXT_STRT_Pin EXT_STOP_Pin */
 556:Core/Src/main.c ****   GPIO_InitStruct.Pin = EXT_STRT_Pin | EXT_STOP_Pin;
 1357              		.loc 1 556 23
 1358 00ca 4823     		movs	r3, #72
 1359 00cc 7B61     		str	r3, [r7, #20]
 557:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 1360              		.loc 1 557 24
 1361 00ce 4FF40413 		mov	r3, #2162688
 1362 00d2 BB61     		str	r3, [r7, #24]
 558:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1363              		.loc 1 558 24
 1364 00d4 0123     		movs	r3, #1
 1365 00d6 FB61     		str	r3, [r7, #28]
 559:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1366              		.loc 1 559 3
 1367 00d8 07F11403 		add	r3, r7, #20
 1368 00dc 1946     		mov	r1, r3
 1369 00de 4FF09040 		mov	r0, #1207959552
 1370 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cccn0NVy.s 			page 35


 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
 562:Core/Src/main.c ****   GPIO_InitStruct.Pin = ACC_INT1_Pin | ACC_INT2_Pin;
 1371              		.loc 1 562 23
 1372 00e6 3023     		movs	r3, #48
 1373 00e8 7B61     		str	r3, [r7, #20]
 563:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 1374              		.loc 1 563 24
 1375 00ea 4FF48813 		mov	r3, #1114112
 1376 00ee BB61     		str	r3, [r7, #24]
 564:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 1377              		.loc 1 564 24
 1378 00f0 0223     		movs	r3, #2
 1379 00f2 FB61     		str	r3, [r7, #28]
 565:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1380              		.loc 1 565 3
 1381 00f4 07F11403 		add	r3, r7, #20
 1382 00f8 1946     		mov	r1, r3
 1383 00fa 4FF09040 		mov	r0, #1207959552
 1384 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   /*Configure GPIO pin : PA7 */
 568:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 1385              		.loc 1 568 23
 1386 0102 8023     		movs	r3, #128
 1387 0104 7B61     		str	r3, [r7, #20]
 569:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1388              		.loc 1 569 24
 1389 0106 0323     		movs	r3, #3
 1390 0108 BB61     		str	r3, [r7, #24]
 570:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1391              		.loc 1 570 24
 1392 010a 0023     		movs	r3, #0
 1393 010c FB61     		str	r3, [r7, #28]
 571:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1394              		.loc 1 571 3
 1395 010e 07F11403 		add	r3, r7, #20
 1396 0112 1946     		mov	r1, r3
 1397 0114 4FF09040 		mov	r0, #1207959552
 1398 0118 FFF7FEFF 		bl	HAL_GPIO_Init
 572:Core/Src/main.c **** 
 573:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB5 */
 574:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_5;
 1399              		.loc 1 574 23
 1400 011c 2123     		movs	r3, #33
 1401 011e 7B61     		str	r3, [r7, #20]
 575:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1402              		.loc 1 575 24
 1403 0120 0323     		movs	r3, #3
 1404 0122 BB61     		str	r3, [r7, #24]
 576:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1405              		.loc 1 576 24
 1406 0124 0023     		movs	r3, #0
 1407 0126 FB61     		str	r3, [r7, #28]
 577:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 1408              		.loc 1 577 3
 1409 0128 07F11403 		add	r3, r7, #20
ARM GAS  /tmp/cccn0NVy.s 			page 36


 1410 012c 1946     		mov	r1, r3
 1411 012e 2A48     		ldr	r0, .L69+4
 1412 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /*Configure GPIO pin : FTDI_NRST_Pin */
 580:Core/Src/main.c ****   GPIO_InitStruct.Pin = FTDI_NRST_Pin;
 1413              		.loc 1 580 23
 1414 0134 0223     		movs	r3, #2
 1415 0136 7B61     		str	r3, [r7, #20]
 581:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 1416              		.loc 1 581 24
 1417 0138 0123     		movs	r3, #1
 1418 013a BB61     		str	r3, [r7, #24]
 582:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 1419              		.loc 1 582 24
 1420 013c 0123     		movs	r3, #1
 1421 013e FB61     		str	r3, [r7, #28]
 583:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1422              		.loc 1 583 25
 1423 0140 0023     		movs	r3, #0
 1424 0142 3B62     		str	r3, [r7, #32]
 584:Core/Src/main.c ****   HAL_GPIO_Init(FTDI_NRST_GPIO_Port, &GPIO_InitStruct);
 1425              		.loc 1 584 3
 1426 0144 07F11403 		add	r3, r7, #20
 1427 0148 1946     		mov	r1, r3
 1428 014a 2348     		ldr	r0, .L69+4
 1429 014c FFF7FEFF 		bl	HAL_GPIO_Init
 585:Core/Src/main.c **** 
 586:Core/Src/main.c ****   /*Configure GPIO pin : PA8 */
 587:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8;
 1430              		.loc 1 587 23
 1431 0150 4FF48073 		mov	r3, #256
 1432 0154 7B61     		str	r3, [r7, #20]
 588:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1433              		.loc 1 588 24
 1434 0156 0223     		movs	r3, #2
 1435 0158 BB61     		str	r3, [r7, #24]
 589:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1436              		.loc 1 589 24
 1437 015a 0023     		movs	r3, #0
 1438 015c FB61     		str	r3, [r7, #28]
 590:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 1439              		.loc 1 590 25
 1440 015e 0023     		movs	r3, #0
 1441 0160 3B62     		str	r3, [r7, #32]
 591:Core/Src/main.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1442              		.loc 1 591 29
 1443 0162 0023     		movs	r3, #0
 1444 0164 7B62     		str	r3, [r7, #36]
 592:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 1445              		.loc 1 592 3
 1446 0166 07F11403 		add	r3, r7, #20
 1447 016a 1946     		mov	r1, r3
 1448 016c 4FF09040 		mov	r0, #1207959552
 1449 0170 FFF7FEFF 		bl	HAL_GPIO_Init
 593:Core/Src/main.c **** 
 594:Core/Src/main.c ****   /*Configure GPIO pin : PH3 */
ARM GAS  /tmp/cccn0NVy.s 			page 37


 595:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 1450              		.loc 1 595 23
 1451 0174 0823     		movs	r3, #8
 1452 0176 7B61     		str	r3, [r7, #20]
 596:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 1453              		.loc 1 596 24
 1454 0178 0323     		movs	r3, #3
 1455 017a BB61     		str	r3, [r7, #24]
 597:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1456              		.loc 1 597 24
 1457 017c 0023     		movs	r3, #0
 1458 017e FB61     		str	r3, [r7, #28]
 598:Core/Src/main.c ****   HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 1459              		.loc 1 598 3
 1460 0180 07F11403 		add	r3, r7, #20
 1461 0184 1946     		mov	r1, r3
 1462 0186 1648     		ldr	r0, .L69+12
 1463 0188 FFF7FEFF 		bl	HAL_GPIO_Init
 599:Core/Src/main.c **** 
 600:Core/Src/main.c ****   /* EXTI interrupt init*/
 601:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 1464              		.loc 1 601 3
 1465 018c 0022     		movs	r2, #0
 1466 018e 0521     		movs	r1, #5
 1467 0190 0920     		movs	r0, #9
 1468 0192 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 602:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 1469              		.loc 1 602 3
 1470 0196 0920     		movs	r0, #9
 1471 0198 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 603:Core/Src/main.c **** 
 604:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 1472              		.loc 1 604 3
 1473 019c 0022     		movs	r2, #0
 1474 019e 0521     		movs	r1, #5
 1475 01a0 0A20     		movs	r0, #10
 1476 01a2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 605:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 1477              		.loc 1 605 3
 1478 01a6 0A20     		movs	r0, #10
 1479 01a8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 606:Core/Src/main.c **** 
 607:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 1480              		.loc 1 607 3
 1481 01ac 0022     		movs	r2, #0
 1482 01ae 0521     		movs	r1, #5
 1483 01b0 1720     		movs	r0, #23
 1484 01b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 608:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 1485              		.loc 1 608 3
 1486 01b6 1720     		movs	r0, #23
 1487 01b8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 1488              		.loc 1 610 3
 1489 01bc 0022     		movs	r2, #0
 1490 01be 0521     		movs	r1, #5
ARM GAS  /tmp/cccn0NVy.s 			page 38


 1491 01c0 2820     		movs	r0, #40
 1492 01c2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 611:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 1493              		.loc 1 611 3
 1494 01c6 2820     		movs	r0, #40
 1495 01c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 612:Core/Src/main.c **** 
 613:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 614:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 615:Core/Src/main.c **** }
 1496              		.loc 1 615 1
 1497 01cc 00BF     		nop
 1498 01ce 2837     		adds	r7, r7, #40
 1499              	.LCFI44:
 1500              		.cfi_def_cfa_offset 8
 1501 01d0 BD46     		mov	sp, r7
 1502              	.LCFI45:
 1503              		.cfi_def_cfa_register 13
 1504              		@ sp needed
 1505 01d2 80BD     		pop	{r7, pc}
 1506              	.L70:
 1507              		.align	2
 1508              	.L69:
 1509 01d4 00100240 		.word	1073876992
 1510 01d8 00040048 		.word	1207960576
 1511 01dc 00080048 		.word	1207961600
 1512 01e0 001C0048 		.word	1207966720
 1513              		.cfi_endproc
 1514              	.LFE146:
 1516              		.section	.text.StartCanTask,"ax",%progbits
 1517              		.align	1
 1518              		.global	StartCanTask
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1523              	StartCanTask:
 1524              	.LFB147:
 616:Core/Src/main.c **** 
 617:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 618:Core/Src/main.c **** 
 619:Core/Src/main.c **** /* USER CODE END 4 */
 620:Core/Src/main.c **** 
 621:Core/Src/main.c **** /* USER CODE BEGIN Header_StartCanTask */
 622:Core/Src/main.c **** /**
 623:Core/Src/main.c ****  * @brief  Function implementing the CanTask thread.
 624:Core/Src/main.c ****  * @param  argument: Not used
 625:Core/Src/main.c ****  * @retval None
 626:Core/Src/main.c ****  */
 627:Core/Src/main.c **** /* USER CODE END Header_StartCanTask */
 628:Core/Src/main.c **** void StartCanTask(void *argument)
 629:Core/Src/main.c **** {
 1525              		.loc 1 629 1
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 8
 1528              		@ frame_needed = 1, uses_anonymous_args = 0
 1529 0000 80B5     		push	{r7, lr}
 1530              	.LCFI46:
ARM GAS  /tmp/cccn0NVy.s 			page 39


 1531              		.cfi_def_cfa_offset 8
 1532              		.cfi_offset 7, -8
 1533              		.cfi_offset 14, -4
 1534 0002 82B0     		sub	sp, sp, #8
 1535              	.LCFI47:
 1536              		.cfi_def_cfa_offset 16
 1537 0004 00AF     		add	r7, sp, #0
 1538              	.LCFI48:
 1539              		.cfi_def_cfa_register 7
 1540 0006 7860     		str	r0, [r7, #4]
 1541              	.L72:
 630:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 631:Core/Src/main.c ****   /* Infinite loop */
 632:Core/Src/main.c ****   for (;;)
 633:Core/Src/main.c ****   {
 634:Core/Src/main.c ****     osDelay(1);
 1542              		.loc 1 634 5 discriminator 1
 1543 0008 0120     		movs	r0, #1
 1544 000a FFF7FEFF 		bl	osDelay
 1545 000e FBE7     		b	.L72
 1546              		.cfi_endproc
 1547              	.LFE147:
 1549              		.section	.text.StartI2cTask,"ax",%progbits
 1550              		.align	1
 1551              		.global	StartI2cTask
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1556              	StartI2cTask:
 1557              	.LFB148:
 635:Core/Src/main.c ****   }
 636:Core/Src/main.c ****   /* USER CODE END 5 */
 637:Core/Src/main.c **** }
 638:Core/Src/main.c **** 
 639:Core/Src/main.c **** /* USER CODE BEGIN Header_StartI2cTask */
 640:Core/Src/main.c **** /**
 641:Core/Src/main.c ****  * @brief Function implementing the I2cTask thread.
 642:Core/Src/main.c ****  * @param argument: Not used
 643:Core/Src/main.c ****  * @retval None
 644:Core/Src/main.c ****  */
 645:Core/Src/main.c **** /* USER CODE END Header_StartI2cTask */
 646:Core/Src/main.c **** void StartI2cTask(void *argument)
 647:Core/Src/main.c **** {
 1558              		.loc 1 647 1
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 8
 1561              		@ frame_needed = 1, uses_anonymous_args = 0
 1562 0000 80B5     		push	{r7, lr}
 1563              	.LCFI49:
 1564              		.cfi_def_cfa_offset 8
 1565              		.cfi_offset 7, -8
 1566              		.cfi_offset 14, -4
 1567 0002 82B0     		sub	sp, sp, #8
 1568              	.LCFI50:
 1569              		.cfi_def_cfa_offset 16
 1570 0004 00AF     		add	r7, sp, #0
 1571              	.LCFI51:
ARM GAS  /tmp/cccn0NVy.s 			page 40


 1572              		.cfi_def_cfa_register 7
 1573 0006 7860     		str	r0, [r7, #4]
 1574              	.L74:
 648:Core/Src/main.c ****   /* USER CODE BEGIN StartI2cTask */
 649:Core/Src/main.c ****   /* Infinite loop */
 650:Core/Src/main.c ****   for (;;)
 651:Core/Src/main.c ****   {
 652:Core/Src/main.c ****     osDelay(1);
 1575              		.loc 1 652 5 discriminator 1
 1576 0008 0120     		movs	r0, #1
 1577 000a FFF7FEFF 		bl	osDelay
 1578 000e FBE7     		b	.L74
 1579              		.cfi_endproc
 1580              	.LFE148:
 1582              		.section	.rodata
 1583              		.align	2
 1584              	.LC4:
 1585 002c 01020304 		.ascii	"\001\002\003\004\005\006\007\010"
 1585      05060708 
 1586              		.section	.text.StartFuelCellTask,"ax",%progbits
 1587              		.align	1
 1588              		.global	StartFuelCellTask
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1593              	StartFuelCellTask:
 1594              	.LFB149:
 653:Core/Src/main.c ****   }
 654:Core/Src/main.c ****   /* USER CODE END StartI2cTask */
 655:Core/Src/main.c **** }
 656:Core/Src/main.c **** 
 657:Core/Src/main.c **** /* USER CODE BEGIN Header_StartFuelCellTask */
 658:Core/Src/main.c **** /**
 659:Core/Src/main.c ****  * @brief Function implementing the FuelCellTask thread.
 660:Core/Src/main.c ****  * @param argument: Not used
 661:Core/Src/main.c ****  * @retval None
 662:Core/Src/main.c ****  */
 663:Core/Src/main.c **** /* USER CODE END Header_StartFuelCellTask */
 664:Core/Src/main.c **** void StartFuelCellTask(void *argument)
 665:Core/Src/main.c **** {
 1595              		.loc 1 665 1
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 24
 1598              		@ frame_needed = 1, uses_anonymous_args = 0
 1599 0000 80B5     		push	{r7, lr}
 1600              	.LCFI52:
 1601              		.cfi_def_cfa_offset 8
 1602              		.cfi_offset 7, -8
 1603              		.cfi_offset 14, -4
 1604 0002 86B0     		sub	sp, sp, #24
 1605              	.LCFI53:
 1606              		.cfi_def_cfa_offset 32
 1607 0004 00AF     		add	r7, sp, #0
 1608              	.LCFI54:
 1609              		.cfi_def_cfa_register 7
 1610 0006 7860     		str	r0, [r7, #4]
 666:Core/Src/main.c ****   /* USER CODE BEGIN StartFuelCellTask */
ARM GAS  /tmp/cccn0NVy.s 			page 41


 667:Core/Src/main.c **** #define CAN_MESSAGE_TIMEOUT_MS 5000
 668:Core/Src/main.c **** #define CAN_ADD_TX_TIMEOUT_MS 5000
 669:Core/Src/main.c ****   osStatus_t os_stat;
 670:Core/Src/main.c ****   uint32_t fc_tick;
 671:Core/Src/main.c ****   HAL_StatusTypeDef hal_stat;
 672:Core/Src/main.c **** 
 673:Core/Src/main.c ****   TxHeaderFuelCellTask.IDE = CAN_ID_STD;
 1611              		.loc 1 673 28
 1612 0008 444B     		ldr	r3, .L92
 1613 000a 0022     		movs	r2, #0
 1614 000c 9A60     		str	r2, [r3, #8]
 674:Core/Src/main.c ****   TxHeaderFuelCellTask.RTR = CAN_RTR_DATA;
 1615              		.loc 1 674 28
 1616 000e 434B     		ldr	r3, .L92
 1617 0010 0022     		movs	r2, #0
 1618 0012 DA60     		str	r2, [r3, #12]
 675:Core/Src/main.c ****   TxHeaderFuelCellTask.ExtId = 0;
 1619              		.loc 1 675 30
 1620 0014 414B     		ldr	r3, .L92
 1621 0016 0022     		movs	r2, #0
 1622 0018 5A60     		str	r2, [r3, #4]
 676:Core/Src/main.c ****   TxHeaderFuelCellTask.TransmitGlobalTime = DISABLE;
 1623              		.loc 1 676 43
 1624 001a 404B     		ldr	r3, .L92
 1625 001c 0022     		movs	r2, #0
 1626 001e 1A75     		strb	r2, [r3, #20]
 1627              	.L89:
 677:Core/Src/main.c ****   /* Infinite loop */
 678:Core/Src/main.c ****   for (;;)
 679:Core/Src/main.c ****   {
 680:Core/Src/main.c ****     switch (fc_state)
 1628              		.loc 1 680 5
 1629 0020 3F4B     		ldr	r3, .L92+4
 1630 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1631 0024 042B     		cmp	r3, #4
 1632 0026 FBD8     		bhi	.L89
 1633 0028 01A2     		adr	r2, .L78
 1634 002a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1635 002e 00BF     		.p2align 2
 1636              	.L78:
 1637 0030 45000000 		.word	.L81+1
 1638 0034 5F000000 		.word	.L80+1
 1639 0038 FB000000 		.word	.L79+1
 1640 003c 21000000 		.word	.L89+1
 1641 0040 21000000 		.word	.L89+1
 1642              		.p2align 1
 1643              	.L81:
 1644              	.LBB8:
 681:Core/Src/main.c ****     {
 682:Core/Src/main.c ****     case FUEL_CELL_OFF_STATE:
 683:Core/Src/main.c ****       HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1645              		.loc 1 683 7
 1646 0044 0022     		movs	r2, #0
 1647 0046 0421     		movs	r1, #4
 1648 0048 4FF09040 		mov	r0, #1207959552
 1649 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 684:Core/Src/main.c ****       HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/cccn0NVy.s 			page 42


 1650              		.loc 1 684 7
 1651 0050 0022     		movs	r2, #0
 1652 0052 0221     		movs	r1, #2
 1653 0054 4FF09040 		mov	r0, #1207959552
 1654 0058 FFF7FEFF 		bl	HAL_GPIO_WritePin
 685:Core/Src/main.c ****       // CAN message to relay board all relays off
 686:Core/Src/main.c ****       break;
 1655              		.loc 1 686 7
 1656 005c 5CE0     		b	.L76
 1657              	.L80:
 687:Core/Src/main.c ****     case FUEL_CELL_STRTUP_STATE:
 688:Core/Src/main.c ****       TxHeaderFuelCellTask.StdId = 0x103;
 1658              		.loc 1 688 34
 1659 005e 2F4B     		ldr	r3, .L92
 1660 0060 40F20312 		movw	r2, #259
 1661 0064 1A60     		str	r2, [r3]
 689:Core/Src/main.c ****       TxHeaderFuelCellTask.DLC = 8;
 1662              		.loc 1 689 32
 1663 0066 2D4B     		ldr	r3, .L92
 1664 0068 0822     		movs	r2, #8
 1665 006a 1A61     		str	r2, [r3, #16]
 690:Core/Src/main.c ****       uint8_t mymsg[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 1666              		.loc 1 690 15
 1667 006c 2D4A     		ldr	r2, .L92+8
 1668 006e 07F10803 		add	r3, r7, #8
 1669 0072 92E80300 		ldm	r2, {r0, r1}
 1670 0076 83E80300 		stm	r3, {r0, r1}
 691:Core/Src/main.c ****       // Try to add tx message
 692:Core/Src/main.c ****       fc_tick = HAL_GetTick();
 1671              		.loc 1 692 17
 1672 007a FFF7FEFF 		bl	HAL_GetTick
 1673 007e 7861     		str	r0, [r7, #20]
 1674              	.L84:
 693:Core/Src/main.c ****       do
 694:Core/Src/main.c ****       {
 695:Core/Src/main.c ****         hal_stat = HAL_CAN_AddTxMessage(&hcan1, &TxHeaderFuelCellTask, mymsg, &TxMailboxFuelCellTas
 1675              		.loc 1 695 20 discriminator 2
 1676 0080 07F10802 		add	r2, r7, #8
 1677 0084 284B     		ldr	r3, .L92+12
 1678 0086 2549     		ldr	r1, .L92
 1679 0088 2848     		ldr	r0, .L92+16
 1680 008a FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1681 008e 0346     		mov	r3, r0
 1682 0090 FB74     		strb	r3, [r7, #19]
 696:Core/Src/main.c ****       } while (hal_stat != HAL_OK && (HAL_GetTick() - fc_tick < CAN_ADD_TX_TIMEOUT_MS));
 1683              		.loc 1 696 7 discriminator 2
 1684 0092 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1685 0094 002B     		cmp	r3, #0
 1686 0096 08D0     		beq	.L83
 1687              		.loc 1 696 39 discriminator 1
 1688 0098 FFF7FEFF 		bl	HAL_GetTick
 1689 009c 0246     		mov	r2, r0
 1690              		.loc 1 696 53 discriminator 1
 1691 009e 7B69     		ldr	r3, [r7, #20]
 1692 00a0 D31A     		subs	r3, r2, r3
 1693              		.loc 1 696 35 discriminator 1
 1694 00a2 41F28732 		movw	r2, #4999
ARM GAS  /tmp/cccn0NVy.s 			page 43


 1695 00a6 9342     		cmp	r3, r2
 1696 00a8 EAD9     		bls	.L84
 1697              	.L83:
 697:Core/Src/main.c **** 
 698:Core/Src/main.c ****       // Wait for tx message to be sent. If never successfully sent, timeout and return to off stat
 699:Core/Src/main.c ****       if (osSemaphoreAcquire(canMsgOkSemHandle, CAN_MESSAGE_TIMEOUT_MS) == osOK)
 1698              		.loc 1 699 11
 1699 00aa 214B     		ldr	r3, .L92+20
 1700 00ac 1B68     		ldr	r3, [r3]
 1701 00ae 41F28831 		movw	r1, #5000
 1702 00b2 1846     		mov	r0, r3
 1703 00b4 FFF7FEFF 		bl	osSemaphoreAcquire
 1704 00b8 0346     		mov	r3, r0
 1705              		.loc 1 699 10
 1706 00ba 002B     		cmp	r3, #0
 1707 00bc 19D1     		bne	.L85
 700:Core/Src/main.c ****       {
 701:Core/Src/main.c ****         HAL_GPIO_WritePin(SUPPLY_VLVE_GPIO_Port, SUPPLY_VLVE_Pin, GPIO_PIN_SET);
 1708              		.loc 1 701 9
 1709 00be 0122     		movs	r2, #1
 1710 00c0 0221     		movs	r1, #2
 1711 00c2 4FF09040 		mov	r0, #1207959552
 1712 00c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 702:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_SET);
 1713              		.loc 1 702 9
 1714 00ca 0122     		movs	r2, #1
 1715 00cc 0421     		movs	r1, #4
 1716 00ce 4FF09040 		mov	r0, #1207959552
 1717 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 703:Core/Src/main.c ****         osDelay(500);
 1718              		.loc 1 703 9
 1719 00d6 4FF4FA70 		mov	r0, #500
 1720 00da FFF7FEFF 		bl	osDelay
 704:Core/Src/main.c ****         HAL_GPIO_WritePin(PURGE_VLVE_GPIO_Port, PURGE_VLVE_Pin, GPIO_PIN_RESET);
 1721              		.loc 1 704 9
 1722 00de 0022     		movs	r2, #0
 1723 00e0 0421     		movs	r1, #4
 1724 00e2 4FF09040 		mov	r0, #1207959552
 1725 00e6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 705:Core/Src/main.c ****         fc_state = FUEL_CELL_CHRGE_STATE;
 1726              		.loc 1 705 18
 1727 00ea 0D4B     		ldr	r3, .L92+4
 1728 00ec 0222     		movs	r2, #2
 1729 00ee 1A70     		strb	r2, [r3]
 706:Core/Src/main.c ****       }
 707:Core/Src/main.c ****       else
 708:Core/Src/main.c ****       {
 709:Core/Src/main.c ****         // Tx never added or didn't send succesfully in CAN_MESSAGE_TIMEOUT_MS
 710:Core/Src/main.c ****         fc_state = FUEL_CELL_OFF_STATE;
 711:Core/Src/main.c ****       }
 712:Core/Src/main.c ****       break;
 1730              		.loc 1 712 7
 1731 00f0 12E0     		b	.L76
 1732              	.L85:
 710:Core/Src/main.c ****       }
 1733              		.loc 1 710 18
 1734 00f2 0B4B     		ldr	r3, .L92+4
ARM GAS  /tmp/cccn0NVy.s 			page 44


 1735 00f4 0022     		movs	r2, #0
 1736 00f6 1A70     		strb	r2, [r3]
 1737              		.loc 1 712 7
 1738 00f8 0EE0     		b	.L76
 1739              	.L79:
 713:Core/Src/main.c ****     case FUEL_CELL_CHRGE_STATE:
 714:Core/Src/main.c ****       if (canData.cap_voltage >= FULL_CAP_CHARGE_V)
 1740              		.loc 1 714 18
 1741 00fa 0E4B     		ldr	r3, .L92+24
 1742 00fc D3ED017A 		vldr.32	s15, [r3, #4]
 1743              		.loc 1 714 10
 1744 0100 B3EE027A 		vmov.f32	s14, #1.8e+1
 1745 0104 F4EEC77A 		vcmpe.f32	s15, s14
 1746 0108 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1747 010c 00DA     		bge	.L90
 715:Core/Src/main.c ****       {
 716:Core/Src/main.c ****         fc_state = FUEL_CELL_RUN_STATE;
 717:Core/Src/main.c ****       }
 718:Core/Src/main.c ****       // CAN message to relay board cap charge mode
 719:Core/Src/main.c ****       // Wait for caps to charge up
 720:Core/Src/main.c ****       // Move to run mode
 721:Core/Src/main.c ****       break;
 1748              		.loc 1 721 7
 1749 010e 02E0     		b	.L91
 1750              	.L90:
 716:Core/Src/main.c ****       }
 1751              		.loc 1 716 18
 1752 0110 034B     		ldr	r3, .L92+4
 1753 0112 0422     		movs	r2, #4
 1754 0114 1A70     		strb	r2, [r3]
 1755              	.L91:
 1756              		.loc 1 721 7
 1757 0116 00BF     		nop
 1758              	.L76:
 1759              	.LBE8:
 680:Core/Src/main.c ****     {
 1760              		.loc 1 680 5
 1761 0118 82E7     		b	.L89
 1762              	.L93:
 1763 011a 00BF     		.align	2
 1764              	.L92:
 1765 011c 00000000 		.word	TxHeaderFuelCellTask
 1766 0120 00000000 		.word	fc_state
 1767 0124 2C000000 		.word	.LC4
 1768 0128 00000000 		.word	TxMailboxFuelCellTask
 1769 012c 00000000 		.word	hcan1
 1770 0130 00000000 		.word	canMsgOkSemHandle
 1771 0134 00000000 		.word	canData
 1772              		.cfi_endproc
 1773              	.LFE149:
 1775              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1776              		.align	1
 1777              		.global	HAL_TIM_PeriodElapsedCallback
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1782              	HAL_TIM_PeriodElapsedCallback:
ARM GAS  /tmp/cccn0NVy.s 			page 45


 1783              	.LFB150:
 722:Core/Src/main.c ****     case FUEL_CELL_RUN_STATE:
 723:Core/Src/main.c ****       // CAN message to relay board run mode
 724:Core/Src/main.c **** 
 725:Core/Src/main.c ****       break;
 726:Core/Src/main.c ****     }
 727:Core/Src/main.c ****   }
 728:Core/Src/main.c ****   /* USER CODE END StartFuelCellTask */
 729:Core/Src/main.c **** }
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** /**
 732:Core/Src/main.c ****  * @brief  Period elapsed callback in non blocking mode
 733:Core/Src/main.c ****  * @note   This function is called  when TIM1 interrupt took place, inside
 734:Core/Src/main.c ****  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 735:Core/Src/main.c ****  * a global variable "uwTick" used as application time base.
 736:Core/Src/main.c ****  * @param  htim : TIM handle
 737:Core/Src/main.c ****  * @retval None
 738:Core/Src/main.c ****  */
 739:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 740:Core/Src/main.c **** {
 1784              		.loc 1 740 1
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 8
 1787              		@ frame_needed = 1, uses_anonymous_args = 0
 1788 0000 80B5     		push	{r7, lr}
 1789              	.LCFI55:
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 14, -4
 1793 0002 82B0     		sub	sp, sp, #8
 1794              	.LCFI56:
 1795              		.cfi_def_cfa_offset 16
 1796 0004 00AF     		add	r7, sp, #0
 1797              	.LCFI57:
 1798              		.cfi_def_cfa_register 7
 1799 0006 7860     		str	r0, [r7, #4]
 741:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 742:Core/Src/main.c **** 
 743:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 744:Core/Src/main.c ****   if (htim->Instance == TIM1)
 1800              		.loc 1 744 11
 1801 0008 7B68     		ldr	r3, [r7, #4]
 1802 000a 1B68     		ldr	r3, [r3]
 1803              		.loc 1 744 6
 1804 000c 044A     		ldr	r2, .L97
 1805 000e 9342     		cmp	r3, r2
 1806 0010 01D1     		bne	.L96
 745:Core/Src/main.c ****   {
 746:Core/Src/main.c ****     HAL_IncTick();
 1807              		.loc 1 746 5
 1808 0012 FFF7FEFF 		bl	HAL_IncTick
 1809              	.L96:
 747:Core/Src/main.c ****   }
 748:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 749:Core/Src/main.c **** 
 750:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 751:Core/Src/main.c **** }
ARM GAS  /tmp/cccn0NVy.s 			page 46


 1810              		.loc 1 751 1
 1811 0016 00BF     		nop
 1812 0018 0837     		adds	r7, r7, #8
 1813              	.LCFI58:
 1814              		.cfi_def_cfa_offset 8
 1815 001a BD46     		mov	sp, r7
 1816              	.LCFI59:
 1817              		.cfi_def_cfa_register 13
 1818              		@ sp needed
 1819 001c 80BD     		pop	{r7, pc}
 1820              	.L98:
 1821 001e 00BF     		.align	2
 1822              	.L97:
 1823 0020 002C0140 		.word	1073818624
 1824              		.cfi_endproc
 1825              	.LFE150:
 1827              		.section	.text.Error_Handler,"ax",%progbits
 1828              		.align	1
 1829              		.global	Error_Handler
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
 1834              	Error_Handler:
 1835              	.LFB151:
 752:Core/Src/main.c **** 
 753:Core/Src/main.c **** /**
 754:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 755:Core/Src/main.c ****  * @retval None
 756:Core/Src/main.c ****  */
 757:Core/Src/main.c **** void Error_Handler(void)
 758:Core/Src/main.c **** {
 1836              		.loc 1 758 1
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 1, uses_anonymous_args = 0
 1840              		@ link register save eliminated.
 1841 0000 80B4     		push	{r7}
 1842              	.LCFI60:
 1843              		.cfi_def_cfa_offset 4
 1844              		.cfi_offset 7, -4
 1845 0002 00AF     		add	r7, sp, #0
 1846              	.LCFI61:
 1847              		.cfi_def_cfa_register 7
 1848              	.LBB9:
 1849              	.LBB10:
 1850              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cccn0NVy.s 			page 47


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cccn0NVy.s 			page 48


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
ARM GAS  /tmp/cccn0NVy.s 			page 49


 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
ARM GAS  /tmp/cccn0NVy.s 			page 50


 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1851              		.loc 2 209 3
 1852              		.syntax unified
 1853              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1854 0004 72B6     		cpsid i
 1855              	@ 0 "" 2
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1856              		.loc 2 210 1
 1857              		.thumb
 1858              		.syntax unified
 1859 0006 00BF     		nop
 1860              	.L100:
 1861              	.LBE10:
 1862              	.LBE9:
 759:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 760:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 761:Core/Src/main.c ****   __disable_irq();
 762:Core/Src/main.c ****   while (1)
 1863              		.loc 1 762 9 discriminator 1
 1864 0008 FEE7     		b	.L100
 1865              		.cfi_endproc
 1866              	.LFE151:
 1868              		.text
 1869              	.Letext0:
 1870              		.file 3 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 1871              		.file 4 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 1872              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 1873              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1874              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1875              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 1876              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
ARM GAS  /tmp/cccn0NVy.s 			page 51


 1877              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 1878              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 1879              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_i2c.h"
 1880              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 1881              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 1882              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1883              		.file 16 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1884              		.file 17 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_types.h"
 1885              		.file 18 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/reent.h"
 1886              		.file 19 "/usr/share/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/lock.h"
 1887              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1888              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/cccn0NVy.s 			page 52


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cccn0NVy.s:24     .bss.FC:0000000000000000 FC
     /tmp/cccn0NVy.s:21     .bss.FC:0000000000000000 $d
     /tmp/cccn0NVy.s:31     .bss.CANPackets:0000000000000000 CANPackets
     /tmp/cccn0NVy.s:28     .bss.CANPackets:0000000000000000 $d
     /tmp/cccn0NVy.s:38     .bss.hcan1:0000000000000000 hcan1
     /tmp/cccn0NVy.s:35     .bss.hcan1:0000000000000000 $d
     /tmp/cccn0NVy.s:45     .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cccn0NVy.s:42     .bss.hi2c1:0000000000000000 $d
     /tmp/cccn0NVy.s:52     .bss.huart1:0000000000000000 huart1
     /tmp/cccn0NVy.s:49     .bss.huart1:0000000000000000 $d
     /tmp/cccn0NVy.s:59     .bss.CanTaskHandle:0000000000000000 CanTaskHandle
     /tmp/cccn0NVy.s:56     .bss.CanTaskHandle:0000000000000000 $d
     /tmp/cccn0NVy.s:66     .bss.CanTaskBuffer:0000000000000000 CanTaskBuffer
     /tmp/cccn0NVy.s:63     .bss.CanTaskBuffer:0000000000000000 $d
     /tmp/cccn0NVy.s:73     .bss.CanTaskControlBlock:0000000000000000 CanTaskControlBlock
     /tmp/cccn0NVy.s:70     .bss.CanTaskControlBlock:0000000000000000 $d
     /tmp/cccn0NVy.s:84     .rodata.CanTask_attributes:0000000000000000 CanTask_attributes
     /tmp/cccn0NVy.s:77     .rodata:0000000000000000 $d
     /tmp/cccn0NVy.s:81     .rodata.CanTask_attributes:0000000000000000 $d
     /tmp/cccn0NVy.s:98     .bss.I2cTaskHandle:0000000000000000 I2cTaskHandle
     /tmp/cccn0NVy.s:95     .bss.I2cTaskHandle:0000000000000000 $d
     /tmp/cccn0NVy.s:105    .bss.I2cTaskBuffer:0000000000000000 I2cTaskBuffer
     /tmp/cccn0NVy.s:102    .bss.I2cTaskBuffer:0000000000000000 $d
     /tmp/cccn0NVy.s:112    .bss.I2cTaskControlBlock:0000000000000000 I2cTaskControlBlock
     /tmp/cccn0NVy.s:109    .bss.I2cTaskControlBlock:0000000000000000 $d
     /tmp/cccn0NVy.s:123    .rodata.I2cTask_attributes:0000000000000000 I2cTask_attributes
     /tmp/cccn0NVy.s:120    .rodata.I2cTask_attributes:0000000000000000 $d
     /tmp/cccn0NVy.s:137    .bss.FuelCellTaskHandle:0000000000000000 FuelCellTaskHandle
     /tmp/cccn0NVy.s:134    .bss.FuelCellTaskHandle:0000000000000000 $d
     /tmp/cccn0NVy.s:144    .bss.FuelCellTaskBuffer:0000000000000000 FuelCellTaskBuffer
     /tmp/cccn0NVy.s:141    .bss.FuelCellTaskBuffer:0000000000000000 $d
     /tmp/cccn0NVy.s:151    .bss.FuelCellTaskControlBlock:0000000000000000 FuelCellTaskControlBlock
     /tmp/cccn0NVy.s:148    .bss.FuelCellTaskControlBlock:0000000000000000 $d
     /tmp/cccn0NVy.s:162    .rodata.FuelCellTask_attributes:0000000000000000 FuelCellTask_attributes
     /tmp/cccn0NVy.s:159    .rodata.FuelCellTask_attributes:0000000000000000 $d
     /tmp/cccn0NVy.s:176    .bss.canMsgOkSemHandle:0000000000000000 canMsgOkSemHandle
     /tmp/cccn0NVy.s:173    .bss.canMsgOkSemHandle:0000000000000000 $d
     /tmp/cccn0NVy.s:187    .rodata.canMsgOkSem_attributes:0000000000000000 canMsgOkSem_attributes
     /tmp/cccn0NVy.s:184    .rodata.canMsgOkSem_attributes:0000000000000000 $d
     /tmp/cccn0NVy.s:194    .bss.fc_state:0000000000000000 fc_state
     /tmp/cccn0NVy.s:195    .bss.fc_state:0000000000000000 $d
     /tmp/cccn0NVy.s:201    .bss.accData:0000000000000000 accData
     /tmp/cccn0NVy.s:198    .bss.accData:0000000000000000 $d
     /tmp/cccn0NVy.s:208    .bss.canData:0000000000000000 canData
     /tmp/cccn0NVy.s:205    .bss.canData:0000000000000000 $d
     /tmp/cccn0NVy.s:215    .bss.TxHeader:0000000000000000 TxHeader
     /tmp/cccn0NVy.s:212    .bss.TxHeader:0000000000000000 $d
     /tmp/cccn0NVy.s:222    .bss.TxHeaderFuelCellTask:0000000000000000 TxHeaderFuelCellTask
     /tmp/cccn0NVy.s:219    .bss.TxHeaderFuelCellTask:0000000000000000 $d
     /tmp/cccn0NVy.s:229    .bss.RxHeader:0000000000000000 RxHeader
     /tmp/cccn0NVy.s:226    .bss.RxHeader:0000000000000000 $d
     /tmp/cccn0NVy.s:236    .bss.TxMailbox:0000000000000000 TxMailbox
     /tmp/cccn0NVy.s:233    .bss.TxMailbox:0000000000000000 $d
     /tmp/cccn0NVy.s:243    .bss.TxMailboxFuelCellTask:0000000000000000 TxMailboxFuelCellTask
     /tmp/cccn0NVy.s:240    .bss.TxMailboxFuelCellTask:0000000000000000 $d
ARM GAS  /tmp/cccn0NVy.s 			page 53


     /tmp/cccn0NVy.s:250    .bss.TxData:0000000000000000 TxData
     /tmp/cccn0NVy.s:247    .bss.TxData:0000000000000000 $d
     /tmp/cccn0NVy.s:257    .bss.RxData:0000000000000000 RxData
     /tmp/cccn0NVy.s:254    .bss.RxData:0000000000000000 $d
     /tmp/cccn0NVy.s:264    .bss.button_debounce:0000000000000000 button_debounce
     /tmp/cccn0NVy.s:261    .bss.button_debounce:0000000000000000 $d
     /tmp/cccn0NVy.s:267    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cccn0NVy.s:273    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cccn0NVy.s:311    .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000001c $d
     /tmp/cccn0NVy.s:317    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/cccn0NVy.s:323    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cccn0NVy.s:370    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000028 $d
     /tmp/cccn0NVy.s:376    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/cccn0NVy.s:382    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cccn0NVy.s:429    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000028 $d
     /tmp/cccn0NVy.s:435    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/cccn0NVy.s:441    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cccn0NVy.s:488    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000028 $d
     /tmp/cccn0NVy.s:494    .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
     /tmp/cccn0NVy.s:500    .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
     /tmp/cccn0NVy.s:644    .text.HAL_GPIO_EXTI_Callback:00000000000000b8 $d
     /tmp/cccn0NVy.s:650    .text.main:0000000000000000 $t
     /tmp/cccn0NVy.s:656    .text.main:0000000000000000 main
     /tmp/cccn0NVy.s:790    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cccn0NVy.s:1239   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cccn0NVy.s:920    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cccn0NVy.s:1058   .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cccn0NVy.s:1158   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cccn0NVy.s:767    .text.main:00000000000000a0 $d
     /tmp/cccn0NVy.s:1523   .text.StartCanTask:0000000000000000 StartCanTask
     /tmp/cccn0NVy.s:1556   .text.StartI2cTask:0000000000000000 StartI2cTask
     /tmp/cccn0NVy.s:1593   .text.StartFuelCellTask:0000000000000000 StartFuelCellTask
     /tmp/cccn0NVy.s:784    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cccn0NVy.s:1834   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cccn0NVy.s:915    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cccn0NVy.s:1047   .text.MX_CAN1_Init:00000000000000a8 $d
     /tmp/cccn0NVy.s:1053   .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cccn0NVy.s:1146   .text.MX_I2C1_Init:0000000000000074 $d
     /tmp/cccn0NVy.s:1153   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cccn0NVy.s:1228   .text.MX_USART1_UART_Init:0000000000000058 $d
     /tmp/cccn0NVy.s:1234   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cccn0NVy.s:1509   .text.MX_GPIO_Init:00000000000001d4 $d
     /tmp/cccn0NVy.s:1517   .text.StartCanTask:0000000000000000 $t
     /tmp/cccn0NVy.s:1550   .text.StartI2cTask:0000000000000000 $t
     /tmp/cccn0NVy.s:1587   .text.StartFuelCellTask:0000000000000000 $t
     /tmp/cccn0NVy.s:1637   .text.StartFuelCellTask:0000000000000030 $d
     /tmp/cccn0NVy.s:1642   .text.StartFuelCellTask:0000000000000044 $t
     /tmp/cccn0NVy.s:1765   .text.StartFuelCellTask:000000000000011c $d
     /tmp/cccn0NVy.s:1776   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cccn0NVy.s:1782   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cccn0NVy.s:1823   .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/cccn0NVy.s:1828   .text.Error_Handler:0000000000000000 $t
                           .group:0000000000000000 wm4.0.7c07f3f6b993d5df097fdb8d3ce9a6de
                           .group:0000000000000000 wm4.stm32l4xx_hal_conf.h.25.67df7bfb263225dfcb11ad6d535659e5
                           .group:0000000000000000 wm4.stm32l4xx.h.38.13610480d662c5d808817940a37afcf4
                           .group:0000000000000000 wm4.stm32l432xx.h.34.64bfd283c23d6d1aa5faea715519c36d
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
ARM GAS  /tmp/cccn0NVy.s 			page 54


                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.46e8eccfa2cfeaae11d008bb2823a3ed
                           .group:0000000000000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.78077cef1206e937f7b56043ffca496a
                           .group:0000000000000000 wm4.core_cm4.h.174.fcddd62df80231752fa39eb9b61dadfe
                           .group:0000000000000000 wm4.mpu_armv7.h.32.4049752bb5792d4e15357775e9506cfc
                           .group:0000000000000000 wm4.stm32l432xx.h.380.93d43fb335c0ebed2f7b80a16f382831
                           .group:0000000000000000 wm4.stm32l4xx.h.196.f5ae8047c57b6175c94f246ef967a286
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.22.60f4b739ef84b68a7e7ed16e5103575e
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32l4xx_hal_def.h.57.b521302d6c089e94008be04ada42518c
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc.h.156.c2cf90ca16490b11bfea6d5b9c02447d
                           .group:0000000000000000 wm4.stm32l4xx_hal_rcc_ex.h.20.9d2cd8406af411ccecbbc69175fe86df
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio.h.21.2d2b1fd6aa6afa7b6dcc89cf752a9a25
                           .group:0000000000000000 wm4.stm32l4xx_hal_gpio_ex.h.21.bbbc787a7485a4871211b5fa6c8b588b
                           .group:0000000000000000 wm4.stm32l4xx_hal_dma.h.21.85535a9033ff7e527296f1cd4943a831
                           .group:0000000000000000 wm4.stm32l4xx_hal_cortex.h.21.94fe10dd50baf2cef42a470b44b9074a
                           .group:0000000000000000 wm4.stm32l4xx_hal_can.h.21.b5d46d7f01b4bc61c276be2c4b59db6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_exti.h.21.d3645023ea960a07b41f6c9b90a2ecc4
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.20.3f4ef626abeefd93430968dc6defca64
                           .group:0000000000000000 wm4.stm32l4xx_hal_flash.h.848.b5e1a92ab03fcd2ac5572c217f864bbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.21.1c548a113da5711525bbba5ee1988cbd
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c_ex.h.21.a624122f67715a687a1d5f17f7841251
                           .group:0000000000000000 wm4.stm32l4xx_hal_i2c.h.738.08f9916803fd1d9db10b6451187300a7
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr.h.21.7ddab2caa97243c36e496eca17b27618
                           .group:0000000000000000 wm4.stm32l4xx_hal_pwr_ex.h.21.5c96c6ce2d8c449959a988a298b6fd6b
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim.h.21.514f1bd267cd24adfb57081a913ef29f
                           .group:0000000000000000 wm4.stm32l4xx_hal_tim_ex.h.21.fc4cf6652f188acb945f023f83d5be40
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart.h.21.fc846d838d179e557421cc5a6a90c71c
                           .group:0000000000000000 wm4.stm32l4xx_hal_uart_ex.h.21.a0d4c7c414dffdc178f0a3a708ac77ea
                           .group:0000000000000000 wm4.stm32l4xx_hal.h.75.771e267559f2fdcd4148207229da2f39
                           .group:0000000000000000 wm4.main.h.60.84418a90fcd58ba06baa4da515eb273a
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.32.a1b57c0d46431311074569d60ca736af
                           .group:0000000000000000 wm4.projdefs.h.29.3472c8470d131a5f474bc7437ea94609
                           .group:0000000000000000 wm4.portmacro.h.30.ebb5f3ce711e1dad21b3172c9bc8e19f
                           .group:0000000000000000 wm4.portable.h.64.742f2ce568820e866a7b541b4c77966f
                           .group:0000000000000000 wm4.mpu_wrappers.h.29.4f9aea82ee68d943d141825e5294de63
                           .group:0000000000000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:0000000000000000 wm4.ieeefp.h.77.c88535c35f465c05b101960cf0179075
                           .group:0000000000000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:0000000000000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:0000000000000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:0000000000000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:0000000000000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:0000000000000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:0000000000000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:0000000000000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:0000000000000000 wm4.reent.h.96.88022c5a22979c33a20a5d76964119ed
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a17c2bf78722c1d7b86ba8d45e5b5f29
                           .group:0000000000000000 wm4.list.h.61.5c5a38f6bc6687eed6d893e57dabd8e6
                           .group:0000000000000000 wm4.task.h.46.9fb92b2c1a30a52e436f6063552b709b
                           .group:0000000000000000 wm4.cmsis_os.h.129.5f4adf2a422dfa714f64051974ebee7a
ARM GAS  /tmp/cccn0NVy.s 			page 55


                           .group:0000000000000000 wm4.cmsis_os2.h.151.57db232dfe421e4f781dd02c42ee4360
                           .group:0000000000000000 wm4.cmsis_os.h.179.c36f217fbf28f1f2e754518bfb5a2ae8

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
osSemaphoreRelease
HAL_GetTick
HAL_Init
HAL_CAN_Start
HAL_CAN_ActivateNotification
osKernelInitialize
osSemaphoreNew
osThreadNew
osKernelStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_MCOConfig
HAL_CAN_Init
HAL_CAN_ConfigFilter
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
osDelay
HAL_CAN_AddTxMessage
osSemaphoreAcquire
HAL_IncTick
